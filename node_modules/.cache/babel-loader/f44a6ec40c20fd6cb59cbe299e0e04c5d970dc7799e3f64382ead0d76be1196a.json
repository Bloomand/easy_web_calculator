{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'intersect';\nvar dependencies = ['typed', 'config', 'abs', 'add', 'addScalar', 'matrix', 'multiply', 'multiplyScalar', 'divideScalar', 'subtract', 'smaller', 'equalScalar', 'flatten', 'isZero', 'isNumeric'];\nexport var createIntersect = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    abs,\n    add,\n    addScalar,\n    matrix,\n    multiply,\n    multiplyScalar,\n    divideScalar,\n    subtract,\n    smaller,\n    equalScalar,\n    flatten,\n    isZero,\n    isNumeric\n  } = _ref;\n  /**\n   * Calculates the point of intersection of two lines in two or three dimensions\n   * and of a line and a plane in three dimensions. The inputs are in the form of\n   * arrays or 1 dimensional matrices. The line intersection functions return null\n   * if the lines do not meet.\n   *\n   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n   *\n   * Syntax:\n   *\n   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n   *\n   * Examples:\n   *\n   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]\n   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]\n   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]\n   *\n   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n   *                              OR Co-efficients of the plane's equation\n   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n   *                              OR undefined if the calculation is for line and plane\n   * @return {Array}              Returns the point of intersection of lines/lines-planes\n   */\n  return typed('intersect', {\n    'Array, Array, Array': _AAA,\n    'Array, Array, Array, Array': _AAAA,\n    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {\n      var arr = _AAA(x.valueOf(), y.valueOf(), plane.valueOf());\n      return arr === null ? null : matrix(arr);\n    },\n    'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {\n      // TODO: output matrix type should match input matrix type\n      var arr = _AAAA(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf());\n      return arr === null ? null : matrix(arr);\n    }\n  });\n  function _AAA(x, y, plane) {\n    x = _coerceArr(x);\n    y = _coerceArr(y);\n    plane = _coerceArr(plane);\n    if (!_3d(x)) {\n      throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n    }\n    if (!_3d(y)) {\n      throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n    }\n    if (!_4d(plane)) {\n      throw new TypeError('Array with 4 numbers expected as third argument');\n    }\n    return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);\n  }\n  function _AAAA(w, x, y, z) {\n    w = _coerceArr(w);\n    x = _coerceArr(x);\n    y = _coerceArr(y);\n    z = _coerceArr(z);\n    if (w.length === 2) {\n      if (!_2d(w)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n      }\n      if (!_2d(x)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n      }\n      if (!_2d(y)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n      }\n      if (!_2d(z)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');\n      }\n      return _intersect2d(w, x, y, z);\n    } else if (w.length === 3) {\n      if (!_3d(w)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n      }\n      if (!_3d(x)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n      }\n      if (!_3d(y)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');\n      }\n      if (!_3d(z)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');\n      }\n      return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);\n    } else {\n      throw new TypeError('Arrays with two or thee dimensional points expected');\n    }\n  }\n\n  /** Coerce row and column 2-dim arrays to 1-dim array */\n  function _coerceArr(arr) {\n    // row matrix\n    if (arr.length === 1) return arr[0];\n\n    // column matrix\n    if (arr.length > 1 && Array.isArray(arr[0])) {\n      if (arr.every(el => Array.isArray(el) && el.length === 1)) return flatten(arr);\n    }\n    return arr;\n  }\n  function _2d(x) {\n    return x.length === 2 && isNumeric(x[0]) && isNumeric(x[1]);\n  }\n  function _3d(x) {\n    return x.length === 3 && isNumeric(x[0]) && isNumeric(x[1]) && isNumeric(x[2]);\n  }\n  function _4d(x) {\n    return x.length === 4 && isNumeric(x[0]) && isNumeric(x[1]) && isNumeric(x[2]) && isNumeric(x[3]);\n  }\n  function _intersect2d(p1a, p1b, p2a, p2b) {\n    var o1 = p1a;\n    var o2 = p2a;\n    var d1 = subtract(o1, p1b);\n    var d2 = subtract(o2, p2b);\n    var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));\n    if (isZero(det)) return null;\n    if (smaller(abs(det), config.epsilon)) {\n      return null;\n    }\n    var d20o11 = multiplyScalar(d2[0], o1[1]);\n    var d21o10 = multiplyScalar(d2[1], o1[0]);\n    var d20o21 = multiplyScalar(d2[0], o2[1]);\n    var d21o20 = multiplyScalar(d2[1], o2[0]);\n    var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);\n    return add(multiply(d1, t), o1);\n  }\n  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {\n    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)\n    var add1 = multiplyScalar(subtract(a, b), subtract(c, d));\n    var add2 = multiplyScalar(subtract(e, f), subtract(g, h));\n    var add3 = multiplyScalar(subtract(i, j), subtract(k, l));\n    return addScalar(addScalar(add1, add2), add3);\n  }\n  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {\n    var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);\n    var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);\n    var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);\n    var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);\n    var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);\n    var numerator = subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343));\n    var denominator = subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321));\n    if (isZero(denominator)) return null;\n    var ta = divideScalar(numerator, denominator);\n    var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);\n    var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));\n    var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));\n    var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));\n    var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));\n    var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));\n    var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));\n    if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {\n      return [pax, pay, paz];\n    } else {\n      return null;\n    }\n  }\n  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {\n    var x1x = multiplyScalar(x1, x);\n    var x2x = multiplyScalar(x2, x);\n    var y1y = multiplyScalar(y1, y);\n    var y2y = multiplyScalar(y2, y);\n    var z1z = multiplyScalar(z1, z);\n    var z2z = multiplyScalar(z2, z);\n    var numerator = subtract(subtract(subtract(c, x1x), y1y), z1z);\n    var denominator = subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z);\n    var t = divideScalar(numerator, denominator);\n    var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));\n    var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));\n    var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));\n    return [px, py, pz];\n    // TODO: Add cases when line is parallel to the plane:\n    //       (a) no intersection,\n    //       (b) line contained in plane\n  }\n});","map":{"version":3,"names":["factory","name","dependencies","createIntersect","_ref","typed","config","abs","add","addScalar","matrix","multiply","multiplyScalar","divideScalar","subtract","smaller","equalScalar","flatten","isZero","isNumeric","_AAA","_AAAA","MatrixMatrixMatrix","x","y","plane","arr","valueOf","MatrixMatrixMatrixMatrix","w","z","_coerceArr","_3d","TypeError","_4d","_intersectLinePlane","length","_2d","_intersect2d","_intersect3d","Array","isArray","every","el","p1a","p1b","p2a","p2b","o1","o2","d1","d2","det","epsilon","d20o11","d21o10","d20o21","d21o20","t","_intersect3dHelper","a","b","c","d","e","f","g","h","i","j","k","l","add1","add2","add3","x1","y1","z1","x2","y2","z2","x3","y3","z3","x4","y4","z4","d1343","d4321","d1321","d4343","d2121","numerator","denominator","ta","tb","pax","pay","paz","pbx","pby","pbz","x1x","x2x","y1y","y2y","z1z","z2z","px","py","pz"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/geometry/intersect.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'intersect';\nvar dependencies = ['typed', 'config', 'abs', 'add', 'addScalar', 'matrix', 'multiply', 'multiplyScalar', 'divideScalar', 'subtract', 'smaller', 'equalScalar', 'flatten', 'isZero', 'isNumeric'];\nexport var createIntersect = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    abs,\n    add,\n    addScalar,\n    matrix,\n    multiply,\n    multiplyScalar,\n    divideScalar,\n    subtract,\n    smaller,\n    equalScalar,\n    flatten,\n    isZero,\n    isNumeric\n  } = _ref;\n  /**\n   * Calculates the point of intersection of two lines in two or three dimensions\n   * and of a line and a plane in three dimensions. The inputs are in the form of\n   * arrays or 1 dimensional matrices. The line intersection functions return null\n   * if the lines do not meet.\n   *\n   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n   *\n   * Syntax:\n   *\n   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n   *\n   * Examples:\n   *\n   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]\n   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]\n   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]\n   *\n   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n   *                              OR Co-efficients of the plane's equation\n   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n   *                              OR undefined if the calculation is for line and plane\n   * @return {Array}              Returns the point of intersection of lines/lines-planes\n   */\n  return typed('intersect', {\n    'Array, Array, Array': _AAA,\n    'Array, Array, Array, Array': _AAAA,\n    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {\n      var arr = _AAA(x.valueOf(), y.valueOf(), plane.valueOf());\n      return arr === null ? null : matrix(arr);\n    },\n    'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {\n      // TODO: output matrix type should match input matrix type\n      var arr = _AAAA(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf());\n      return arr === null ? null : matrix(arr);\n    }\n  });\n  function _AAA(x, y, plane) {\n    x = _coerceArr(x);\n    y = _coerceArr(y);\n    plane = _coerceArr(plane);\n    if (!_3d(x)) {\n      throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n    }\n    if (!_3d(y)) {\n      throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n    }\n    if (!_4d(plane)) {\n      throw new TypeError('Array with 4 numbers expected as third argument');\n    }\n    return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);\n  }\n  function _AAAA(w, x, y, z) {\n    w = _coerceArr(w);\n    x = _coerceArr(x);\n    y = _coerceArr(y);\n    z = _coerceArr(z);\n    if (w.length === 2) {\n      if (!_2d(w)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n      }\n      if (!_2d(x)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n      }\n      if (!_2d(y)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n      }\n      if (!_2d(z)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');\n      }\n      return _intersect2d(w, x, y, z);\n    } else if (w.length === 3) {\n      if (!_3d(w)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n      }\n      if (!_3d(x)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n      }\n      if (!_3d(y)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');\n      }\n      if (!_3d(z)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');\n      }\n      return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);\n    } else {\n      throw new TypeError('Arrays with two or thee dimensional points expected');\n    }\n  }\n\n  /** Coerce row and column 2-dim arrays to 1-dim array */\n  function _coerceArr(arr) {\n    // row matrix\n    if (arr.length === 1) return arr[0];\n\n    // column matrix\n    if (arr.length > 1 && Array.isArray(arr[0])) {\n      if (arr.every(el => Array.isArray(el) && el.length === 1)) return flatten(arr);\n    }\n    return arr;\n  }\n  function _2d(x) {\n    return x.length === 2 && isNumeric(x[0]) && isNumeric(x[1]);\n  }\n  function _3d(x) {\n    return x.length === 3 && isNumeric(x[0]) && isNumeric(x[1]) && isNumeric(x[2]);\n  }\n  function _4d(x) {\n    return x.length === 4 && isNumeric(x[0]) && isNumeric(x[1]) && isNumeric(x[2]) && isNumeric(x[3]);\n  }\n  function _intersect2d(p1a, p1b, p2a, p2b) {\n    var o1 = p1a;\n    var o2 = p2a;\n    var d1 = subtract(o1, p1b);\n    var d2 = subtract(o2, p2b);\n    var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));\n    if (isZero(det)) return null;\n    if (smaller(abs(det), config.epsilon)) {\n      return null;\n    }\n    var d20o11 = multiplyScalar(d2[0], o1[1]);\n    var d21o10 = multiplyScalar(d2[1], o1[0]);\n    var d20o21 = multiplyScalar(d2[0], o2[1]);\n    var d21o20 = multiplyScalar(d2[1], o2[0]);\n    var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);\n    return add(multiply(d1, t), o1);\n  }\n  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {\n    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)\n    var add1 = multiplyScalar(subtract(a, b), subtract(c, d));\n    var add2 = multiplyScalar(subtract(e, f), subtract(g, h));\n    var add3 = multiplyScalar(subtract(i, j), subtract(k, l));\n    return addScalar(addScalar(add1, add2), add3);\n  }\n  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {\n    var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);\n    var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);\n    var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);\n    var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);\n    var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);\n    var numerator = subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343));\n    var denominator = subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321));\n    if (isZero(denominator)) return null;\n    var ta = divideScalar(numerator, denominator);\n    var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);\n    var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));\n    var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));\n    var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));\n    var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));\n    var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));\n    var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));\n    if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {\n      return [pax, pay, paz];\n    } else {\n      return null;\n    }\n  }\n  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {\n    var x1x = multiplyScalar(x1, x);\n    var x2x = multiplyScalar(x2, x);\n    var y1y = multiplyScalar(y1, y);\n    var y2y = multiplyScalar(y2, y);\n    var z1z = multiplyScalar(z1, z);\n    var z2z = multiplyScalar(z2, z);\n    var numerator = subtract(subtract(subtract(c, x1x), y1y), z1z);\n    var denominator = subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z);\n    var t = divideScalar(numerator, denominator);\n    var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));\n    var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));\n    var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));\n    return [px, py, pz];\n    // TODO: Add cases when line is parallel to the plane:\n    //       (a) no intersection,\n    //       (b) line contained in plane\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}