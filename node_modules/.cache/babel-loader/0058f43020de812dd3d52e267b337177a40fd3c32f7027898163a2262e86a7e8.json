{"ast":null,"code":"import { isSymbolNode } from '../../../utils/is.js';\nimport { createSubScope } from '../../../utils/scope.js';\n\n/**\n * Compile an inline expression like \"x > 0\"\n * @param {Node} expression\n * @param {Object} math\n * @param {Object} scope\n * @return {function} Returns a function with one argument which fills in the\n *                    undefined variable (like \"x\") and evaluates the expression\n */\nexport function compileInlineExpression(expression, math, scope) {\n  // find an undefined symbol\n  var symbol = expression.filter(function (node) {\n    return isSymbolNode(node) && !(node.name in math) && !scope.has(node.name);\n  })[0];\n  if (!symbol) {\n    throw new Error('No undefined variable found in inline expression \"' + expression + '\"');\n  }\n\n  // create a test function for this equation\n  var name = symbol.name; // variable name\n  var subScope = createSubScope(scope);\n  var eq = expression.compile();\n  return function inlineExpression(x) {\n    subScope.set(name, x);\n    return eq.evaluate(subScope);\n  };\n}","map":{"version":3,"names":["isSymbolNode","createSubScope","compileInlineExpression","expression","math","scope","symbol","filter","node","name","has","Error","subScope","eq","compile","inlineExpression","x","set","evaluate"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/expression/transform/utils/compileInlineExpression.js"],"sourcesContent":["import { isSymbolNode } from '../../../utils/is.js';\nimport { createSubScope } from '../../../utils/scope.js';\n\n/**\n * Compile an inline expression like \"x > 0\"\n * @param {Node} expression\n * @param {Object} math\n * @param {Object} scope\n * @return {function} Returns a function with one argument which fills in the\n *                    undefined variable (like \"x\") and evaluates the expression\n */\nexport function compileInlineExpression(expression, math, scope) {\n  // find an undefined symbol\n  var symbol = expression.filter(function (node) {\n    return isSymbolNode(node) && !(node.name in math) && !scope.has(node.name);\n  })[0];\n  if (!symbol) {\n    throw new Error('No undefined variable found in inline expression \"' + expression + '\"');\n  }\n\n  // create a test function for this equation\n  var name = symbol.name; // variable name\n  var subScope = createSubScope(scope);\n  var eq = expression.compile();\n  return function inlineExpression(x) {\n    subScope.set(name, x);\n    return eq.evaluate(subScope);\n  };\n}"],"mappings":"AAAA,SAASA,YAAY,QAAQ,sBAAsB;AACnD,SAASC,cAAc,QAAQ,yBAAyB;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,uBAAuBA,CAACC,UAAU,EAAEC,IAAI,EAAEC,KAAK,EAAE;EAC/D;EACA,IAAIC,MAAM,GAAGH,UAAU,CAACI,MAAM,CAAC,UAAUC,IAAI,EAAE;IAC7C,OAAOR,YAAY,CAACQ,IAAI,CAAC,IAAI,EAAEA,IAAI,CAACC,IAAI,IAAIL,IAAI,CAAC,IAAI,CAACC,KAAK,CAACK,GAAG,CAACF,IAAI,CAACC,IAAI,CAAC;EAC5E,CAAC,CAAC,CAAC,CAAC,CAAC;EACL,IAAI,CAACH,MAAM,EAAE;IACX,MAAM,IAAIK,KAAK,CAAC,oDAAoD,GAAGR,UAAU,GAAG,GAAG,CAAC;EAC1F;;EAEA;EACA,IAAIM,IAAI,GAAGH,MAAM,CAACG,IAAI,CAAC,CAAC;EACxB,IAAIG,QAAQ,GAAGX,cAAc,CAACI,KAAK,CAAC;EACpC,IAAIQ,EAAE,GAAGV,UAAU,CAACW,OAAO,EAAE;EAC7B,OAAO,SAASC,gBAAgBA,CAACC,CAAC,EAAE;IAClCJ,QAAQ,CAACK,GAAG,CAACR,IAAI,EAAEO,CAAC,CAAC;IACrB,OAAOH,EAAE,CAACK,QAAQ,CAACN,QAAQ,CAAC;EAC9B,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}