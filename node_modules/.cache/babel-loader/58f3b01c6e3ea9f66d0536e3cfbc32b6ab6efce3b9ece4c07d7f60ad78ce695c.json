{"ast":null,"code":"import { maxArgumentCount } from '../../utils/function.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'map';\nvar dependencies = ['typed'];\nexport var createMap = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Create a new matrix or array with the results of a callback function executed on\n   * each entry of a given matrix/array.\n   *\n   * For each entry of the input, the callback is invoked with three arguments:\n   * the value of the entry, the index at which that entry occurs, and the full\n   * matrix/array being traversed. Note that because the matrix/array might be\n   * multidimensional, the \"index\" argument is always an array of numbers giving\n   * the index in each dimension. This is true even for vectors: the \"index\"\n   * argument is an array of length 1, rather than simply a number.\n   *\n   * Syntax:\n   *\n   *    math.map(x, callback)\n   *\n   * Examples:\n   *\n   *    math.map([1, 2, 3], function(value) {\n   *      return value * value\n   *    })  // returns [1, 4, 9]\n   *\n   *    // The calling convention for the callback can cause subtleties:\n   *    math.map([1, 2, 3], math.format)\n   *    // throws TypeError: map attempted to call 'format(1,[0])' but argument 2 of type Array does not match expected type number or function or Object or string or boolean\n   *    // [This happens because `format` _can_ take a second argument,\n   *    // but its semantics don't match that of the 2nd argument `map` provides]\n   *\n   *    // To avoid this error, use a function that takes exactly the\n   *    // desired arguments:\n   *    math.map([1, 2, 3], x => math.format(x)) // returns ['1', '2', '3']\n   *\n   * See also:\n   *\n   *    filter, forEach, sort\n   *\n   * @param {Matrix | Array} x    The input to iterate on.\n   * @param {Function} callback\n   *     The function to call (as described above) on each entry of the input\n   * @return {Matrix | array}\n   *     Transformed map of x; always has the same type and shape as x\n   */\n  return typed(name, {\n    'Array, function': _map,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.map(callback);\n    }\n  });\n});\n\n/**\n * Map for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @return {Array}\n * @private\n */\nfunction _map(array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return value.map(function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i));\n      });\n    } else {\n      try {\n        // invoke the callback function with the right number of arguments\n        if (args === 1) {\n          return callback(value);\n        } else if (args === 2) {\n          return callback(value, index);\n        } else {\n          // 3 or -1\n          return callback(value, index, array);\n        }\n      } catch (err) {\n        // But maybe the arguments still weren't right\n        if (err instanceof TypeError && 'data' in err && err.data.category === 'wrongType') {\n          var newmsg = \"map attempted to call '\".concat(err.data.fn, \"(\").concat(value);\n          var indexString = JSON.stringify(index);\n          if (args === 2) {\n            newmsg += ',' + indexString;\n          } else if (args !== 1) {\n            newmsg += \",\".concat(indexString, \",\").concat(array);\n          }\n          newmsg += \")' but argument \".concat(err.data.index + 1, \" of type \");\n          newmsg += \"\".concat(err.data.actual, \" does not match expected type \");\n          newmsg += err.data.expected.join(' or ');\n          throw new TypeError(newmsg);\n        }\n        throw err;\n      }\n    }\n  };\n  return recurse(array, []);\n}","map":{"version":3,"names":["maxArgumentCount","factory","name","dependencies","createMap","_ref","typed","_map","MatrixFunction","x","callback","map","array","args","recurse","value","index","Array","isArray","child","i","concat","err","TypeError","data","category","newmsg","fn","indexString","JSON","stringify","actual","expected","join"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/matrix/map.js"],"sourcesContent":["import { maxArgumentCount } from '../../utils/function.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'map';\nvar dependencies = ['typed'];\nexport var createMap = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Create a new matrix or array with the results of a callback function executed on\n   * each entry of a given matrix/array.\n   *\n   * For each entry of the input, the callback is invoked with three arguments:\n   * the value of the entry, the index at which that entry occurs, and the full\n   * matrix/array being traversed. Note that because the matrix/array might be\n   * multidimensional, the \"index\" argument is always an array of numbers giving\n   * the index in each dimension. This is true even for vectors: the \"index\"\n   * argument is an array of length 1, rather than simply a number.\n   *\n   * Syntax:\n   *\n   *    math.map(x, callback)\n   *\n   * Examples:\n   *\n   *    math.map([1, 2, 3], function(value) {\n   *      return value * value\n   *    })  // returns [1, 4, 9]\n   *\n   *    // The calling convention for the callback can cause subtleties:\n   *    math.map([1, 2, 3], math.format)\n   *    // throws TypeError: map attempted to call 'format(1,[0])' but argument 2 of type Array does not match expected type number or function or Object or string or boolean\n   *    // [This happens because `format` _can_ take a second argument,\n   *    // but its semantics don't match that of the 2nd argument `map` provides]\n   *\n   *    // To avoid this error, use a function that takes exactly the\n   *    // desired arguments:\n   *    math.map([1, 2, 3], x => math.format(x)) // returns ['1', '2', '3']\n   *\n   * See also:\n   *\n   *    filter, forEach, sort\n   *\n   * @param {Matrix | Array} x    The input to iterate on.\n   * @param {Function} callback\n   *     The function to call (as described above) on each entry of the input\n   * @return {Matrix | array}\n   *     Transformed map of x; always has the same type and shape as x\n   */\n  return typed(name, {\n    'Array, function': _map,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.map(callback);\n    }\n  });\n});\n\n/**\n * Map for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @return {Array}\n * @private\n */\nfunction _map(array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return value.map(function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i));\n      });\n    } else {\n      try {\n        // invoke the callback function with the right number of arguments\n        if (args === 1) {\n          return callback(value);\n        } else if (args === 2) {\n          return callback(value, index);\n        } else {\n          // 3 or -1\n          return callback(value, index, array);\n        }\n      } catch (err) {\n        // But maybe the arguments still weren't right\n        if (err instanceof TypeError && 'data' in err && err.data.category === 'wrongType') {\n          var newmsg = \"map attempted to call '\".concat(err.data.fn, \"(\").concat(value);\n          var indexString = JSON.stringify(index);\n          if (args === 2) {\n            newmsg += ',' + indexString;\n          } else if (args !== 1) {\n            newmsg += \",\".concat(indexString, \",\").concat(array);\n          }\n          newmsg += \")' but argument \".concat(err.data.index + 1, \" of type \");\n          newmsg += \"\".concat(err.data.actual, \" does not match expected type \");\n          newmsg += err.data.expected.join(' or ');\n          throw new TypeError(newmsg);\n        }\n        throw err;\n      }\n    }\n  };\n  return recurse(array, []);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}