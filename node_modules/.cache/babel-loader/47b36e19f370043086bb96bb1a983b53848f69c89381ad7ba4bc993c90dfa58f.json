{"ast":null,"code":"import { isChain } from '../../utils/is.js';\nimport { format } from '../../utils/string.js';\nimport { hasOwnProperty, lazy } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Chain';\nvar dependencies = ['?on', 'math', 'typed'];\nexport var createChainClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    math,\n    typed\n  } = _ref;\n  /**\n   * @constructor Chain\n   * Wrap any value in a chain, allowing to perform chained operations on\n   * the value.\n   *\n   * All methods available in the math.js library can be called upon the chain,\n   * and then will be evaluated with the value itself as first argument.\n   * The chain can be closed by executing chain.done(), which will return\n   * the final value.\n   *\n   * The Chain has a number of special functions:\n   * - done()             Finalize the chained operation and return the\n   *                      chain's value.\n   * - valueOf()          The same as done()\n   * - toString()         Returns a string representation of the chain's value.\n   *\n   * @param {*} [value]\n   */\n  function Chain(value) {\n    if (!(this instanceof Chain)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (isChain(value)) {\n      this.value = value.value;\n    } else {\n      this.value = value;\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Chain.prototype.type = 'Chain';\n  Chain.prototype.isChain = true;\n\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method valueOf()\n   * @returns {*} value\n   */\n  Chain.prototype.done = function () {\n    return this.value;\n  };\n\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method done()\n   * @returns {*} value\n   */\n  Chain.prototype.valueOf = function () {\n    return this.value;\n  };\n\n  /**\n   * Get a string representation of the value in the chain\n   * @returns {string}\n   */\n  Chain.prototype.toString = function () {\n    return format(this.value);\n  };\n\n  /**\n   * Get a JSON representation of the chain\n   * @returns {Object}\n   */\n  Chain.prototype.toJSON = function () {\n    return {\n      mathjs: 'Chain',\n      value: this.value\n    };\n  };\n\n  /**\n   * Instantiate a Chain from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"Chain\", value: ...}`,\n   *                       where mathjs is optional\n   * @returns {Chain}\n   */\n  Chain.fromJSON = function (json) {\n    return new Chain(json.value);\n  };\n\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {Function} fn      The function to be proxied\n   *                           If fn is no function, it is silently ignored.\n   * @private\n   */\n  function createProxy(name, fn) {\n    if (typeof fn === 'function') {\n      Chain.prototype[name] = chainify(fn);\n    }\n  }\n\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {function} resolver   The function resolving with the\n   *                              function to be proxied\n   * @private\n   */\n  function createLazyProxy(name, resolver) {\n    lazy(Chain.prototype, name, function outerResolver() {\n      var fn = resolver();\n      if (typeof fn === 'function') {\n        return chainify(fn);\n      }\n      return undefined; // if not a function, ignore\n    });\n  }\n\n  /**\n   * Make a function chainable\n   * @param {function} fn\n   * @return {Function} chain function\n   * @private\n   */\n  function chainify(fn) {\n    return function () {\n      // Here, `this` will be the context of a Chain instance\n      if (arguments.length === 0) {\n        return new Chain(fn(this.value));\n      }\n      var args = [this.value];\n      for (var i = 0; i < arguments.length; i++) {\n        args[i + 1] = arguments[i];\n      }\n      if (typed.isTypedFunction(fn)) {\n        var sigObject = typed.resolve(fn, args);\n        // We want to detect if a rest parameter has matched across the\n        // value in the chain and the current arguments of this call.\n        // That is the case if and only if the matching signature has\n        // exactly one parameter (which then must be a rest parameter\n        // as it is matching at least two actual arguments).\n        if (sigObject.params.length === 1) {\n          throw new Error('chain function ' + fn.name + ' cannot match rest parameter between chain value and additional arguments.');\n        }\n        return new Chain(sigObject.implementation.apply(fn, args));\n      }\n      return new Chain(fn.apply(fn, args));\n    };\n  }\n\n  /**\n   * Create a proxy for a single method, or an object with multiple methods.\n   * Example usage:\n   *\n   *   Chain.createProxy('add', function add (x, y) {...})\n   *   Chain.createProxy({\n   *     add:      function add (x, y) {...},\n   *     subtract: function subtract (x, y) {...}\n   *   }\n   *\n   * @param {string | Object} arg0   A name (string), or an object with\n   *                                 functions\n   * @param {*} [arg1]               A function, when arg0 is a name\n   */\n  Chain.createProxy = function (arg0, arg1) {\n    if (typeof arg0 === 'string') {\n      // createProxy(name, value)\n      createProxy(arg0, arg1);\n    } else {\n      var _loop = function _loop(_name) {\n        if (hasOwnProperty(arg0, _name) && excludedNames[_name] === undefined) {\n          createLazyProxy(_name, () => arg0[_name]);\n        }\n      };\n      // createProxy(values)\n      for (var _name in arg0) {\n        _loop(_name);\n      }\n    }\n  };\n  var excludedNames = {\n    expression: true,\n    docs: true,\n    type: true,\n    classes: true,\n    json: true,\n    error: true,\n    isChain: true // conflicts with the property isChain of a Chain instance\n  };\n\n  // create proxy for everything that is in math.js\n  Chain.createProxy(math);\n\n  // register on the import event, automatically add a proxy for every imported function.\n  if (on) {\n    on('import', function (name, resolver, path) {\n      if (!path) {\n        // an imported function (not a data type or something special)\n        createLazyProxy(name, resolver);\n      }\n    });\n  }\n  return Chain;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["isChain","format","hasOwnProperty","lazy","factory","name","dependencies","createChainClass","_ref","on","math","typed","Chain","value","SyntaxError","prototype","type","done","valueOf","toString","toJSON","mathjs","fromJSON","json","createProxy","fn","chainify","createLazyProxy","resolver","outerResolver","undefined","arguments","length","args","i","isTypedFunction","sigObject","resolve","params","Error","implementation","apply","arg0","arg1","_loop","_name","excludedNames","expression","docs","classes","error","path","isClass"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/type/chain/Chain.js"],"sourcesContent":["import { isChain } from '../../utils/is.js';\nimport { format } from '../../utils/string.js';\nimport { hasOwnProperty, lazy } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Chain';\nvar dependencies = ['?on', 'math', 'typed'];\nexport var createChainClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    math,\n    typed\n  } = _ref;\n  /**\n   * @constructor Chain\n   * Wrap any value in a chain, allowing to perform chained operations on\n   * the value.\n   *\n   * All methods available in the math.js library can be called upon the chain,\n   * and then will be evaluated with the value itself as first argument.\n   * The chain can be closed by executing chain.done(), which will return\n   * the final value.\n   *\n   * The Chain has a number of special functions:\n   * - done()             Finalize the chained operation and return the\n   *                      chain's value.\n   * - valueOf()          The same as done()\n   * - toString()         Returns a string representation of the chain's value.\n   *\n   * @param {*} [value]\n   */\n  function Chain(value) {\n    if (!(this instanceof Chain)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (isChain(value)) {\n      this.value = value.value;\n    } else {\n      this.value = value;\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Chain.prototype.type = 'Chain';\n  Chain.prototype.isChain = true;\n\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method valueOf()\n   * @returns {*} value\n   */\n  Chain.prototype.done = function () {\n    return this.value;\n  };\n\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method done()\n   * @returns {*} value\n   */\n  Chain.prototype.valueOf = function () {\n    return this.value;\n  };\n\n  /**\n   * Get a string representation of the value in the chain\n   * @returns {string}\n   */\n  Chain.prototype.toString = function () {\n    return format(this.value);\n  };\n\n  /**\n   * Get a JSON representation of the chain\n   * @returns {Object}\n   */\n  Chain.prototype.toJSON = function () {\n    return {\n      mathjs: 'Chain',\n      value: this.value\n    };\n  };\n\n  /**\n   * Instantiate a Chain from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"Chain\", value: ...}`,\n   *                       where mathjs is optional\n   * @returns {Chain}\n   */\n  Chain.fromJSON = function (json) {\n    return new Chain(json.value);\n  };\n\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {Function} fn      The function to be proxied\n   *                           If fn is no function, it is silently ignored.\n   * @private\n   */\n  function createProxy(name, fn) {\n    if (typeof fn === 'function') {\n      Chain.prototype[name] = chainify(fn);\n    }\n  }\n\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {function} resolver   The function resolving with the\n   *                              function to be proxied\n   * @private\n   */\n  function createLazyProxy(name, resolver) {\n    lazy(Chain.prototype, name, function outerResolver() {\n      var fn = resolver();\n      if (typeof fn === 'function') {\n        return chainify(fn);\n      }\n      return undefined; // if not a function, ignore\n    });\n  }\n\n  /**\n   * Make a function chainable\n   * @param {function} fn\n   * @return {Function} chain function\n   * @private\n   */\n  function chainify(fn) {\n    return function () {\n      // Here, `this` will be the context of a Chain instance\n      if (arguments.length === 0) {\n        return new Chain(fn(this.value));\n      }\n      var args = [this.value];\n      for (var i = 0; i < arguments.length; i++) {\n        args[i + 1] = arguments[i];\n      }\n      if (typed.isTypedFunction(fn)) {\n        var sigObject = typed.resolve(fn, args);\n        // We want to detect if a rest parameter has matched across the\n        // value in the chain and the current arguments of this call.\n        // That is the case if and only if the matching signature has\n        // exactly one parameter (which then must be a rest parameter\n        // as it is matching at least two actual arguments).\n        if (sigObject.params.length === 1) {\n          throw new Error('chain function ' + fn.name + ' cannot match rest parameter between chain value and additional arguments.');\n        }\n        return new Chain(sigObject.implementation.apply(fn, args));\n      }\n      return new Chain(fn.apply(fn, args));\n    };\n  }\n\n  /**\n   * Create a proxy for a single method, or an object with multiple methods.\n   * Example usage:\n   *\n   *   Chain.createProxy('add', function add (x, y) {...})\n   *   Chain.createProxy({\n   *     add:      function add (x, y) {...},\n   *     subtract: function subtract (x, y) {...}\n   *   }\n   *\n   * @param {string | Object} arg0   A name (string), or an object with\n   *                                 functions\n   * @param {*} [arg1]               A function, when arg0 is a name\n   */\n  Chain.createProxy = function (arg0, arg1) {\n    if (typeof arg0 === 'string') {\n      // createProxy(name, value)\n      createProxy(arg0, arg1);\n    } else {\n      var _loop = function _loop(_name) {\n        if (hasOwnProperty(arg0, _name) && excludedNames[_name] === undefined) {\n          createLazyProxy(_name, () => arg0[_name]);\n        }\n      };\n      // createProxy(values)\n      for (var _name in arg0) {\n        _loop(_name);\n      }\n    }\n  };\n  var excludedNames = {\n    expression: true,\n    docs: true,\n    type: true,\n    classes: true,\n    json: true,\n    error: true,\n    isChain: true // conflicts with the property isChain of a Chain instance\n  };\n\n  // create proxy for everything that is in math.js\n  Chain.createProxy(math);\n\n  // register on the import event, automatically add a proxy for every imported function.\n  if (on) {\n    on('import', function (name, resolver, path) {\n      if (!path) {\n        // an imported function (not a data type or something special)\n        createLazyProxy(name, resolver);\n      }\n    });\n  }\n  return Chain;\n}, {\n  isClass: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}