{"ast":null,"code":"import { containsCollections } from '../../utils/collection.js';\nimport { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'median';\nvar dependencies = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];\nexport var createMedian = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    divide,\n    compare,\n    partitionSelect\n  } = _ref;\n  /**\n   * Recursively calculate the median of an n-dimensional array\n   * @param {Array} array\n   * @return {Number} median\n   * @private\n   */\n  function _median(array) {\n    try {\n      array = flatten(array.valueOf());\n      var num = array.length;\n      if (num === 0) {\n        throw new Error('Cannot calculate median of an empty array');\n      }\n      if (num % 2 === 0) {\n        // even: return the average of the two middle values\n        var mid = num / 2 - 1;\n        var right = partitionSelect(array, mid + 1);\n\n        // array now partitioned at mid + 1, take max of left part\n        var left = array[mid];\n        for (var i = 0; i < mid; ++i) {\n          if (compare(array[i], left) > 0) {\n            left = array[i];\n          }\n        }\n        return middle2(left, right);\n      } else {\n        // odd: return the middle value\n        var m = partitionSelect(array, (num - 1) / 2);\n        return middle(m);\n      }\n    } catch (err) {\n      throw improveErrorMessage(err, 'median');\n    }\n  }\n\n  // helper function to type check the middle value of the array\n  var middle = typed({\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {\n      return value;\n    }\n  });\n\n  // helper function to type check the two middle value of the array\n  var middle2 = typed({\n    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {\n      return divide(add(left, right), 2);\n    }\n  });\n\n  /**\n   * Compute the median of a matrix or a list with values. The values are\n   * sorted and the middle value is returned. In case of an even number of\n   * values, the average of the two middle values is returned.\n   * Supported types of values are: Number, BigNumber, Unit\n   *\n   * In case of a (multi dimensional) array or matrix, the median of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.median(a, b, c, ...)\n   *     math.median(A)\n   *\n   * Examples:\n   *\n   *     math.median(5, 2, 7)        // returns 5\n   *     math.median([3, -1, 5, 7])  // returns 4\n   *\n   * See also:\n   *\n   *     mean, min, max, sum, prod, std, variance, quantileSeq\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The median\n   */\n  return typed(name, {\n    // median([a, b, c, d, ...])\n    'Array | Matrix': _median,\n    // median([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement median(A, dim)\n      throw new Error('median(A, dim) is not yet supported');\n      // return reduce(arguments[0], arguments[1], ...)\n    },\n\n    // median(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function median');\n      }\n      return _median(args);\n    }\n  });\n});","map":{"version":3,"names":["containsCollections","flatten","factory","improveErrorMessage","name","dependencies","createMedian","_ref","typed","add","divide","compare","partitionSelect","_median","array","valueOf","num","length","Error","mid","right","left","i","middle2","m","middle","err","numberBigNumberComplexUnit","value","numberBigNumberComplexUnitNumberBigNumberComplexUnit","ArrayMatrixNumberBigNumber","dim","_","args","TypeError"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/statistics/median.js"],"sourcesContent":["import { containsCollections } from '../../utils/collection.js';\nimport { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'median';\nvar dependencies = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];\nexport var createMedian = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    divide,\n    compare,\n    partitionSelect\n  } = _ref;\n  /**\n   * Recursively calculate the median of an n-dimensional array\n   * @param {Array} array\n   * @return {Number} median\n   * @private\n   */\n  function _median(array) {\n    try {\n      array = flatten(array.valueOf());\n      var num = array.length;\n      if (num === 0) {\n        throw new Error('Cannot calculate median of an empty array');\n      }\n      if (num % 2 === 0) {\n        // even: return the average of the two middle values\n        var mid = num / 2 - 1;\n        var right = partitionSelect(array, mid + 1);\n\n        // array now partitioned at mid + 1, take max of left part\n        var left = array[mid];\n        for (var i = 0; i < mid; ++i) {\n          if (compare(array[i], left) > 0) {\n            left = array[i];\n          }\n        }\n        return middle2(left, right);\n      } else {\n        // odd: return the middle value\n        var m = partitionSelect(array, (num - 1) / 2);\n        return middle(m);\n      }\n    } catch (err) {\n      throw improveErrorMessage(err, 'median');\n    }\n  }\n\n  // helper function to type check the middle value of the array\n  var middle = typed({\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {\n      return value;\n    }\n  });\n\n  // helper function to type check the two middle value of the array\n  var middle2 = typed({\n    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {\n      return divide(add(left, right), 2);\n    }\n  });\n\n  /**\n   * Compute the median of a matrix or a list with values. The values are\n   * sorted and the middle value is returned. In case of an even number of\n   * values, the average of the two middle values is returned.\n   * Supported types of values are: Number, BigNumber, Unit\n   *\n   * In case of a (multi dimensional) array or matrix, the median of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.median(a, b, c, ...)\n   *     math.median(A)\n   *\n   * Examples:\n   *\n   *     math.median(5, 2, 7)        // returns 5\n   *     math.median([3, -1, 5, 7])  // returns 4\n   *\n   * See also:\n   *\n   *     mean, min, max, sum, prod, std, variance, quantileSeq\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The median\n   */\n  return typed(name, {\n    // median([a, b, c, d, ...])\n    'Array | Matrix': _median,\n    // median([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement median(A, dim)\n      throw new Error('median(A, dim) is not yet supported');\n      // return reduce(arguments[0], arguments[1], ...)\n    },\n\n    // median(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function median');\n      }\n      return _median(args);\n    }\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}