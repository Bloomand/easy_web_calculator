{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { log10Number } from '../../plain/number/index.js';\nvar name = 'log10';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createLog10 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex: _Complex\n  } = _ref;\n  /**\n   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log10(x)\n   *\n   * Examples:\n   *\n   *    math.log10(0.00001)            // returns -5\n   *    math.log10(10000)              // returns 4\n   *    math.log(10000) / math.log(10) // returns 4\n   *    math.pow(10, 4)                // returns 10000\n   *\n   * See also:\n   *\n   *    exp, log, log1p, log2\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 10-base logarithm of `x`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return log10Number(x);\n      } else {\n        // negative value -> complex value computation\n        return new _Complex(x, 0).log().div(Math.LN10);\n      }\n    },\n    Complex: function Complex(x) {\n      return new _Complex(x).log().div(Math.LN10);\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log();\n      } else {\n        // downgrade to number, return Complex valued result\n        return new _Complex(x.toNumber(), 0).log().div(Math.LN10);\n      }\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","map":{"version":3,"names":["factory","deepMap","log10Number","name","dependencies","createLog10","_ref","typed","config","Complex","_Complex","number","x","predictable","log","div","Math","LN10","BigNumber","isNegative","toNumber","referToSelf","self"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/arithmetic/log10.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { log10Number } from '../../plain/number/index.js';\nvar name = 'log10';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createLog10 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex: _Complex\n  } = _ref;\n  /**\n   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log10(x)\n   *\n   * Examples:\n   *\n   *    math.log10(0.00001)            // returns -5\n   *    math.log10(10000)              // returns 4\n   *    math.log(10000) / math.log(10) // returns 4\n   *    math.pow(10, 4)                // returns 10000\n   *\n   * See also:\n   *\n   *    exp, log, log1p, log2\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 10-base logarithm of `x`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return log10Number(x);\n      } else {\n        // negative value -> complex value computation\n        return new _Complex(x, 0).log().div(Math.LN10);\n      }\n    },\n    Complex: function Complex(x) {\n      return new _Complex(x).log().div(Math.LN10);\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log();\n      } else {\n        // downgrade to number, return Complex valued result\n        return new _Complex(x.toNumber(), 0).log().div(Math.LN10);\n      }\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,WAAW,QAAQ,6BAA6B;AACzD,IAAIC,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC;AACjD,OAAO,IAAIC,WAAW,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC1E,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,OAAO,EAAEC;EACX,CAAC,GAAGJ,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBQ,MAAM,EAAE,SAASA,MAAMA,CAACC,CAAC,EAAE;MACzB,IAAIA,CAAC,IAAI,CAAC,IAAIJ,MAAM,CAACK,WAAW,EAAE;QAChC,OAAOX,WAAW,CAACU,CAAC,CAAC;MACvB,CAAC,MAAM;QACL;QACA,OAAO,IAAIF,QAAQ,CAACE,CAAC,EAAE,CAAC,CAAC,CAACE,GAAG,EAAE,CAACC,GAAG,CAACC,IAAI,CAACC,IAAI,CAAC;MAChD;IACF,CAAC;IACDR,OAAO,EAAE,SAASA,OAAOA,CAACG,CAAC,EAAE;MAC3B,OAAO,IAAIF,QAAQ,CAACE,CAAC,CAAC,CAACE,GAAG,EAAE,CAACC,GAAG,CAACC,IAAI,CAACC,IAAI,CAAC;IAC7C,CAAC;IACDC,SAAS,EAAE,SAASA,SAASA,CAACN,CAAC,EAAE;MAC/B,IAAI,CAACA,CAAC,CAACO,UAAU,EAAE,IAAIX,MAAM,CAACK,WAAW,EAAE;QACzC,OAAOD,CAAC,CAACE,GAAG,EAAE;MAChB,CAAC,MAAM;QACL;QACA,OAAO,IAAIJ,QAAQ,CAACE,CAAC,CAACQ,QAAQ,EAAE,EAAE,CAAC,CAAC,CAACN,GAAG,EAAE,CAACC,GAAG,CAACC,IAAI,CAACC,IAAI,CAAC;MAC3D;IACF,CAAC;IACD,gBAAgB,EAAEV,KAAK,CAACc,WAAW,CAACC,IAAI,IAAIV,CAAC,IAAIX,OAAO,CAACW,CAAC,EAAEU,IAAI,CAAC;EACnE,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}