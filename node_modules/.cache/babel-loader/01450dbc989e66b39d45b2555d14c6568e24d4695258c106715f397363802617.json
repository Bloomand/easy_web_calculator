{"ast":null,"code":"import { typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { noBignumber, noFraction } from '../../utils/noop.js';\nvar name = 'numeric';\nvar dependencies = ['number', '?bignumber', '?fraction'];\nexport var createNumeric = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    number: _number,\n    bignumber,\n    fraction\n  } = _ref;\n  var validInputTypes = {\n    string: true,\n    number: true,\n    BigNumber: true,\n    Fraction: true\n  };\n\n  // Load the conversion functions for each output type\n  var validOutputTypes = {\n    number: x => _number(x),\n    BigNumber: bignumber ? x => bignumber(x) : noBignumber,\n    Fraction: fraction ? x => fraction(x) : noFraction\n  };\n\n  /**\n   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.\n   *\n   * Syntax:\n   *\n   *    math.numeric(x)\n   *\n   * Examples:\n   *\n   *    math.numeric('4')                           // returns 4\n   *    math.numeric('4', 'number')                 // returns 4\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\n   *    math.numeric(math.fraction(2, 5), 'number') // returns 0.4\n   *\n   * See also:\n   *\n   *    number, fraction, bignumber, string, format\n   *\n   * @param {string | number | BigNumber | Fraction } value\n   *              A numeric value or a string containing a numeric value\n   * @param {string} outputType\n   *              Desired numeric output type.\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\n   * @return {number | BigNumber | Fraction}\n   *              Returns an instance of the numeric in the requested type\n   */\n  return function numeric(value) {\n    var outputType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'number';\n    var check = arguments.length > 2 ? arguments[2] : undefined;\n    if (check !== undefined) {\n      throw new SyntaxError('numeric() takes one or two arguments');\n    }\n    var inputType = typeOf(value);\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n});","map":{"version":3,"names":["typeOf","factory","noBignumber","noFraction","name","dependencies","createNumeric","_ref","number","_number","bignumber","fraction","validInputTypes","string","BigNumber","Fraction","validOutputTypes","x","numeric","value","outputType","arguments","length","undefined","check","SyntaxError","inputType","TypeError","Object","keys","join"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/utils/numeric.js"],"sourcesContent":["import { typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { noBignumber, noFraction } from '../../utils/noop.js';\nvar name = 'numeric';\nvar dependencies = ['number', '?bignumber', '?fraction'];\nexport var createNumeric = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    number: _number,\n    bignumber,\n    fraction\n  } = _ref;\n  var validInputTypes = {\n    string: true,\n    number: true,\n    BigNumber: true,\n    Fraction: true\n  };\n\n  // Load the conversion functions for each output type\n  var validOutputTypes = {\n    number: x => _number(x),\n    BigNumber: bignumber ? x => bignumber(x) : noBignumber,\n    Fraction: fraction ? x => fraction(x) : noFraction\n  };\n\n  /**\n   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.\n   *\n   * Syntax:\n   *\n   *    math.numeric(x)\n   *\n   * Examples:\n   *\n   *    math.numeric('4')                           // returns 4\n   *    math.numeric('4', 'number')                 // returns 4\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\n   *    math.numeric(math.fraction(2, 5), 'number') // returns 0.4\n   *\n   * See also:\n   *\n   *    number, fraction, bignumber, string, format\n   *\n   * @param {string | number | BigNumber | Fraction } value\n   *              A numeric value or a string containing a numeric value\n   * @param {string} outputType\n   *              Desired numeric output type.\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\n   * @return {number | BigNumber | Fraction}\n   *              Returns an instance of the numeric in the requested type\n   */\n  return function numeric(value) {\n    var outputType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'number';\n    var check = arguments.length > 2 ? arguments[2] : undefined;\n    if (check !== undefined) {\n      throw new SyntaxError('numeric() takes one or two arguments');\n    }\n    var inputType = typeOf(value);\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n});"],"mappings":"AAAA,SAASA,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,WAAW,EAAEC,UAAU,QAAQ,qBAAqB;AAC7D,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,QAAQ,EAAE,YAAY,EAAE,WAAW,CAAC;AACxD,OAAO,IAAIC,aAAa,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC5E,IAAI;IACFC,MAAM,EAAEC,OAAO;IACfC,SAAS;IACTC;EACF,CAAC,GAAGJ,IAAI;EACR,IAAIK,eAAe,GAAG;IACpBC,MAAM,EAAE,IAAI;IACZL,MAAM,EAAE,IAAI;IACZM,SAAS,EAAE,IAAI;IACfC,QAAQ,EAAE;EACZ,CAAC;;EAED;EACA,IAAIC,gBAAgB,GAAG;IACrBR,MAAM,EAAES,CAAC,IAAIR,OAAO,CAACQ,CAAC,CAAC;IACvBH,SAAS,EAAEJ,SAAS,GAAGO,CAAC,IAAIP,SAAS,CAACO,CAAC,CAAC,GAAGf,WAAW;IACtDa,QAAQ,EAAEJ,QAAQ,GAAGM,CAAC,IAAIN,QAAQ,CAACM,CAAC,CAAC,GAAGd;EAC1C,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAO,SAASe,OAAOA,CAACC,KAAK,EAAE;IAC7B,IAAIC,UAAU,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ;IAC7F,IAAIG,KAAK,GAAGH,SAAS,CAACC,MAAM,GAAG,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAGE,SAAS;IAC3D,IAAIC,KAAK,KAAKD,SAAS,EAAE;MACvB,MAAM,IAAIE,WAAW,CAAC,sCAAsC,CAAC;IAC/D;IACA,IAAIC,SAAS,GAAG1B,MAAM,CAACmB,KAAK,CAAC;IAC7B,IAAI,EAAEO,SAAS,IAAId,eAAe,CAAC,EAAE;MACnC,MAAM,IAAIe,SAAS,CAAC,iBAAiB,GAAGR,KAAK,GAAG,YAAY,GAAGO,SAAS,GAAG,2BAA2B,GAAGE,MAAM,CAACC,IAAI,CAACjB,eAAe,CAAC,CAACkB,IAAI,CAAC,IAAI,CAAC,CAAC;IACnJ;IACA,IAAI,EAAEV,UAAU,IAAIJ,gBAAgB,CAAC,EAAE;MACrC,MAAM,IAAIW,SAAS,CAAC,iBAAiB,GAAGR,KAAK,GAAG,YAAY,GAAGC,UAAU,GAAG,4BAA4B,GAAGQ,MAAM,CAACC,IAAI,CAACb,gBAAgB,CAAC,CAACc,IAAI,CAAC,IAAI,CAAC,CAAC;IACtJ;IACA,IAAIV,UAAU,KAAKM,SAAS,EAAE;MAC5B,OAAOP,KAAK;IACd,CAAC,MAAM;MACL,OAAOH,gBAAgB,CAACI,UAAU,CAAC,CAACD,KAAK,CAAC;IAC5C;EACF,CAAC;AACH,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}