{"ast":null,"code":"import { filter, filterRegExp } from '../../utils/array.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'filter';\nvar dependencies = ['typed'];\nexport var createFilter = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Filter the items in an array or one dimensional matrix.\n   *\n   * Syntax:\n   *\n   *    math.filter(x, test)\n   *\n   * Examples:\n   *\n   *    function isPositive (x) {\n   *      return x > 0\n   *    }\n   *    math.filter([6, -2, -1, 4, 3], isPositive) // returns [6, 4, 3]\n   *\n   *    math.filter([\"23\", \"foo\", \"100\", \"55\", \"bar\"], /[0-9]+/) // returns [\"23\", \"100\", \"55\"]\n   *\n   * See also:\n   *\n   *    forEach, map, sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to filter\n   * @param {Function | RegExp} test\n   *        A function or regular expression to test items.\n   *        All entries for which `test` returns true are returned.\n   *        When `test` is a function, it is invoked with three parameters:\n   *        the value of the element, the index of the element, and the\n   *        matrix/array being traversed. The function must return a boolean.\n   * @return {Matrix | Array} Returns the filtered matrix.\n   */\n  return typed('filter', {\n    'Array, function': _filterCallback,\n    'Matrix, function': function MatrixFunction(x, test) {\n      return x.create(_filterCallback(x.toArray(), test));\n    },\n    'Array, RegExp': filterRegExp,\n    'Matrix, RegExp': function MatrixRegExp(x, test) {\n      return x.create(filterRegExp(x.toArray(), test));\n    }\n  });\n});\n\n/**\n * Filter values in a callback given a callback function\n * @param {Array} x\n * @param {Function} callback\n * @return {Array} Returns the filtered array\n * @private\n */\nfunction _filterCallback(x, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n  return filter(x, function (value, index, array) {\n    // invoke the callback function with the right number of arguments\n    if (args === 1) {\n      return callback(value);\n    } else if (args === 2) {\n      return callback(value, [index]);\n    } else {\n      // 3 or -1\n      return callback(value, [index], array);\n    }\n  });\n}","map":{"version":3,"names":["filter","filterRegExp","maxArgumentCount","factory","name","dependencies","createFilter","_ref","typed","_filterCallback","MatrixFunction","x","test","create","toArray","MatrixRegExp","callback","args","value","index","array"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/matrix/filter.js"],"sourcesContent":["import { filter, filterRegExp } from '../../utils/array.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'filter';\nvar dependencies = ['typed'];\nexport var createFilter = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Filter the items in an array or one dimensional matrix.\n   *\n   * Syntax:\n   *\n   *    math.filter(x, test)\n   *\n   * Examples:\n   *\n   *    function isPositive (x) {\n   *      return x > 0\n   *    }\n   *    math.filter([6, -2, -1, 4, 3], isPositive) // returns [6, 4, 3]\n   *\n   *    math.filter([\"23\", \"foo\", \"100\", \"55\", \"bar\"], /[0-9]+/) // returns [\"23\", \"100\", \"55\"]\n   *\n   * See also:\n   *\n   *    forEach, map, sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to filter\n   * @param {Function | RegExp} test\n   *        A function or regular expression to test items.\n   *        All entries for which `test` returns true are returned.\n   *        When `test` is a function, it is invoked with three parameters:\n   *        the value of the element, the index of the element, and the\n   *        matrix/array being traversed. The function must return a boolean.\n   * @return {Matrix | Array} Returns the filtered matrix.\n   */\n  return typed('filter', {\n    'Array, function': _filterCallback,\n    'Matrix, function': function MatrixFunction(x, test) {\n      return x.create(_filterCallback(x.toArray(), test));\n    },\n    'Array, RegExp': filterRegExp,\n    'Matrix, RegExp': function MatrixRegExp(x, test) {\n      return x.create(filterRegExp(x.toArray(), test));\n    }\n  });\n});\n\n/**\n * Filter values in a callback given a callback function\n * @param {Array} x\n * @param {Function} callback\n * @return {Array} Returns the filtered array\n * @private\n */\nfunction _filterCallback(x, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n  return filter(x, function (value, index, array) {\n    // invoke the callback function with the right number of arguments\n    if (args === 1) {\n      return callback(value);\n    } else if (args === 2) {\n      return callback(value, [index]);\n    } else {\n      // 3 or -1\n      return callback(value, [index], array);\n    }\n  });\n}"],"mappings":"AAAA,SAASA,MAAM,EAAEC,YAAY,QAAQ,sBAAsB;AAC3D,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,YAAY,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC3E,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAAC,QAAQ,EAAE;IACrB,iBAAiB,EAAEC,eAAe;IAClC,kBAAkB,EAAE,SAASC,cAAcA,CAACC,CAAC,EAAEC,IAAI,EAAE;MACnD,OAAOD,CAAC,CAACE,MAAM,CAACJ,eAAe,CAACE,CAAC,CAACG,OAAO,EAAE,EAAEF,IAAI,CAAC,CAAC;IACrD,CAAC;IACD,eAAe,EAAEX,YAAY;IAC7B,gBAAgB,EAAE,SAASc,YAAYA,CAACJ,CAAC,EAAEC,IAAI,EAAE;MAC/C,OAAOD,CAAC,CAACE,MAAM,CAACZ,YAAY,CAACU,CAAC,CAACG,OAAO,EAAE,EAAEF,IAAI,CAAC,CAAC;IAClD;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASH,eAAeA,CAACE,CAAC,EAAEK,QAAQ,EAAE;EACpC;EACA,IAAIC,IAAI,GAAGf,gBAAgB,CAACc,QAAQ,CAAC;EACrC,OAAOhB,MAAM,CAACW,CAAC,EAAE,UAAUO,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAC9C;IACA,IAAIH,IAAI,KAAK,CAAC,EAAE;MACd,OAAOD,QAAQ,CAACE,KAAK,CAAC;IACxB,CAAC,MAAM,IAAID,IAAI,KAAK,CAAC,EAAE;MACrB,OAAOD,QAAQ,CAACE,KAAK,EAAE,CAACC,KAAK,CAAC,CAAC;IACjC,CAAC,MAAM;MACL;MACA,OAAOH,QAAQ,CAACE,KAAK,EAAE,CAACC,KAAK,CAAC,EAAEC,KAAK,CAAC;IACxC;EACF,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}