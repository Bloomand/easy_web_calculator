{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'unit';\nvar dependencies = ['typed', 'Unit'];\n\n// This function is named createUnitFunction to prevent a naming conflict with createUnit\nexport var createUnitFunction = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Unit\n  } = _ref;\n  /**\n   * Create a unit. Depending on the passed arguments, the function\n   * will create and return a new math.Unit object.\n   * When a matrix is provided, all elements will be converted to units.\n   *\n   * Syntax:\n   *\n   *     math.unit(unit : string)\n   *     math.unit(value : number, valuelessUnit : Unit)\n   *     math.unit(value : number, valuelessUnit : string)\n   *\n   * Examples:\n   *\n   *    const kph = math.unit('km/h')   // returns Unit km/h (valueless)\n   *    const v = math.unit(25, kph)    // returns Unit 25 km/h\n   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm\n   *    const b = math.unit('23 kg')    // returns Unit 23 kg\n   *    a.to('m')                       // returns Unit 0.05 m\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\n   *\n   * @param {* | Array | Matrix} args   A number and unit.\n   * @return {Unit | Array | Matrix}    The created unit\n   */\n\n  return typed(name, {\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      if (Unit.isValuelessUnit(x)) {\n        return new Unit(null, x); // a pure unit\n      }\n\n      return Unit.parse(x, {\n        allowNoUnits: true\n      }); // a unit with value, like '5cm'\n    },\n\n    'number | BigNumber | Fraction | Complex, string | Unit': function numberBigNumberFractionComplexStringUnit(value, unit) {\n      return new Unit(value, unit);\n    },\n    'number | BigNumber | Fraction': function numberBigNumberFraction(value) {\n      // dimensionless\n      return new Unit(value);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","map":{"version":3,"names":["factory","deepMap","name","dependencies","createUnitFunction","_ref","typed","Unit","x","clone","string","isValuelessUnit","parse","allowNoUnits","numberBigNumberFractionComplexStringUnit","value","unit","numberBigNumberFraction","referToSelf","self"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/type/unit/function/unit.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'unit';\nvar dependencies = ['typed', 'Unit'];\n\n// This function is named createUnitFunction to prevent a naming conflict with createUnit\nexport var createUnitFunction = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Unit\n  } = _ref;\n  /**\n   * Create a unit. Depending on the passed arguments, the function\n   * will create and return a new math.Unit object.\n   * When a matrix is provided, all elements will be converted to units.\n   *\n   * Syntax:\n   *\n   *     math.unit(unit : string)\n   *     math.unit(value : number, valuelessUnit : Unit)\n   *     math.unit(value : number, valuelessUnit : string)\n   *\n   * Examples:\n   *\n   *    const kph = math.unit('km/h')   // returns Unit km/h (valueless)\n   *    const v = math.unit(25, kph)    // returns Unit 25 km/h\n   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm\n   *    const b = math.unit('23 kg')    // returns Unit 23 kg\n   *    a.to('m')                       // returns Unit 0.05 m\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\n   *\n   * @param {* | Array | Matrix} args   A number and unit.\n   * @return {Unit | Array | Matrix}    The created unit\n   */\n\n  return typed(name, {\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      if (Unit.isValuelessUnit(x)) {\n        return new Unit(null, x); // a pure unit\n      }\n\n      return Unit.parse(x, {\n        allowNoUnits: true\n      }); // a unit with value, like '5cm'\n    },\n\n    'number | BigNumber | Fraction | Complex, string | Unit': function numberBigNumberFractionComplexStringUnit(value, unit) {\n      return new Unit(value, unit);\n    },\n    'number | BigNumber | Fraction': function numberBigNumberFraction(value) {\n      // dimensionless\n      return new Unit(value);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,OAAO,QAAQ,8BAA8B;AACtD,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC;;AAEpC;AACA,OAAO,IAAIC,kBAAkB,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACjF,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBK,IAAI,EAAE,SAASA,IAAIA,CAACC,CAAC,EAAE;MACrB,OAAOA,CAAC,CAACC,KAAK,EAAE;IAClB,CAAC;IACDC,MAAM,EAAE,SAASA,MAAMA,CAACF,CAAC,EAAE;MACzB,IAAID,IAAI,CAACI,eAAe,CAACH,CAAC,CAAC,EAAE;QAC3B,OAAO,IAAID,IAAI,CAAC,IAAI,EAAEC,CAAC,CAAC,CAAC,CAAC;MAC5B;;MAEA,OAAOD,IAAI,CAACK,KAAK,CAACJ,CAAC,EAAE;QACnBK,YAAY,EAAE;MAChB,CAAC,CAAC,CAAC,CAAC;IACN,CAAC;;IAED,wDAAwD,EAAE,SAASC,wCAAwCA,CAACC,KAAK,EAAEC,IAAI,EAAE;MACvH,OAAO,IAAIT,IAAI,CAACQ,KAAK,EAAEC,IAAI,CAAC;IAC9B,CAAC;IACD,+BAA+B,EAAE,SAASC,uBAAuBA,CAACF,KAAK,EAAE;MACvE;MACA,OAAO,IAAIR,IAAI,CAACQ,KAAK,CAAC;IACxB,CAAC;IACD,gBAAgB,EAAET,KAAK,CAACY,WAAW,CAACC,IAAI,IAAIX,CAAC,IAAIP,OAAO,CAACO,CAAC,EAAEW,IAAI,CAAC;EACnE,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}