{"ast":null,"code":"import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { notNumber } from '../../plain/number/index.js';\nvar name = 'not';\nvar dependencies = ['typed'];\nexport var createNot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Logical `not`. Flips boolean value of a given parameter.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.not(x)\n   *\n   * Examples:\n   *\n   *    math.not(2)      // returns false\n   *    math.not(0)      // returns true\n   *    math.not(true)   // returns false\n   *\n   *    a = [2, -7, 0]\n   *    math.not(a)      // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    and, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when input is a zero or empty value.\n   */\n  return typed(name, {\n    'null | undefined': () => true,\n    number: notNumber,\n    Complex: function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.isZero() || x.isNaN();\n    },\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","map":{"version":3,"names":["deepMap","factory","notNumber","name","dependencies","createNot","_ref","typed","null | undefined","number","Complex","x","re","im","BigNumber","isZero","isNaN","Unit","referToSelf","self","find","valueType","value"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/logical/not.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { notNumber } from '../../plain/number/index.js';\nvar name = 'not';\nvar dependencies = ['typed'];\nexport var createNot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Logical `not`. Flips boolean value of a given parameter.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.not(x)\n   *\n   * Examples:\n   *\n   *    math.not(2)      // returns false\n   *    math.not(0)      // returns true\n   *    math.not(true)   // returns false\n   *\n   *    a = [2, -7, 0]\n   *    math.not(a)      // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    and, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when input is a zero or empty value.\n   */\n  return typed(name, {\n    'null | undefined': () => true,\n    number: notNumber,\n    Complex: function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.isZero() || x.isNaN();\n    },\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,SAAS,QAAQ,6BAA6B;AACvD,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACxE,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,kBAAkB,EAAEK,CAAA,KAAM,IAAI;IAC9BC,MAAM,EAAEP,SAAS;IACjBQ,OAAO,EAAE,SAASA,OAAOA,CAACC,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACC,EAAE,KAAK,CAAC,IAAID,CAAC,CAACE,EAAE,KAAK,CAAC;IACjC,CAAC;IACDC,SAAS,EAAE,SAASA,SAASA,CAACH,CAAC,EAAE;MAC/B,OAAOA,CAAC,CAACI,MAAM,EAAE,IAAIJ,CAAC,CAACK,KAAK,EAAE;IAChC,CAAC;IACDC,IAAI,EAAEV,KAAK,CAACW,WAAW,CAACC,IAAI,IAAIR,CAAC,IAAIJ,KAAK,CAACa,IAAI,CAACD,IAAI,EAAER,CAAC,CAACU,SAAS,EAAE,CAAC,CAACV,CAAC,CAACW,KAAK,CAAC,CAAC;IAC9E,gBAAgB,EAAEf,KAAK,CAACW,WAAW,CAACC,IAAI,IAAIR,CAAC,IAAIX,OAAO,CAACW,CAAC,EAAEQ,IAAI,CAAC;EACnE,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}