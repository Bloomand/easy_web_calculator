{"ast":null,"code":"import { isInteger } from '../../utils/number.js';\nimport { product } from '../../utils/product.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'permutations';\nvar dependencies = ['typed', 'factorial'];\nexport var createPermutations = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    factorial\n  } = _ref;\n  /**\n   * Compute the number of ways of obtaining an ordered subset of `k` elements\n   * from a set of `n` elements.\n   *\n   * Permutations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.permutations(n)\n   *     math.permutations(n, k)\n   *\n   * Examples:\n   *\n   *    math.permutations(5)     // 120\n   *    math.permutations(5, 3)  // 60\n   *\n   * See also:\n   *\n   *    combinations, combinationsWithRep, factorial\n   *\n   * @param {number | BigNumber} n   The number of objects in total\n   * @param {number | BigNumber} [k] The number of objects in the subset\n   * @return {number | BigNumber}    The number of permutations\n   */\n  return typed(name, {\n    'number | BigNumber': factorial,\n    'number, number': function numberNumber(n, k) {\n      if (!isInteger(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (!isInteger(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (k > n) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n      // Permute n objects, k at a time\n      return product(n - k + 1, n);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var result, i;\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (k.gt(n)) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n      var one = n.mul(0).add(1);\n      result = one;\n      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {\n        result = result.times(i);\n      }\n      return result;\n    }\n\n    // TODO: implement support for collection in permutations\n  });\n});\n\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}","map":{"version":3,"names":["isInteger","product","factory","name","dependencies","createPermutations","_ref","typed","factorial","numberNumber","n","k","TypeError","BigNumberBigNumber","result","i","isPositiveInteger","gt","one","mul","add","minus","plus","lte","times","gte"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/probability/permutations.js"],"sourcesContent":["import { isInteger } from '../../utils/number.js';\nimport { product } from '../../utils/product.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'permutations';\nvar dependencies = ['typed', 'factorial'];\nexport var createPermutations = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    factorial\n  } = _ref;\n  /**\n   * Compute the number of ways of obtaining an ordered subset of `k` elements\n   * from a set of `n` elements.\n   *\n   * Permutations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.permutations(n)\n   *     math.permutations(n, k)\n   *\n   * Examples:\n   *\n   *    math.permutations(5)     // 120\n   *    math.permutations(5, 3)  // 60\n   *\n   * See also:\n   *\n   *    combinations, combinationsWithRep, factorial\n   *\n   * @param {number | BigNumber} n   The number of objects in total\n   * @param {number | BigNumber} [k] The number of objects in the subset\n   * @return {number | BigNumber}    The number of permutations\n   */\n  return typed(name, {\n    'number | BigNumber': factorial,\n    'number, number': function numberNumber(n, k) {\n      if (!isInteger(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (!isInteger(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (k > n) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n      // Permute n objects, k at a time\n      return product(n - k + 1, n);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var result, i;\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (k.gt(n)) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n      var one = n.mul(0).add(1);\n      result = one;\n      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {\n        result = result.times(i);\n      }\n      return result;\n    }\n\n    // TODO: implement support for collection in permutations\n  });\n});\n\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}"],"mappings":"AAAA,SAASA,SAAS,QAAQ,uBAAuB;AACjD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,cAAc;AACzB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC;AACzC,OAAO,IAAIC,kBAAkB,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACjF,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,oBAAoB,EAAEK,SAAS;IAC/B,gBAAgB,EAAE,SAASC,YAAYA,CAACC,CAAC,EAAEC,CAAC,EAAE;MAC5C,IAAI,CAACX,SAAS,CAACU,CAAC,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAE;QAC1B,MAAM,IAAIE,SAAS,CAAC,0DAA0D,CAAC;MACjF;MACA,IAAI,CAACZ,SAAS,CAACW,CAAC,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAE;QAC1B,MAAM,IAAIC,SAAS,CAAC,0DAA0D,CAAC;MACjF;MACA,IAAID,CAAC,GAAGD,CAAC,EAAE;QACT,MAAM,IAAIE,SAAS,CAAC,kEAAkE,CAAC;MACzF;MACA;MACA,OAAOX,OAAO,CAACS,CAAC,GAAGC,CAAC,GAAG,CAAC,EAAED,CAAC,CAAC;IAC9B,CAAC;IACD,sBAAsB,EAAE,SAASG,kBAAkBA,CAACH,CAAC,EAAEC,CAAC,EAAE;MACxD,IAAIG,MAAM,EAAEC,CAAC;MACb,IAAI,CAACC,iBAAiB,CAACN,CAAC,CAAC,IAAI,CAACM,iBAAiB,CAACL,CAAC,CAAC,EAAE;QAClD,MAAM,IAAIC,SAAS,CAAC,0DAA0D,CAAC;MACjF;MACA,IAAID,CAAC,CAACM,EAAE,CAACP,CAAC,CAAC,EAAE;QACX,MAAM,IAAIE,SAAS,CAAC,kEAAkE,CAAC;MACzF;MACA,IAAIM,GAAG,GAAGR,CAAC,CAACS,GAAG,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,CAAC;MACzBN,MAAM,GAAGI,GAAG;MACZ,KAAKH,CAAC,GAAGL,CAAC,CAACW,KAAK,CAACV,CAAC,CAAC,CAACW,IAAI,CAAC,CAAC,CAAC,EAAEP,CAAC,CAACQ,GAAG,CAACb,CAAC,CAAC,EAAEK,CAAC,GAAGA,CAAC,CAACO,IAAI,CAAC,CAAC,CAAC,EAAE;QACpDR,MAAM,GAAGA,MAAM,CAACU,KAAK,CAACT,CAAC,CAAC;MAC1B;MACA,OAAOD,MAAM;IACf;;IAEA;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,SAASE,iBAAiBA,CAACN,CAAC,EAAE;EAC5B,OAAOA,CAAC,CAACV,SAAS,EAAE,IAAIU,CAAC,CAACe,GAAG,CAAC,CAAC,CAAC;AAClC"},"metadata":{},"sourceType":"module","externalDependencies":[]}