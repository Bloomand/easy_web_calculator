{"ast":null,"code":"import { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { orNumber } from '../../plain/number/index.js';\nvar name = 'or';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix', 'concat'];\nexport var createOr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.or(x, y)\n   *\n   * Examples:\n   *\n   *    math.or(2, 4)   // returns true\n   *\n   *    a = [2, 5, 0]\n   *    b = [0, 22, 0]\n   *    c = 0\n   *\n   *    math.or(a, b)   // returns [true, true, false]\n   *    math.or(b, c)   // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    and, not, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.\n   */\n  return typed(name, {\n    'number, number': orNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0))\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});","map":{"version":3,"names":["createMatAlgo03xDSf","createMatAlgo12xSfs","createMatAlgo05xSfSf","factory","createMatrixAlgorithmSuite","orNumber","name","dependencies","createOr","_ref","typed","matrix","equalScalar","DenseMatrix","concat","matAlgo03xDSf","matAlgo05xSfSf","matAlgo12xSfs","matrixAlgorithmSuite","ComplexComplex","x","y","re","im","BigNumberBigNumber","isZero","isNaN","referToSelf","self","value","SS","DS","Ss"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/logical/or.js"],"sourcesContent":["import { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { orNumber } from '../../plain/number/index.js';\nvar name = 'or';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix', 'concat'];\nexport var createOr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.or(x, y)\n   *\n   * Examples:\n   *\n   *    math.or(2, 4)   // returns true\n   *\n   *    a = [2, 5, 0]\n   *    b = [0, 22, 0]\n   *    c = 0\n   *\n   *    math.or(a, b)   // returns [true, true, false]\n   *    math.or(b, c)   // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    and, not, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.\n   */\n  return typed(name, {\n    'number, number': orNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0))\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,oBAAoB,QAAQ,2CAA2C;AAChF,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,0BAA0B,QAAQ,iDAAiD;AAC5F,SAASC,QAAQ,QAAQ,6BAA6B;AACtD,IAAIC,IAAI,GAAG,IAAI;AACf,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,aAAa,EAAE,QAAQ,CAAC;AAC9E,OAAO,IAAIC,QAAQ,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACvE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,WAAW;IACXC,WAAW;IACXC;EACF,CAAC,GAAGL,IAAI;EACR,IAAIM,aAAa,GAAGf,mBAAmB,CAAC;IACtCU;EACF,CAAC,CAAC;EACF,IAAIM,cAAc,GAAGd,oBAAoB,CAAC;IACxCQ,KAAK;IACLE;EACF,CAAC,CAAC;EACF,IAAIK,aAAa,GAAGhB,mBAAmB,CAAC;IACtCS,KAAK;IACLG;EACF,CAAC,CAAC;EACF,IAAIK,oBAAoB,GAAGd,0BAA0B,CAAC;IACpDM,KAAK;IACLC,MAAM;IACNG;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOJ,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAED,QAAQ;IAC1B,kBAAkB,EAAE,SAASc,cAAcA,CAACC,CAAC,EAAEC,CAAC,EAAE;MAChD,OAAOD,CAAC,CAACE,EAAE,KAAK,CAAC,IAAIF,CAAC,CAACG,EAAE,KAAK,CAAC,IAAIF,CAAC,CAACC,EAAE,KAAK,CAAC,IAAID,CAAC,CAACE,EAAE,KAAK,CAAC;IAC7D,CAAC;IACD,sBAAsB,EAAE,SAASC,kBAAkBA,CAACJ,CAAC,EAAEC,CAAC,EAAE;MACxD,OAAO,CAACD,CAAC,CAACK,MAAM,EAAE,IAAI,CAACL,CAAC,CAACM,KAAK,EAAE,IAAI,CAACL,CAAC,CAACI,MAAM,EAAE,IAAI,CAACJ,CAAC,CAACK,KAAK,EAAE;IAC/D,CAAC;IACD,YAAY,EAAEhB,KAAK,CAACiB,WAAW,CAACC,IAAI,IAAI,CAACR,CAAC,EAAEC,CAAC,KAAKO,IAAI,CAACR,CAAC,CAACS,KAAK,IAAI,CAAC,EAAER,CAAC,CAACQ,KAAK,IAAI,CAAC,CAAC;EACpF,CAAC,EAAEX,oBAAoB,CAAC;IACtBY,EAAE,EAAEd,cAAc;IAClBe,EAAE,EAAEhB,aAAa;IACjBiB,EAAE,EAAEf;EACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}