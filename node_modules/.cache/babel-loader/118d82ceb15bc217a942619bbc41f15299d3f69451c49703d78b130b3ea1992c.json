{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { acotNumber } from '../../plain/number/index.js';\nvar name = 'acot';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createAcot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.\n   *\n   * To avoid confusion with the matrix arccotanget, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acot(x)\n   *\n   * Examples:\n   *\n   *    math.acot(0.5)           // returns number 1.1071487177940904\n   *    math.acot(2)             // returns number 0.4636476090008061\n   *    math.acot(math.cot(1.5)) // returns number 1.5\n   *\n   * See also:\n   *\n   *    cot, atan\n   *\n   * @param {number | BigNumber| Complex} x   Function input\n   * @return {number | BigNumber| Complex} The arc cotangent of x\n   */\n  return typed(name, {\n    number: acotNumber,\n    Complex: function Complex(x) {\n      return x.acot();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).atan();\n    }\n  });\n});","map":{"version":3,"names":["factory","acotNumber","name","dependencies","createAcot","_ref","typed","BigNumber","_BigNumber","number","Complex","x","acot","div","atan"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/trigonometry/acot.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { acotNumber } from '../../plain/number/index.js';\nvar name = 'acot';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createAcot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.\n   *\n   * To avoid confusion with the matrix arccotanget, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acot(x)\n   *\n   * Examples:\n   *\n   *    math.acot(0.5)           // returns number 1.1071487177940904\n   *    math.acot(2)             // returns number 0.4636476090008061\n   *    math.acot(math.cot(1.5)) // returns number 1.5\n   *\n   * See also:\n   *\n   *    cot, atan\n   *\n   * @param {number | BigNumber| Complex} x   Function input\n   * @return {number | BigNumber| Complex} The arc cotangent of x\n   */\n  return typed(name, {\n    number: acotNumber,\n    Complex: function Complex(x) {\n      return x.acot();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).atan();\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,UAAU,QAAQ,6BAA6B;AACxD,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC;AACzC,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC,KAAK;IACLC,SAAS,EAAEC;EACb,CAAC,GAAGH,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBO,MAAM,EAAER,UAAU;IAClBS,OAAO,EAAE,SAASA,OAAOA,CAACC,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACC,IAAI,EAAE;IACjB,CAAC;IACDL,SAAS,EAAE,SAASA,SAASA,CAACI,CAAC,EAAE;MAC/B,OAAO,IAAIH,UAAU,CAAC,CAAC,CAAC,CAACK,GAAG,CAACF,CAAC,CAAC,CAACG,IAAI,EAAE;IACxC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}