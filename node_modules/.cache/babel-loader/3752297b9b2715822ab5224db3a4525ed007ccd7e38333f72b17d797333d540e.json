{"ast":null,"code":"/**\n * Compares two BigNumbers.\n * @param {BigNumber} x       First value to compare\n * @param {BigNumber} y       Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n */\nexport function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x.eq(y);\n  }\n\n  // use \"==\" operator, handles infinities\n  if (x.eq(y)) {\n    return true;\n  }\n\n  // NaN\n  if (x.isNaN() || y.isNaN()) {\n    return false;\n  }\n\n  // at this point x and y should be finite\n  if (x.isFinite() && y.isFinite()) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = x.minus(y).abs();\n    if (diff.isZero()) {\n      return true;\n    } else {\n      // use relative error\n      var max = x.constructor.max(x.abs(), y.abs());\n      return diff.lte(max.times(epsilon));\n    }\n  }\n\n  // Infinite and Number or negative Infinite and positive Infinite cases\n  return false;\n}","map":{"version":3,"names":["nearlyEqual","x","y","epsilon","undefined","eq","isNaN","isFinite","diff","minus","abs","isZero","max","constructor","lte","times"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js"],"sourcesContent":["/**\n * Compares two BigNumbers.\n * @param {BigNumber} x       First value to compare\n * @param {BigNumber} y       Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n */\nexport function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x.eq(y);\n  }\n\n  // use \"==\" operator, handles infinities\n  if (x.eq(y)) {\n    return true;\n  }\n\n  // NaN\n  if (x.isNaN() || y.isNaN()) {\n    return false;\n  }\n\n  // at this point x and y should be finite\n  if (x.isFinite() && y.isFinite()) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = x.minus(y).abs();\n    if (diff.isZero()) {\n      return true;\n    } else {\n      // use relative error\n      var max = x.constructor.max(x.abs(), y.abs());\n      return diff.lte(max.times(epsilon));\n    }\n  }\n\n  // Infinite and Number or negative Infinite and positive Infinite cases\n  return false;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,WAAWA,CAACC,CAAC,EAAEC,CAAC,EAAEC,OAAO,EAAE;EACzC;EACA,IAAIA,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAKC,SAAS,EAAE;IAC7C,OAAOH,CAAC,CAACI,EAAE,CAACH,CAAC,CAAC;EAChB;;EAEA;EACA,IAAID,CAAC,CAACI,EAAE,CAACH,CAAC,CAAC,EAAE;IACX,OAAO,IAAI;EACb;;EAEA;EACA,IAAID,CAAC,CAACK,KAAK,EAAE,IAAIJ,CAAC,CAACI,KAAK,EAAE,EAAE;IAC1B,OAAO,KAAK;EACd;;EAEA;EACA,IAAIL,CAAC,CAACM,QAAQ,EAAE,IAAIL,CAAC,CAACK,QAAQ,EAAE,EAAE;IAChC;IACA,IAAIC,IAAI,GAAGP,CAAC,CAACQ,KAAK,CAACP,CAAC,CAAC,CAACQ,GAAG,EAAE;IAC3B,IAAIF,IAAI,CAACG,MAAM,EAAE,EAAE;MACjB,OAAO,IAAI;IACb,CAAC,MAAM;MACL;MACA,IAAIC,GAAG,GAAGX,CAAC,CAACY,WAAW,CAACD,GAAG,CAACX,CAAC,CAACS,GAAG,EAAE,EAAER,CAAC,CAACQ,GAAG,EAAE,CAAC;MAC7C,OAAOF,IAAI,CAACM,GAAG,CAACF,GAAG,CAACG,KAAK,CAACZ,OAAO,CAAC,CAAC;IACrC;EACF;;EAEA;EACA,OAAO,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}