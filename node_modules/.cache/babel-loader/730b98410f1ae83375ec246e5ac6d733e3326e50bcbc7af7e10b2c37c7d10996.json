{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { noBignumber, noMatrix } from '../../utils/noop.js';\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];\nexport var createRange = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    bignumber,\n    smaller,\n    smallerEq,\n    larger,\n    largerEq\n  } = _ref;\n  /**\n   * Create an array from a range.\n   * By default, the range end is excluded. This can be customized by providing\n   * an extra parameter `includeEnd`.\n   *\n   * Syntax:\n   *\n   *     math.range(str [, includeEnd])               // Create a range from a string,\n   *                                                  // where the string contains the\n   *                                                  // start, optional step, and end,\n   *                                                  // separated by a colon.\n   *     math.range(start, end [, includeEnd])        // Create a range with start and\n   *                                                  // end and a step size of 1.\n   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n   *                                                  // and end.\n   *\n   * Where:\n   *\n   * - `str: string`\n   *   A string 'start:end' or 'start:step:end'\n   * - `start: {number | BigNumber}`\n   *   Start of the range\n   * - `end: number | BigNumber`\n   *   End of the range, excluded by default, included when parameter includeEnd=true\n   * - `step: number | BigNumber`\n   *   Step size. Default value is 1.\n   * - `includeEnd: boolean`\n   *   Option to specify whether to include the end or not. False by default.\n   *\n   * Examples:\n   *\n   *     math.range(2, 6)        // [2, 3, 4, 5]\n   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]\n   *     math.range('2:1:6')     // [2, 3, 4, 5]\n   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]\n   *\n   * See also:\n   *\n   *     ones, zeros, size, subset\n   *\n   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n   * @return {Array | Matrix} range\n   */\n  return typed(name, {\n    // TODO: simplify signatures when typed-function supports default values and optional arguments\n\n    // TODO: a number or boolean should not be converted to string here\n    string: _strRange,\n    'string, boolean': _strRange,\n    'number, number': function numberNumber(start, end) {\n      return _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number': function numberNumberNumber(start, end, step) {\n      return _out(_rangeEx(start, end, step));\n    },\n    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {\n      return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {\n      return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {\n      var BigNumber = start.constructor;\n      return _out(_bigRangeEx(start, end, new BigNumber(1)));\n    },\n    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {\n      return _out(_bigRangeEx(start, end, step));\n    },\n    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {\n      var BigNumber = start.constructor;\n      return includeEnd ? _out(_bigRangeInc(start, end, new BigNumber(1))) : _out(_bigRangeEx(start, end, new BigNumber(1)));\n    },\n    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {\n      return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));\n    }\n  });\n  function _out(arr) {\n    if (config.matrix === 'Matrix') {\n      return matrix ? matrix(arr) : noMatrix();\n    }\n    return arr;\n  }\n  function _strRange(str, includeEnd) {\n    var r = _parse(str);\n    if (!r) {\n      throw new SyntaxError('String \"' + str + '\" is no valid range');\n    }\n    var fn;\n    if (config.number === 'BigNumber') {\n      if (bignumber === undefined) {\n        noBignumber();\n      }\n      fn = includeEnd ? _bigRangeInc : _bigRangeEx;\n      return _out(fn(bignumber(r.start), bignumber(r.end), bignumber(r.step)));\n    } else {\n      fn = includeEnd ? _rangeInc : _rangeEx;\n      return _out(fn(r.start, r.end, r.step));\n    }\n  }\n\n  /**\n   * Create a range with numbers. End is excluded\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n  function _rangeEx(start, end, step) {\n    var array = [];\n    var x = start;\n    if (step > 0) {\n      while (smaller(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    } else if (step < 0) {\n      while (larger(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * Create a range with numbers. End is included\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n  function _rangeInc(start, end, step) {\n    var array = [];\n    var x = start;\n    if (step > 0) {\n      while (smallerEq(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    } else if (step < 0) {\n      while (largerEq(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * Create a range with big numbers. End is excluded\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n  function _bigRangeEx(start, end, step) {\n    var zero = bignumber(0);\n    var array = [];\n    var x = start;\n    if (step.gt(zero)) {\n      while (smaller(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    } else if (step.lt(zero)) {\n      while (larger(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n    return array;\n  }\n\n  /**\n   * Create a range with big numbers. End is included\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n  function _bigRangeInc(start, end, step) {\n    var zero = bignumber(0);\n    var array = [];\n    var x = start;\n    if (step.gt(zero)) {\n      while (smallerEq(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    } else if (step.lt(zero)) {\n      while (largerEq(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n    return array;\n  }\n\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @param {string} str\n   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step\n   * @private\n   */\n  function _parse(str) {\n    var args = str.split(':');\n\n    // number\n    var nums = args.map(function (arg) {\n      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string\n      return Number(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n    if (invalid) {\n      return null;\n    }\n    switch (nums.length) {\n      case 2:\n        return {\n          start: nums[0],\n          end: nums[1],\n          step: 1\n        };\n      case 3:\n        return {\n          start: nums[0],\n          end: nums[2],\n          step: nums[1]\n        };\n      default:\n        return null;\n    }\n  }\n});","map":{"version":3,"names":["factory","noBignumber","noMatrix","name","dependencies","createRange","_ref","typed","config","matrix","bignumber","smaller","smallerEq","larger","largerEq","string","_strRange","numberNumber","start","end","_out","_rangeEx","numberNumberNumber","step","numberNumberBoolean","includeEnd","_rangeInc","numberNumberNumberBoolean","BigNumberBigNumber","BigNumber","constructor","_bigRangeEx","BigNumberBigNumberBigNumber","BigNumberBigNumberBoolean","_bigRangeInc","BigNumberBigNumberBigNumberBoolean","arr","str","r","_parse","SyntaxError","fn","number","undefined","array","x","push","zero","gt","plus","lt","args","split","nums","map","arg","Number","invalid","some","num","isNaN","length"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/matrix/range.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { noBignumber, noMatrix } from '../../utils/noop.js';\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];\nexport var createRange = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    bignumber,\n    smaller,\n    smallerEq,\n    larger,\n    largerEq\n  } = _ref;\n  /**\n   * Create an array from a range.\n   * By default, the range end is excluded. This can be customized by providing\n   * an extra parameter `includeEnd`.\n   *\n   * Syntax:\n   *\n   *     math.range(str [, includeEnd])               // Create a range from a string,\n   *                                                  // where the string contains the\n   *                                                  // start, optional step, and end,\n   *                                                  // separated by a colon.\n   *     math.range(start, end [, includeEnd])        // Create a range with start and\n   *                                                  // end and a step size of 1.\n   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n   *                                                  // and end.\n   *\n   * Where:\n   *\n   * - `str: string`\n   *   A string 'start:end' or 'start:step:end'\n   * - `start: {number | BigNumber}`\n   *   Start of the range\n   * - `end: number | BigNumber`\n   *   End of the range, excluded by default, included when parameter includeEnd=true\n   * - `step: number | BigNumber`\n   *   Step size. Default value is 1.\n   * - `includeEnd: boolean`\n   *   Option to specify whether to include the end or not. False by default.\n   *\n   * Examples:\n   *\n   *     math.range(2, 6)        // [2, 3, 4, 5]\n   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]\n   *     math.range('2:1:6')     // [2, 3, 4, 5]\n   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]\n   *\n   * See also:\n   *\n   *     ones, zeros, size, subset\n   *\n   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n   * @return {Array | Matrix} range\n   */\n  return typed(name, {\n    // TODO: simplify signatures when typed-function supports default values and optional arguments\n\n    // TODO: a number or boolean should not be converted to string here\n    string: _strRange,\n    'string, boolean': _strRange,\n    'number, number': function numberNumber(start, end) {\n      return _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number': function numberNumberNumber(start, end, step) {\n      return _out(_rangeEx(start, end, step));\n    },\n    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {\n      return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {\n      return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {\n      var BigNumber = start.constructor;\n      return _out(_bigRangeEx(start, end, new BigNumber(1)));\n    },\n    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {\n      return _out(_bigRangeEx(start, end, step));\n    },\n    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {\n      var BigNumber = start.constructor;\n      return includeEnd ? _out(_bigRangeInc(start, end, new BigNumber(1))) : _out(_bigRangeEx(start, end, new BigNumber(1)));\n    },\n    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {\n      return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));\n    }\n  });\n  function _out(arr) {\n    if (config.matrix === 'Matrix') {\n      return matrix ? matrix(arr) : noMatrix();\n    }\n    return arr;\n  }\n  function _strRange(str, includeEnd) {\n    var r = _parse(str);\n    if (!r) {\n      throw new SyntaxError('String \"' + str + '\" is no valid range');\n    }\n    var fn;\n    if (config.number === 'BigNumber') {\n      if (bignumber === undefined) {\n        noBignumber();\n      }\n      fn = includeEnd ? _bigRangeInc : _bigRangeEx;\n      return _out(fn(bignumber(r.start), bignumber(r.end), bignumber(r.step)));\n    } else {\n      fn = includeEnd ? _rangeInc : _rangeEx;\n      return _out(fn(r.start, r.end, r.step));\n    }\n  }\n\n  /**\n   * Create a range with numbers. End is excluded\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n  function _rangeEx(start, end, step) {\n    var array = [];\n    var x = start;\n    if (step > 0) {\n      while (smaller(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    } else if (step < 0) {\n      while (larger(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * Create a range with numbers. End is included\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n  function _rangeInc(start, end, step) {\n    var array = [];\n    var x = start;\n    if (step > 0) {\n      while (smallerEq(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    } else if (step < 0) {\n      while (largerEq(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * Create a range with big numbers. End is excluded\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n  function _bigRangeEx(start, end, step) {\n    var zero = bignumber(0);\n    var array = [];\n    var x = start;\n    if (step.gt(zero)) {\n      while (smaller(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    } else if (step.lt(zero)) {\n      while (larger(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n    return array;\n  }\n\n  /**\n   * Create a range with big numbers. End is included\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n  function _bigRangeInc(start, end, step) {\n    var zero = bignumber(0);\n    var array = [];\n    var x = start;\n    if (step.gt(zero)) {\n      while (smallerEq(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    } else if (step.lt(zero)) {\n      while (largerEq(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n    return array;\n  }\n\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @param {string} str\n   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step\n   * @private\n   */\n  function _parse(str) {\n    var args = str.split(':');\n\n    // number\n    var nums = args.map(function (arg) {\n      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string\n      return Number(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n    if (invalid) {\n      return null;\n    }\n    switch (nums.length) {\n      case 2:\n        return {\n          start: nums[0],\n          end: nums[1],\n          step: 1\n        };\n      case 3:\n        return {\n          start: nums[0],\n          end: nums[2],\n          step: nums[1]\n        };\n      default:\n        return null;\n    }\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}