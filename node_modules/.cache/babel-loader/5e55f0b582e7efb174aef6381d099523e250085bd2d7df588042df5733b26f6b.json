{"ast":null,"code":"import { deepForEach } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'prod';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'numeric'];\nexport var createProd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiplyScalar,\n    numeric\n  } = _ref;\n  /**\n   * Compute the product of a matrix or a list with values.\n   * In case of a multidimensional array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.prod(a, b, c, ...)\n   *     math.prod(A)\n   *\n   * Examples:\n   *\n   *     math.multiply(2, 3)           // returns 6\n   *     math.prod(2, 3)               // returns 6\n   *     math.prod(2, 3, 4)            // returns 24\n   *     math.prod([2, 3, 4])          // returns 24\n   *     math.prod([[2, 5], [4, 3]])   // returns 120\n   *\n   * See also:\n   *\n   *    mean, median, min, max, sum, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The product of all values\n   */\n  return typed(name, {\n    // prod([a, b, c, d, ...])\n    'Array | Matrix': _prod,\n    // prod([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement prod(A, dim)\n      throw new Error('prod(A, dim) is not yet supported');\n      // return reduce(arguments[0], arguments[1], math.prod)\n    },\n\n    // prod(a, b, c, d, ...)\n    '...': function _(args) {\n      return _prod(args);\n    }\n  });\n\n  /**\n   * Recursively calculate the product of an n-dimensional array\n   * @param {Array} array\n   * @return {number} prod\n   * @private\n   */\n  function _prod(array) {\n    var prod;\n    deepForEach(array, function (value) {\n      try {\n        prod = prod === undefined ? value : multiplyScalar(prod, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'prod', value);\n      }\n    });\n\n    // make sure returning numeric value: parse a string into a numeric value\n    if (typeof prod === 'string') {\n      prod = numeric(prod, config.number);\n    }\n    if (prod === undefined) {\n      throw new Error('Cannot calculate prod of an empty array');\n    }\n    return prod;\n  }\n});","map":{"version":3,"names":["deepForEach","factory","improveErrorMessage","name","dependencies","createProd","_ref","typed","config","multiplyScalar","numeric","_prod","ArrayMatrixNumberBigNumber","array","dim","Error","_","args","prod","value","undefined","err","number"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/statistics/prod.js"],"sourcesContent":["import { deepForEach } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'prod';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'numeric'];\nexport var createProd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiplyScalar,\n    numeric\n  } = _ref;\n  /**\n   * Compute the product of a matrix or a list with values.\n   * In case of a multidimensional array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.prod(a, b, c, ...)\n   *     math.prod(A)\n   *\n   * Examples:\n   *\n   *     math.multiply(2, 3)           // returns 6\n   *     math.prod(2, 3)               // returns 6\n   *     math.prod(2, 3, 4)            // returns 24\n   *     math.prod([2, 3, 4])          // returns 24\n   *     math.prod([[2, 5], [4, 3]])   // returns 120\n   *\n   * See also:\n   *\n   *    mean, median, min, max, sum, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The product of all values\n   */\n  return typed(name, {\n    // prod([a, b, c, d, ...])\n    'Array | Matrix': _prod,\n    // prod([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement prod(A, dim)\n      throw new Error('prod(A, dim) is not yet supported');\n      // return reduce(arguments[0], arguments[1], math.prod)\n    },\n\n    // prod(a, b, c, d, ...)\n    '...': function _(args) {\n      return _prod(args);\n    }\n  });\n\n  /**\n   * Recursively calculate the product of an n-dimensional array\n   * @param {Array} array\n   * @return {number} prod\n   * @private\n   */\n  function _prod(array) {\n    var prod;\n    deepForEach(array, function (value) {\n      try {\n        prod = prod === undefined ? value : multiplyScalar(prod, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'prod', value);\n      }\n    });\n\n    // make sure returning numeric value: parse a string into a numeric value\n    if (typeof prod === 'string') {\n      prod = numeric(prod, config.number);\n    }\n    if (prod === undefined) {\n      throw new Error('Cannot calculate prod of an empty array');\n    }\n    return prod;\n  }\n});"],"mappings":"AAAA,SAASA,WAAW,QAAQ,2BAA2B;AACvD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,SAAS,CAAC;AACnE,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,cAAc;IACdC;EACF,CAAC,GAAGJ,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB;IACA,gBAAgB,EAAEQ,KAAK;IACvB;IACA,oCAAoC,EAAE,SAASC,0BAA0BA,CAACC,KAAK,EAAEC,GAAG,EAAE;MACpF;MACA,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;MACpD;IACF,CAAC;;IAED;IACA,KAAK,EAAE,SAASC,CAACA,CAACC,IAAI,EAAE;MACtB,OAAON,KAAK,CAACM,IAAI,CAAC;IACpB;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;EACE,SAASN,KAAKA,CAACE,KAAK,EAAE;IACpB,IAAIK,IAAI;IACRlB,WAAW,CAACa,KAAK,EAAE,UAAUM,KAAK,EAAE;MAClC,IAAI;QACFD,IAAI,GAAGA,IAAI,KAAKE,SAAS,GAAGD,KAAK,GAAGV,cAAc,CAACS,IAAI,EAAEC,KAAK,CAAC;MACjE,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZ,MAAMnB,mBAAmB,CAACmB,GAAG,EAAE,MAAM,EAAEF,KAAK,CAAC;MAC/C;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;MAC5BA,IAAI,GAAGR,OAAO,CAACQ,IAAI,EAAEV,MAAM,CAACc,MAAM,CAAC;IACrC;IACA,IAAIJ,IAAI,KAAKE,SAAS,EAAE;MACtB,MAAM,IAAIL,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IACA,OAAOG,IAAI;EACb;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}