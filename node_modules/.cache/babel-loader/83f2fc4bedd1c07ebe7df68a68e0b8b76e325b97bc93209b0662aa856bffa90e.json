{"ast":null,"code":"import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'sum';\nvar dependencies = ['typed', 'config', 'add', 'numeric'];\nexport var createSum = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    add,\n    numeric\n  } = _ref;\n  /**\n   * Compute the sum of a matrix or a list with values.\n   * In case of a multidimensional array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.sum(a, b, c, ...)\n   *     math.sum(A)\n   *     math.sum(A, dimension)\n   *\n   * Examples:\n   *\n   *     math.sum(2, 1, 4, 3)               // returns 10\n   *     math.sum([2, 1, 4, 3])             // returns 10\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, variance, cumsum\n   *\n   * @param {... *} args  A single matrix or multiple scalar values\n   * @return {*} The sum of all values\n   */\n  return typed(name, {\n    // sum([a, b, c, d, ...])\n    'Array | Matrix': _sum,\n    // sum([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nsumDim,\n    // sum(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function sum');\n      }\n      return _sum(args);\n    }\n  });\n\n  /**\n   * Recursively calculate the sum of an n-dimensional array\n   * @param {Array | Matrix} array\n   * @return {number} sum\n   * @private\n   */\n  function _sum(array) {\n    var sum;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'sum', value);\n      }\n    });\n\n    // make sure returning numeric value: parse a string into a numeric value\n    if (sum === undefined) {\n      sum = numeric(0, config.number);\n    }\n    if (typeof sum === 'string') {\n      sum = numeric(sum, config.number);\n    }\n    return sum;\n  }\n  function _nsumDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      return sum;\n    } catch (err) {\n      throw improveErrorMessage(err, 'sum');\n    }\n  }\n});","map":{"version":3,"names":["containsCollections","deepForEach","reduce","factory","improveErrorMessage","name","dependencies","createSum","_ref","typed","config","add","numeric","_sum","_nsumDim","_","args","TypeError","array","sum","value","undefined","err","number","dim"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/statistics/sum.js"],"sourcesContent":["import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'sum';\nvar dependencies = ['typed', 'config', 'add', 'numeric'];\nexport var createSum = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    add,\n    numeric\n  } = _ref;\n  /**\n   * Compute the sum of a matrix or a list with values.\n   * In case of a multidimensional array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.sum(a, b, c, ...)\n   *     math.sum(A)\n   *     math.sum(A, dimension)\n   *\n   * Examples:\n   *\n   *     math.sum(2, 1, 4, 3)               // returns 10\n   *     math.sum([2, 1, 4, 3])             // returns 10\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, variance, cumsum\n   *\n   * @param {... *} args  A single matrix or multiple scalar values\n   * @return {*} The sum of all values\n   */\n  return typed(name, {\n    // sum([a, b, c, d, ...])\n    'Array | Matrix': _sum,\n    // sum([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nsumDim,\n    // sum(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function sum');\n      }\n      return _sum(args);\n    }\n  });\n\n  /**\n   * Recursively calculate the sum of an n-dimensional array\n   * @param {Array | Matrix} array\n   * @return {number} sum\n   * @private\n   */\n  function _sum(array) {\n    var sum;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'sum', value);\n      }\n    });\n\n    // make sure returning numeric value: parse a string into a numeric value\n    if (sum === undefined) {\n      sum = numeric(0, config.number);\n    }\n    if (typeof sum === 'string') {\n      sum = numeric(sum, config.number);\n    }\n    return sum;\n  }\n  function _nsumDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      return sum;\n    } catch (err) {\n      throw improveErrorMessage(err, 'sum');\n    }\n  }\n});"],"mappings":"AAAA,SAASA,mBAAmB,EAAEC,WAAW,EAAEC,MAAM,QAAQ,2BAA2B;AACpF,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,CAAC;AACxD,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACxE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,GAAG;IACHC;EACF,CAAC,GAAGJ,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB;IACA,gBAAgB,EAAEQ,IAAI;IACtB;IACA,oCAAoC,EAAEC,QAAQ;IAC9C;IACA,KAAK,EAAE,SAASC,CAACA,CAACC,IAAI,EAAE;MACtB,IAAIhB,mBAAmB,CAACgB,IAAI,CAAC,EAAE;QAC7B,MAAM,IAAIC,SAAS,CAAC,wCAAwC,CAAC;MAC/D;MACA,OAAOJ,IAAI,CAACG,IAAI,CAAC;IACnB;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;EACE,SAASH,IAAIA,CAACK,KAAK,EAAE;IACnB,IAAIC,GAAG;IACPlB,WAAW,CAACiB,KAAK,EAAE,UAAUE,KAAK,EAAE;MAClC,IAAI;QACFD,GAAG,GAAGA,GAAG,KAAKE,SAAS,GAAGD,KAAK,GAAGT,GAAG,CAACQ,GAAG,EAAEC,KAAK,CAAC;MACnD,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZ,MAAMlB,mBAAmB,CAACkB,GAAG,EAAE,KAAK,EAAEF,KAAK,CAAC;MAC9C;IACF,CAAC,CAAC;;IAEF;IACA,IAAID,GAAG,KAAKE,SAAS,EAAE;MACrBF,GAAG,GAAGP,OAAO,CAAC,CAAC,EAAEF,MAAM,CAACa,MAAM,CAAC;IACjC;IACA,IAAI,OAAOJ,GAAG,KAAK,QAAQ,EAAE;MAC3BA,GAAG,GAAGP,OAAO,CAACO,GAAG,EAAET,MAAM,CAACa,MAAM,CAAC;IACnC;IACA,OAAOJ,GAAG;EACZ;EACA,SAASL,QAAQA,CAACI,KAAK,EAAEM,GAAG,EAAE;IAC5B,IAAI;MACF,IAAIL,GAAG,GAAGjB,MAAM,CAACgB,KAAK,EAAEM,GAAG,EAAEb,GAAG,CAAC;MACjC,OAAOQ,GAAG;IACZ,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZ,MAAMlB,mBAAmB,CAACkB,GAAG,EAAE,KAAK,CAAC;IACvC;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}