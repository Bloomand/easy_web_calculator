{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isInteger } from '../../utils/number.js';\nimport { arraySize as size } from '../../utils/array.js';\nimport { powNumber } from '../../plain/number/index.js';\nvar name = 'pow';\nvar dependencies = ['typed', 'config', 'identity', 'multiply', 'matrix', 'inv', 'fraction', 'number', 'Complex'];\nexport var createPow = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    identity,\n    multiply,\n    matrix,\n    inv,\n    number,\n    fraction,\n    Complex\n  } = _ref;\n  /**\n   * Calculates the power of x to y, `x ^ y`.\n   *\n   * Matrix exponentiation is supported for square matrices `x` and integers `y`:\n   * when `y` is nonnegative, `x` may be any square matrix; and when `y` is\n   * negative, `x` must be invertible, and then this function returns\n   * inv(x)^(-y).\n   *\n   * For cubic roots of negative numbers, the function returns the principal\n   * root by default. In order to let the function return the real root,\n   * math.js can be configured with `math.config({predictable: true})`.\n   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n   *\n   * Syntax:\n   *\n   *    math.pow(x, y)\n   *\n   * Examples:\n   *\n   *    math.pow(2, 3)               // returns number 8\n   *\n   *    const a = math.complex(2, 3)\n   *    math.pow(a, 2)                // returns Complex -5 + 12i\n   *\n   *    const b = [[1, 2], [4, 3]]\n   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    math.pow(c, -1)               // returns Array [[-0.6, 0.4], [0.8, -0.2]]\n   *\n   * See also:\n   *\n   *    multiply, sqrt, cbrt, nthRoot\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex} y                          The exponent\n   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`\n   */\n  return typed(name, {\n    'number, number': _pow,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.pow(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isInteger() || x >= 0 || config.predictable) {\n        return x.pow(y);\n      } else {\n        return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);\n      }\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      var result = x.pow(y);\n      if (result != null) {\n        return result;\n      }\n      if (config.predictable) {\n        throw new Error('Result of pow is non-rational and cannot be expressed as a fraction');\n      } else {\n        return _pow(x.valueOf(), y.valueOf());\n      }\n    },\n    'Array, number': _powArray,\n    'Array, BigNumber': function ArrayBigNumber(x, y) {\n      return _powArray(x, y.toNumber());\n    },\n    'Matrix, number': _powMatrix,\n    'Matrix, BigNumber': function MatrixBigNumber(x, y) {\n      return _powMatrix(x, y.toNumber());\n    },\n    'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {\n      return x.pow(y);\n    }\n  });\n\n  /**\n   * Calculates the power of x to y, x^y, for two numbers.\n   * @param {number} x\n   * @param {number} y\n   * @return {number | Complex} res\n   * @private\n   */\n  function _pow(x, y) {\n    // Alternatively could define a 'realmode' config option or something, but\n    // 'predictable' will work for now\n    if (config.predictable && !isInteger(y) && x < 0) {\n      // Check to see if y can be represented as a fraction\n      try {\n        var yFrac = fraction(y);\n        var yNum = number(yFrac);\n        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {\n          if (yFrac.d % 2 === 1) {\n            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);\n          }\n        }\n      } catch (ex) {\n        // fraction() throws an error if y is Infinity, etc.\n      }\n\n      // Unable to express y as a fraction, so continue on\n    }\n\n    // **for predictable mode** x^Infinity === NaN if x < -1\n    // N.B. this behavour is different from `Math.pow` which gives\n    // (-2)^Infinity === Infinity\n    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {\n      return NaN;\n    }\n    if (isInteger(y) || x >= 0 || config.predictable) {\n      return powNumber(x, y);\n    } else {\n      // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow\n\n      // x^Infinity === 0 if -1 < x < 1\n      // A real number 0 is returned instead of complex(0)\n      if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n        return 0;\n      }\n      return new Complex(x, 0).pow(y, 0);\n    }\n  }\n\n  /**\n   * Calculate the power of a 2d array\n   * @param {Array} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a integer value (positive if `x` is not invertible)\n   * @returns {Array}\n   * @private\n   */\n  function _powArray(x, y) {\n    if (!isInteger(y)) {\n      throw new TypeError('For A^b, b must be an integer (value is ' + y + ')');\n    }\n    // verify that A is a 2 dimensional square matrix\n    var s = size(x);\n    if (s.length !== 2) {\n      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');\n    }\n    if (s[0] !== s[1]) {\n      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');\n    }\n    if (y < 0) {\n      try {\n        return _powArray(inv(x), -y);\n      } catch (error) {\n        if (error.message === 'Cannot calculate inverse, determinant is zero') {\n          throw new TypeError('For A^b, when A is not invertible, b must be a positive integer (value is ' + y + ')');\n        }\n        throw error;\n      }\n    }\n    var res = identity(s[0]).valueOf();\n    var px = x;\n    while (y >= 1) {\n      if ((y & 1) === 1) {\n        res = multiply(px, res);\n      }\n      y >>= 1;\n      px = multiply(px, px);\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the power of a 2d matrix\n   * @param {Matrix} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Matrix}\n   * @private\n   */\n  function _powMatrix(x, y) {\n    return matrix(_powArray(x.valueOf(), y));\n  }\n});","map":{"version":3,"names":["factory","isInteger","arraySize","size","powNumber","name","dependencies","createPow","_ref","typed","config","identity","multiply","matrix","inv","number","fraction","Complex","_pow","ComplexComplex","x","y","pow","BigNumberBigNumber","predictable","toNumber","FractionFraction","result","Error","valueOf","_powArray","ArrayBigNumber","_powMatrix","MatrixBigNumber","UnitNumberBigNumber","yFrac","yNum","Math","abs","d","n","ex","Infinity","NaN","TypeError","s","length","error","message","res","px"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/arithmetic/pow.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isInteger } from '../../utils/number.js';\nimport { arraySize as size } from '../../utils/array.js';\nimport { powNumber } from '../../plain/number/index.js';\nvar name = 'pow';\nvar dependencies = ['typed', 'config', 'identity', 'multiply', 'matrix', 'inv', 'fraction', 'number', 'Complex'];\nexport var createPow = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    identity,\n    multiply,\n    matrix,\n    inv,\n    number,\n    fraction,\n    Complex\n  } = _ref;\n  /**\n   * Calculates the power of x to y, `x ^ y`.\n   *\n   * Matrix exponentiation is supported for square matrices `x` and integers `y`:\n   * when `y` is nonnegative, `x` may be any square matrix; and when `y` is\n   * negative, `x` must be invertible, and then this function returns\n   * inv(x)^(-y).\n   *\n   * For cubic roots of negative numbers, the function returns the principal\n   * root by default. In order to let the function return the real root,\n   * math.js can be configured with `math.config({predictable: true})`.\n   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n   *\n   * Syntax:\n   *\n   *    math.pow(x, y)\n   *\n   * Examples:\n   *\n   *    math.pow(2, 3)               // returns number 8\n   *\n   *    const a = math.complex(2, 3)\n   *    math.pow(a, 2)                // returns Complex -5 + 12i\n   *\n   *    const b = [[1, 2], [4, 3]]\n   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    math.pow(c, -1)               // returns Array [[-0.6, 0.4], [0.8, -0.2]]\n   *\n   * See also:\n   *\n   *    multiply, sqrt, cbrt, nthRoot\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex} y                          The exponent\n   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`\n   */\n  return typed(name, {\n    'number, number': _pow,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.pow(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isInteger() || x >= 0 || config.predictable) {\n        return x.pow(y);\n      } else {\n        return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);\n      }\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      var result = x.pow(y);\n      if (result != null) {\n        return result;\n      }\n      if (config.predictable) {\n        throw new Error('Result of pow is non-rational and cannot be expressed as a fraction');\n      } else {\n        return _pow(x.valueOf(), y.valueOf());\n      }\n    },\n    'Array, number': _powArray,\n    'Array, BigNumber': function ArrayBigNumber(x, y) {\n      return _powArray(x, y.toNumber());\n    },\n    'Matrix, number': _powMatrix,\n    'Matrix, BigNumber': function MatrixBigNumber(x, y) {\n      return _powMatrix(x, y.toNumber());\n    },\n    'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {\n      return x.pow(y);\n    }\n  });\n\n  /**\n   * Calculates the power of x to y, x^y, for two numbers.\n   * @param {number} x\n   * @param {number} y\n   * @return {number | Complex} res\n   * @private\n   */\n  function _pow(x, y) {\n    // Alternatively could define a 'realmode' config option or something, but\n    // 'predictable' will work for now\n    if (config.predictable && !isInteger(y) && x < 0) {\n      // Check to see if y can be represented as a fraction\n      try {\n        var yFrac = fraction(y);\n        var yNum = number(yFrac);\n        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {\n          if (yFrac.d % 2 === 1) {\n            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);\n          }\n        }\n      } catch (ex) {\n        // fraction() throws an error if y is Infinity, etc.\n      }\n\n      // Unable to express y as a fraction, so continue on\n    }\n\n    // **for predictable mode** x^Infinity === NaN if x < -1\n    // N.B. this behavour is different from `Math.pow` which gives\n    // (-2)^Infinity === Infinity\n    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {\n      return NaN;\n    }\n    if (isInteger(y) || x >= 0 || config.predictable) {\n      return powNumber(x, y);\n    } else {\n      // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow\n\n      // x^Infinity === 0 if -1 < x < 1\n      // A real number 0 is returned instead of complex(0)\n      if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n        return 0;\n      }\n      return new Complex(x, 0).pow(y, 0);\n    }\n  }\n\n  /**\n   * Calculate the power of a 2d array\n   * @param {Array} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a integer value (positive if `x` is not invertible)\n   * @returns {Array}\n   * @private\n   */\n  function _powArray(x, y) {\n    if (!isInteger(y)) {\n      throw new TypeError('For A^b, b must be an integer (value is ' + y + ')');\n    }\n    // verify that A is a 2 dimensional square matrix\n    var s = size(x);\n    if (s.length !== 2) {\n      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');\n    }\n    if (s[0] !== s[1]) {\n      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');\n    }\n    if (y < 0) {\n      try {\n        return _powArray(inv(x), -y);\n      } catch (error) {\n        if (error.message === 'Cannot calculate inverse, determinant is zero') {\n          throw new TypeError('For A^b, when A is not invertible, b must be a positive integer (value is ' + y + ')');\n        }\n        throw error;\n      }\n    }\n    var res = identity(s[0]).valueOf();\n    var px = x;\n    while (y >= 1) {\n      if ((y & 1) === 1) {\n        res = multiply(px, res);\n      }\n      y >>= 1;\n      px = multiply(px, px);\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the power of a 2d matrix\n   * @param {Matrix} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Matrix}\n   * @private\n   */\n  function _powMatrix(x, y) {\n    return matrix(_powArray(x.valueOf(), y));\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}