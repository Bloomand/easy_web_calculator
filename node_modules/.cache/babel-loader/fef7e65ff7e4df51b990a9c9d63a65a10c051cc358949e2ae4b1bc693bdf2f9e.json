{"ast":null,"code":"import { isArray, isBigNumber, isCollection, isIndex, isMatrix, isNumber, isString, typeOf } from '../../utils/is.js';\nimport { arraySize, getArrayDataType, processSizesWildcard, reshape, resize, unsqueeze, validate, validateIndex } from '../../utils/array.js';\nimport { format } from '../../utils/string.js';\nimport { isInteger } from '../../utils/number.js';\nimport { clone, deepStrictEqual } from '../../utils/object.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nvar name = 'DenseMatrix';\nvar dependencies = ['Matrix'];\nexport var createDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Matrix\n  } = _ref;\n  /**\n   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n   * @class DenseMatrix\n   * @enum {{ value, index: number[] }}\n   */\n  function DenseMatrix(data, datatype) {\n    if (!(this instanceof DenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data)) {\n      // check data is a DenseMatrix\n      if (data.type === 'DenseMatrix') {\n        // clone data & size\n        this._data = clone(data._data);\n        this._size = clone(data._size);\n        this._datatype = datatype || data._datatype;\n      } else {\n        // build data from existing matrix\n        this._data = data.toArray();\n        this._size = data.size();\n        this._datatype = datatype || data._datatype;\n      }\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      // verify the dimensions of the array\n      validate(this._data, this._size);\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // replace nested Matrices with Arrays\n      this._data = preprocess(data);\n      // get the dimensions of the array\n      this._size = arraySize(this._data);\n      // verify the dimensions of the array, TODO: compute size while processing array\n      validate(this._data, this._size);\n      // data type unknown\n      this._datatype = datatype;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n    }\n  }\n  DenseMatrix.prototype = new Matrix();\n\n  /**\n   * Create a new DenseMatrix\n   */\n  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(DenseMatrix, 'name', {\n    value: 'DenseMatrix'\n  });\n  DenseMatrix.prototype.constructor = DenseMatrix;\n  DenseMatrix.prototype.type = 'DenseMatrix';\n  DenseMatrix.prototype.isDenseMatrix = true;\n\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf DenseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n  DenseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._data, typeOf);\n  };\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()  // retrieve storage format\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The storage format.\n   */\n  DenseMatrix.prototype.storage = function () {\n    return 'dense';\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()   // retrieve matrix datatype\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The datatype.\n   */\n  DenseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n\n  /**\n   * Create a new DenseMatrix\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n  DenseMatrix.prototype.create = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof DenseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    switch (arguments.length) {\n      case 1:\n        return _get(this, index);\n\n      // intentional fall through\n      case 2:\n      case 3:\n        return _set(this, index, replacement, defaultValue);\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  /**\n   * Get a single element from the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  DenseMatrix.prototype.get = function (index) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    }\n\n    // check index\n    for (var x = 0; x < index.length; x++) {\n      validateIndex(index[x], this._size[x]);\n    }\n    var data = this._data;\n    for (var i = 0, ii = index.length; i < ii; i++) {\n      var indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n    return data;\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {DenseMatrix} self\n   */\n  DenseMatrix.prototype.set = function (index, value, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length < this._size.length) {\n      throw new DimensionError(index.length, this._size.length, '<');\n    }\n    var i, ii, indexI;\n\n    // enlarge matrix when needed\n    var size = index.map(function (i) {\n      return i + 1;\n    });\n    _fit(this, size, defaultValue);\n\n    // traverse over the dimensions\n    var data = this._data;\n    for (i = 0, ii = index.length - 1; i < ii; i++) {\n      indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n\n    // set new value\n    indexI = index[index.length - 1];\n    validateIndex(indexI, data.length);\n    data[indexI] = value;\n    return this;\n  };\n\n  /**\n   * Get a submatrix of this matrix\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index   Zero-based index\n   * @private\n   */\n  function _get(matrix, index) {\n    if (!isIndex(index)) {\n      throw new TypeError('Invalid index');\n    }\n    var isScalar = index.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(index.min());\n    } else {\n      // validate dimensions\n      var size = index.size();\n      if (size.length !== matrix._size.length) {\n        throw new DimensionError(size.length, matrix._size.length);\n      }\n\n      // validate if any of the ranges in the index is out of range\n      var min = index.min();\n      var max = index.max();\n      for (var i = 0, ii = matrix._size.length; i < ii; i++) {\n        validateIndex(min[i], matrix._size[i]);\n        validateIndex(max[i], matrix._size[i]);\n      }\n\n      // retrieve submatrix\n      // TODO: more efficient when creating an empty matrix and setting _data and _size manually\n      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);\n    }\n  }\n\n  /**\n   * Recursively get a submatrix of a multi dimensional matrix.\n   * Index is not checked for correct number or length of dimensions.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim    Current dimension\n   * @return {Array} submatrix\n   * @private\n   */\n  function _getSubmatrix(data, index, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n    if (last) {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        return data[i];\n      }).valueOf();\n    } else {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        var child = data[i];\n        return _getSubmatrix(child, index, dims, dim + 1);\n      }).valueOf();\n    }\n  }\n\n  /**\n   * Replace a submatrix in this matrix\n   * Indexes are zero-based.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index\n   * @param {DenseMatrix | Array | *} submatrix\n   * @param {*} defaultValue          Default value, filled in on new entries when\n   *                                  the matrix is resized.\n   * @return {DenseMatrix} matrix\n   * @private\n   */\n  function _set(matrix, index, submatrix, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    // get index size and check whether the index contains a single value\n    var iSize = index.size();\n    var isScalar = index.isScalar();\n\n    // calculate the size of the submatrix, and convert it into an Array if needed\n    var sSize;\n    if (isMatrix(submatrix)) {\n      sSize = submatrix.size();\n      submatrix = submatrix.valueOf();\n    } else {\n      sSize = arraySize(submatrix);\n    }\n    if (isScalar) {\n      // set a scalar\n\n      // check whether submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // set a submatrix\n\n      // validate dimensions\n      if (iSize.length < matrix._size.length) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        }\n\n        // unsqueeze both outer and inner dimensions\n        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);\n      }\n\n      // check whether the size of the submatrix matches the index size\n      if (!deepStrictEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      }\n\n      // enlarge matrix when needed\n      var size = index.max().map(function (i) {\n        return i + 1;\n      });\n      _fit(matrix, size, defaultValue);\n\n      // insert the sub matrix\n      var dims = iSize.length;\n      var dim = 0;\n      _setSubmatrix(matrix._data, index, submatrix, dims, dim);\n    }\n    return matrix;\n  }\n\n  /**\n   * Replace a submatrix of a multi dimensional matrix.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {Array} submatrix\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim\n   * @private\n   */\n  function _setSubmatrix(data, index, submatrix, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n    if (last) {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        data[dataIndex] = submatrix[subIndex[0]];\n      });\n    } else {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);\n      });\n    }\n  }\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof DenseMatrix\n   * @param {number[] || Matrix} size The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isCollection(size)) {\n      throw new TypeError('Array or Matrix expected');\n    }\n\n    // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n    var sizeArray = size.valueOf().map(value => {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n\n    // matrix to resize\n    var m = copy ? this.clone() : this;\n    // resize matrix\n    return _resize(m, sizeArray, defaultValue);\n  };\n  function _resize(matrix, size, defaultValue) {\n    // check size\n    if (size.length === 0) {\n      // first value in matrix\n      var v = matrix._data;\n      // go deep\n      while (isArray(v)) {\n        v = v[0];\n      }\n      return v;\n    }\n    // resize matrix\n    matrix._size = size.slice(0); // copy the array\n    matrix._data = resize(matrix._data, matrix._size, defaultValue);\n    // return matrix\n    return matrix;\n  }\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  DenseMatrix.prototype.reshape = function (size, copy) {\n    var m = copy ? this.clone() : this;\n    m._data = reshape(m._data, size);\n    var currentLength = m._size.reduce((length, size) => length * size);\n    m._size = processSizesWildcard(size, currentLength);\n    return m;\n  };\n\n  /**\n   * Enlarge the matrix when it is smaller than given size.\n   * If the matrix is larger or equal sized, nothing is done.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix           The matrix to be resized\n   * @param {number[]} size\n   * @param {*} defaultValue          Default value, filled in on new entries.\n   * @private\n   */\n  function _fit(matrix, size, defaultValue) {\n    var\n    // copy the array\n    newSize = matrix._size.slice(0);\n    var changed = false;\n\n    // add dimensions when needed\n    while (newSize.length < size.length) {\n      newSize.push(0);\n      changed = true;\n    }\n\n    // enlarge size when needed\n    for (var i = 0, ii = size.length; i < ii; i++) {\n      if (size[i] > newSize[i]) {\n        newSize[i] = size[i];\n        changed = true;\n      }\n    }\n    if (changed) {\n      // resize only when size is changed\n      _resize(matrix, newSize, defaultValue);\n    }\n  }\n\n  /**\n   * Create a clone of the matrix\n   * @memberof DenseMatrix\n   * @return {DenseMatrix} clone\n   */\n  DenseMatrix.prototype.clone = function () {\n    var m = new DenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof DenseMatrix\n   * @returns {number[]} size\n   */\n  DenseMatrix.prototype.size = function () {\n    return this._size.slice(0); // return a clone of _size\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   *\n   * @return {DenseMatrix} matrix\n   */\n  DenseMatrix.prototype.map = function (callback) {\n    // matrix instance\n    var me = this;\n    var args = maxArgumentCount(callback);\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        return value.map(function (child, i) {\n          return recurse(child, index.concat(i));\n        });\n      } else {\n        // invoke the callback function with the right number of arguments\n        if (args === 1) {\n          return callback(value);\n        } else if (args === 2) {\n          return callback(value, index);\n        } else {\n          // 3 or -1\n          return callback(value, index, me);\n        }\n      }\n    };\n\n    // determine the new datatype when the original matrix has datatype defined\n    // TODO: should be done in matrix constructor instead\n    var data = recurse(this._data, []);\n    var datatype = this._datatype !== undefined ? getArrayDataType(data, typeOf) : undefined;\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n  DenseMatrix.prototype.forEach = function (callback) {\n    // matrix instance\n    var me = this;\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        value.forEach(function (child, i) {\n          recurse(child, index.concat(i));\n        });\n      } else {\n        callback(value, index, me);\n      }\n    };\n    recurse(this._data, []);\n  };\n\n  /**\n   * Iterate over the matrix elements\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n  DenseMatrix.prototype[Symbol.iterator] = function* () {\n    var recurse = function* recurse(value, index) {\n      if (isArray(value)) {\n        for (var i = 0; i < value.length; i++) {\n          yield* recurse(value[i], index.concat(i));\n        }\n      } else {\n        yield {\n          value,\n          index\n        };\n      }\n    };\n    yield* recurse(this._data, []);\n  };\n\n  /**\n   * Returns an array containing the rows of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n  DenseMatrix.prototype.rows = function () {\n    var result = [];\n    var s = this.size();\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n    var data = this._data;\n    for (var row of data) {\n      result.push(new DenseMatrix([row], this._datatype));\n    }\n    return result;\n  };\n\n  /**\n   * Returns an array containing the columns of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n  DenseMatrix.prototype.columns = function () {\n    var _this = this;\n    var result = [];\n    var s = this.size();\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n    var data = this._data;\n    var _loop = function _loop(i) {\n      var col = data.map(row => [row[i]]);\n      result.push(new DenseMatrix(col, _this._datatype));\n    };\n    for (var i = 0; i < s[1]; i++) {\n      _loop(i);\n    }\n    return result;\n  };\n\n  /**\n   * Create an Array with a copy of the data of the DenseMatrix\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.toArray = function () {\n    return clone(this._data);\n  };\n\n  /**\n   * Get the primitive value of the DenseMatrix: a multidimensional array\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.valueOf = function () {\n    return this._data;\n  };\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof DenseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.format = function (options) {\n    return format(this._data, options);\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.toString = function () {\n    return format(this._data);\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {Object}\n   */\n  DenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'DenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof DenseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix with the diagonal values.\n   */\n  DenseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // number diagonal values\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // x is a matrix get diagonal from matrix\n    var data = [];\n\n    // loop rows\n    for (var i = 0; i < n; i++) {\n      data[i] = this._data[i + kSub][i + kSuper];\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data,\n      size: [n],\n      datatype: this._datatype\n    });\n  };\n\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {Array} size                     The matrix size.\n   * @param {number | Matrix | Array } value The values for the diagonal.\n   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]          The default value for non-diagonal\n   * @param {string} [datatype]              The datatype for the diagonal\n   *\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.diagonal = function (size, value, k, defaultValue) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // map size & validate\n    size = size.map(function (s) {\n      // check it is a big number\n      if (isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      }\n      // validate arguments\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n      return s;\n    });\n\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n\n    // number of non-zero items\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // value extraction function\n    var _value;\n\n    // check value\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (isMatrix(value)) {\n      // matrix size\n      var ms = value.size();\n      // validate matrix\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    }\n\n    // discover default value if needed\n    if (!defaultValue) {\n      // check first value in array\n      defaultValue = isBigNumber(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero\n      : 0;\n    }\n\n    // empty array\n    var data = [];\n\n    // check we need to resize array\n    if (size.length > 0) {\n      // resize array\n      data = resize(data, size, defaultValue);\n      // fill diagonal\n      for (var d = 0; d < n; d++) {\n        data[d + kSub][d + kSuper] = _value(d);\n      }\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data,\n      size: [rows, columns]\n    });\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof DenseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.fromJSON = function (json) {\n    return new DenseMatrix(json);\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  DenseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    }\n    // check dimensions\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    // validate index\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]);\n\n    // swap rows\n    DenseMatrix._swapRows(i, j, this._data);\n    // return current instance\n    return this;\n  };\n\n  /**\n   * Swap rows i and j in Dense Matrix data structure.\n   *\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   * @param {Array} data     Matrix data\n   */\n  DenseMatrix._swapRows = function (i, j, data) {\n    // swap values i <-> j\n    var vi = data[i];\n    data[i] = data[j];\n    data[j] = vi;\n  };\n\n  /**\n   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\n   * Matrices. Replaces all nested Matrices with Arrays\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @return {Array} data\n   */\n  function preprocess(data) {\n    for (var i = 0, ii = data.length; i < ii; i++) {\n      var elem = data[i];\n      if (isArray(elem)) {\n        data[i] = preprocess(elem);\n      } else if (elem && elem.isMatrix === true) {\n        data[i] = preprocess(elem.valueOf());\n      }\n    }\n    return data;\n  }\n  return DenseMatrix;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["isArray","isBigNumber","isCollection","isIndex","isMatrix","isNumber","isString","typeOf","arraySize","getArrayDataType","processSizesWildcard","reshape","resize","unsqueeze","validate","validateIndex","format","isInteger","clone","deepStrictEqual","DimensionError","factory","maxArgumentCount","name","dependencies","createDenseMatrixClass","_ref","Matrix","DenseMatrix","data","datatype","SyntaxError","Error","type","_data","_size","_datatype","toArray","size","preprocess","TypeError","prototype","createDenseMatrix","Object","defineProperty","value","constructor","isDenseMatrix","getDataType","storage","create","subset","index","replacement","defaultValue","arguments","length","_get","_set","get","x","i","ii","indexI","set","map","_fit","matrix","isScalar","min","max","_getSubmatrix","dims","dim","last","range","dimension","valueOf","child","submatrix","iSize","sSize","outer","_setSubmatrix","forEach","dataIndex","subIndex","copy","sizeArray","Array","m","_resize","v","slice","currentLength","reduce","newSize","changed","push","callback","me","args","recurse","concat","undefined","Symbol","iterator","rows","result","s","row","columns","_this","_loop","col","options","toString","toJSON","mathjs","diagonal","k","toNumber","kSuper","kSub","n","Math","_value","ms","mul","d","fromJSON","json","swapRows","j","_swapRows","vi","elem","isClass"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/type/matrix/DenseMatrix.js"],"sourcesContent":["import { isArray, isBigNumber, isCollection, isIndex, isMatrix, isNumber, isString, typeOf } from '../../utils/is.js';\nimport { arraySize, getArrayDataType, processSizesWildcard, reshape, resize, unsqueeze, validate, validateIndex } from '../../utils/array.js';\nimport { format } from '../../utils/string.js';\nimport { isInteger } from '../../utils/number.js';\nimport { clone, deepStrictEqual } from '../../utils/object.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nvar name = 'DenseMatrix';\nvar dependencies = ['Matrix'];\nexport var createDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Matrix\n  } = _ref;\n  /**\n   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n   * @class DenseMatrix\n   * @enum {{ value, index: number[] }}\n   */\n  function DenseMatrix(data, datatype) {\n    if (!(this instanceof DenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data)) {\n      // check data is a DenseMatrix\n      if (data.type === 'DenseMatrix') {\n        // clone data & size\n        this._data = clone(data._data);\n        this._size = clone(data._size);\n        this._datatype = datatype || data._datatype;\n      } else {\n        // build data from existing matrix\n        this._data = data.toArray();\n        this._size = data.size();\n        this._datatype = datatype || data._datatype;\n      }\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      // verify the dimensions of the array\n      validate(this._data, this._size);\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // replace nested Matrices with Arrays\n      this._data = preprocess(data);\n      // get the dimensions of the array\n      this._size = arraySize(this._data);\n      // verify the dimensions of the array, TODO: compute size while processing array\n      validate(this._data, this._size);\n      // data type unknown\n      this._datatype = datatype;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n    }\n  }\n  DenseMatrix.prototype = new Matrix();\n\n  /**\n   * Create a new DenseMatrix\n   */\n  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(DenseMatrix, 'name', {\n    value: 'DenseMatrix'\n  });\n  DenseMatrix.prototype.constructor = DenseMatrix;\n  DenseMatrix.prototype.type = 'DenseMatrix';\n  DenseMatrix.prototype.isDenseMatrix = true;\n\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf DenseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n  DenseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._data, typeOf);\n  };\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()  // retrieve storage format\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The storage format.\n   */\n  DenseMatrix.prototype.storage = function () {\n    return 'dense';\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()   // retrieve matrix datatype\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The datatype.\n   */\n  DenseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n\n  /**\n   * Create a new DenseMatrix\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n  DenseMatrix.prototype.create = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof DenseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    switch (arguments.length) {\n      case 1:\n        return _get(this, index);\n\n      // intentional fall through\n      case 2:\n      case 3:\n        return _set(this, index, replacement, defaultValue);\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  /**\n   * Get a single element from the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  DenseMatrix.prototype.get = function (index) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    }\n\n    // check index\n    for (var x = 0; x < index.length; x++) {\n      validateIndex(index[x], this._size[x]);\n    }\n    var data = this._data;\n    for (var i = 0, ii = index.length; i < ii; i++) {\n      var indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n    return data;\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {DenseMatrix} self\n   */\n  DenseMatrix.prototype.set = function (index, value, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length < this._size.length) {\n      throw new DimensionError(index.length, this._size.length, '<');\n    }\n    var i, ii, indexI;\n\n    // enlarge matrix when needed\n    var size = index.map(function (i) {\n      return i + 1;\n    });\n    _fit(this, size, defaultValue);\n\n    // traverse over the dimensions\n    var data = this._data;\n    for (i = 0, ii = index.length - 1; i < ii; i++) {\n      indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n\n    // set new value\n    indexI = index[index.length - 1];\n    validateIndex(indexI, data.length);\n    data[indexI] = value;\n    return this;\n  };\n\n  /**\n   * Get a submatrix of this matrix\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index   Zero-based index\n   * @private\n   */\n  function _get(matrix, index) {\n    if (!isIndex(index)) {\n      throw new TypeError('Invalid index');\n    }\n    var isScalar = index.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(index.min());\n    } else {\n      // validate dimensions\n      var size = index.size();\n      if (size.length !== matrix._size.length) {\n        throw new DimensionError(size.length, matrix._size.length);\n      }\n\n      // validate if any of the ranges in the index is out of range\n      var min = index.min();\n      var max = index.max();\n      for (var i = 0, ii = matrix._size.length; i < ii; i++) {\n        validateIndex(min[i], matrix._size[i]);\n        validateIndex(max[i], matrix._size[i]);\n      }\n\n      // retrieve submatrix\n      // TODO: more efficient when creating an empty matrix and setting _data and _size manually\n      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);\n    }\n  }\n\n  /**\n   * Recursively get a submatrix of a multi dimensional matrix.\n   * Index is not checked for correct number or length of dimensions.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim    Current dimension\n   * @return {Array} submatrix\n   * @private\n   */\n  function _getSubmatrix(data, index, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n    if (last) {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        return data[i];\n      }).valueOf();\n    } else {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        var child = data[i];\n        return _getSubmatrix(child, index, dims, dim + 1);\n      }).valueOf();\n    }\n  }\n\n  /**\n   * Replace a submatrix in this matrix\n   * Indexes are zero-based.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index\n   * @param {DenseMatrix | Array | *} submatrix\n   * @param {*} defaultValue          Default value, filled in on new entries when\n   *                                  the matrix is resized.\n   * @return {DenseMatrix} matrix\n   * @private\n   */\n  function _set(matrix, index, submatrix, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    // get index size and check whether the index contains a single value\n    var iSize = index.size();\n    var isScalar = index.isScalar();\n\n    // calculate the size of the submatrix, and convert it into an Array if needed\n    var sSize;\n    if (isMatrix(submatrix)) {\n      sSize = submatrix.size();\n      submatrix = submatrix.valueOf();\n    } else {\n      sSize = arraySize(submatrix);\n    }\n    if (isScalar) {\n      // set a scalar\n\n      // check whether submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // set a submatrix\n\n      // validate dimensions\n      if (iSize.length < matrix._size.length) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        }\n\n        // unsqueeze both outer and inner dimensions\n        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);\n      }\n\n      // check whether the size of the submatrix matches the index size\n      if (!deepStrictEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      }\n\n      // enlarge matrix when needed\n      var size = index.max().map(function (i) {\n        return i + 1;\n      });\n      _fit(matrix, size, defaultValue);\n\n      // insert the sub matrix\n      var dims = iSize.length;\n      var dim = 0;\n      _setSubmatrix(matrix._data, index, submatrix, dims, dim);\n    }\n    return matrix;\n  }\n\n  /**\n   * Replace a submatrix of a multi dimensional matrix.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {Array} submatrix\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim\n   * @private\n   */\n  function _setSubmatrix(data, index, submatrix, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n    if (last) {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        data[dataIndex] = submatrix[subIndex[0]];\n      });\n    } else {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);\n      });\n    }\n  }\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof DenseMatrix\n   * @param {number[] || Matrix} size The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isCollection(size)) {\n      throw new TypeError('Array or Matrix expected');\n    }\n\n    // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n    var sizeArray = size.valueOf().map(value => {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n\n    // matrix to resize\n    var m = copy ? this.clone() : this;\n    // resize matrix\n    return _resize(m, sizeArray, defaultValue);\n  };\n  function _resize(matrix, size, defaultValue) {\n    // check size\n    if (size.length === 0) {\n      // first value in matrix\n      var v = matrix._data;\n      // go deep\n      while (isArray(v)) {\n        v = v[0];\n      }\n      return v;\n    }\n    // resize matrix\n    matrix._size = size.slice(0); // copy the array\n    matrix._data = resize(matrix._data, matrix._size, defaultValue);\n    // return matrix\n    return matrix;\n  }\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  DenseMatrix.prototype.reshape = function (size, copy) {\n    var m = copy ? this.clone() : this;\n    m._data = reshape(m._data, size);\n    var currentLength = m._size.reduce((length, size) => length * size);\n    m._size = processSizesWildcard(size, currentLength);\n    return m;\n  };\n\n  /**\n   * Enlarge the matrix when it is smaller than given size.\n   * If the matrix is larger or equal sized, nothing is done.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix           The matrix to be resized\n   * @param {number[]} size\n   * @param {*} defaultValue          Default value, filled in on new entries.\n   * @private\n   */\n  function _fit(matrix, size, defaultValue) {\n    var\n    // copy the array\n    newSize = matrix._size.slice(0);\n    var changed = false;\n\n    // add dimensions when needed\n    while (newSize.length < size.length) {\n      newSize.push(0);\n      changed = true;\n    }\n\n    // enlarge size when needed\n    for (var i = 0, ii = size.length; i < ii; i++) {\n      if (size[i] > newSize[i]) {\n        newSize[i] = size[i];\n        changed = true;\n      }\n    }\n    if (changed) {\n      // resize only when size is changed\n      _resize(matrix, newSize, defaultValue);\n    }\n  }\n\n  /**\n   * Create a clone of the matrix\n   * @memberof DenseMatrix\n   * @return {DenseMatrix} clone\n   */\n  DenseMatrix.prototype.clone = function () {\n    var m = new DenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof DenseMatrix\n   * @returns {number[]} size\n   */\n  DenseMatrix.prototype.size = function () {\n    return this._size.slice(0); // return a clone of _size\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   *\n   * @return {DenseMatrix} matrix\n   */\n  DenseMatrix.prototype.map = function (callback) {\n    // matrix instance\n    var me = this;\n    var args = maxArgumentCount(callback);\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        return value.map(function (child, i) {\n          return recurse(child, index.concat(i));\n        });\n      } else {\n        // invoke the callback function with the right number of arguments\n        if (args === 1) {\n          return callback(value);\n        } else if (args === 2) {\n          return callback(value, index);\n        } else {\n          // 3 or -1\n          return callback(value, index, me);\n        }\n      }\n    };\n\n    // determine the new datatype when the original matrix has datatype defined\n    // TODO: should be done in matrix constructor instead\n    var data = recurse(this._data, []);\n    var datatype = this._datatype !== undefined ? getArrayDataType(data, typeOf) : undefined;\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n  DenseMatrix.prototype.forEach = function (callback) {\n    // matrix instance\n    var me = this;\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        value.forEach(function (child, i) {\n          recurse(child, index.concat(i));\n        });\n      } else {\n        callback(value, index, me);\n      }\n    };\n    recurse(this._data, []);\n  };\n\n  /**\n   * Iterate over the matrix elements\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n  DenseMatrix.prototype[Symbol.iterator] = function* () {\n    var recurse = function* recurse(value, index) {\n      if (isArray(value)) {\n        for (var i = 0; i < value.length; i++) {\n          yield* recurse(value[i], index.concat(i));\n        }\n      } else {\n        yield {\n          value,\n          index\n        };\n      }\n    };\n    yield* recurse(this._data, []);\n  };\n\n  /**\n   * Returns an array containing the rows of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n  DenseMatrix.prototype.rows = function () {\n    var result = [];\n    var s = this.size();\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n    var data = this._data;\n    for (var row of data) {\n      result.push(new DenseMatrix([row], this._datatype));\n    }\n    return result;\n  };\n\n  /**\n   * Returns an array containing the columns of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n  DenseMatrix.prototype.columns = function () {\n    var _this = this;\n    var result = [];\n    var s = this.size();\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n    var data = this._data;\n    var _loop = function _loop(i) {\n      var col = data.map(row => [row[i]]);\n      result.push(new DenseMatrix(col, _this._datatype));\n    };\n    for (var i = 0; i < s[1]; i++) {\n      _loop(i);\n    }\n    return result;\n  };\n\n  /**\n   * Create an Array with a copy of the data of the DenseMatrix\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.toArray = function () {\n    return clone(this._data);\n  };\n\n  /**\n   * Get the primitive value of the DenseMatrix: a multidimensional array\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.valueOf = function () {\n    return this._data;\n  };\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof DenseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.format = function (options) {\n    return format(this._data, options);\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.toString = function () {\n    return format(this._data);\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {Object}\n   */\n  DenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'DenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof DenseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix with the diagonal values.\n   */\n  DenseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // number diagonal values\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // x is a matrix get diagonal from matrix\n    var data = [];\n\n    // loop rows\n    for (var i = 0; i < n; i++) {\n      data[i] = this._data[i + kSub][i + kSuper];\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data,\n      size: [n],\n      datatype: this._datatype\n    });\n  };\n\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {Array} size                     The matrix size.\n   * @param {number | Matrix | Array } value The values for the diagonal.\n   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]          The default value for non-diagonal\n   * @param {string} [datatype]              The datatype for the diagonal\n   *\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.diagonal = function (size, value, k, defaultValue) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // map size & validate\n    size = size.map(function (s) {\n      // check it is a big number\n      if (isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      }\n      // validate arguments\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n      return s;\n    });\n\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n\n    // number of non-zero items\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // value extraction function\n    var _value;\n\n    // check value\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (isMatrix(value)) {\n      // matrix size\n      var ms = value.size();\n      // validate matrix\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    }\n\n    // discover default value if needed\n    if (!defaultValue) {\n      // check first value in array\n      defaultValue = isBigNumber(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero\n      : 0;\n    }\n\n    // empty array\n    var data = [];\n\n    // check we need to resize array\n    if (size.length > 0) {\n      // resize array\n      data = resize(data, size, defaultValue);\n      // fill diagonal\n      for (var d = 0; d < n; d++) {\n        data[d + kSub][d + kSuper] = _value(d);\n      }\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data,\n      size: [rows, columns]\n    });\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof DenseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.fromJSON = function (json) {\n    return new DenseMatrix(json);\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  DenseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    }\n    // check dimensions\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    // validate index\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]);\n\n    // swap rows\n    DenseMatrix._swapRows(i, j, this._data);\n    // return current instance\n    return this;\n  };\n\n  /**\n   * Swap rows i and j in Dense Matrix data structure.\n   *\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   * @param {Array} data     Matrix data\n   */\n  DenseMatrix._swapRows = function (i, j, data) {\n    // swap values i <-> j\n    var vi = data[i];\n    data[i] = data[j];\n    data[j] = vi;\n  };\n\n  /**\n   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\n   * Matrices. Replaces all nested Matrices with Arrays\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @return {Array} data\n   */\n  function preprocess(data) {\n    for (var i = 0, ii = data.length; i < ii; i++) {\n      var elem = data[i];\n      if (isArray(elem)) {\n        data[i] = preprocess(elem);\n      } else if (elem && elem.isMatrix === true) {\n        data[i] = preprocess(elem.valueOf());\n      }\n    }\n    return data;\n  }\n  return DenseMatrix;\n}, {\n  isClass: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}