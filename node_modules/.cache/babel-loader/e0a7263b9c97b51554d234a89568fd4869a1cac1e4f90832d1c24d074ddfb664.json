{"ast":null,"code":"import { createMap } from '../../utils/map.js';\nimport { isFunctionNode, isNode, isOperatorNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'resolve';\nvar dependencies = ['typed', 'parse', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];\nexport var createResolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    parse,\n    ConstantNode,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode\n  } = _ref;\n  /**\n   * resolve(expr, scope) replaces variable nodes with their scoped values\n   *\n   * Syntax:\n   *\n   *     resolve(expr, scope)\n   *\n   * Examples:\n   *\n   *     math.resolve('x + y', {x:1, y:2})           // Node '1 + 2'\n   *     math.resolve(math.parse('x+y'), {x:1, y:2}) // Node '1 + 2'\n   *     math.simplify('x+y', {x:2, y: math.parse('x+x')}).toString() // \"6\"\n   *\n   * See also:\n   *\n   *     simplify, evaluate\n   *\n   * @param {Node | Node[]} node\n   *     The expression tree (or trees) to be simplified\n   * @param {Object} scope\n   *     Scope specifying variables to be resolved\n   * @return {Node | Node[]} Returns `node` with variables recursively substituted.\n   * @throws {ReferenceError}\n   *     If there is a cyclic dependency among the variables in `scope`,\n   *     resolution is impossible and a ReferenceError is thrown.\n   */\n  function _resolve(node, scope) {\n    var within = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n    // note `within`:\n    // `within` is not documented, since it is for internal cycle\n    // detection only\n    if (!scope) {\n      return node;\n    }\n    if (isSymbolNode(node)) {\n      if (within.has(node.name)) {\n        var variables = Array.from(within).join(', ');\n        throw new ReferenceError(\"recursive loop of variable definitions among {\".concat(variables, \"}\"));\n      }\n      var value = scope.get(node.name);\n      if (isNode(value)) {\n        var nextWithin = new Set(within);\n        nextWithin.add(node.name);\n        return _resolve(value, scope, nextWithin);\n      } else if (typeof value === 'number') {\n        return parse(String(value));\n      } else if (value !== undefined) {\n        return new ConstantNode(value);\n      } else {\n        return node;\n      }\n    } else if (isOperatorNode(node)) {\n      var args = node.args.map(function (arg) {\n        return _resolve(arg, scope, within);\n      });\n      return new OperatorNode(node.op, node.fn, args, node.implicit);\n    } else if (isParenthesisNode(node)) {\n      return new ParenthesisNode(_resolve(node.content, scope, within));\n    } else if (isFunctionNode(node)) {\n      var _args = node.args.map(function (arg) {\n        return _resolve(arg, scope, within);\n      });\n      return new FunctionNode(node.name, _args);\n    }\n\n    // Otherwise just recursively resolve any children (might also work\n    // for some of the above special cases)\n    return node.map(child => _resolve(child, scope, within));\n  }\n  return typed('resolve', {\n    Node: _resolve,\n    'Node, Map | null | undefined': _resolve,\n    'Node, Object': (n, scope) => _resolve(n, createMap(scope)),\n    // For arrays and matrices, we map `self` rather than `_resolve`\n    // because resolve is fairly expensive anyway, and this way\n    // we get nice error messages if one entry in the array has wrong type.\n    'Array | Matrix': typed.referToSelf(self => A => A.map(n => self(n))),\n    'Array | Matrix, null | undefined': typed.referToSelf(self => A => A.map(n => self(n))),\n    'Array, Object': typed.referTo('Array,Map', selfAM => (A, scope) => selfAM(A, createMap(scope))),\n    'Matrix, Object': typed.referTo('Matrix,Map', selfMM => (A, scope) => selfMM(A, createMap(scope))),\n    'Array | Matrix, Map': typed.referToSelf(self => (A, scope) => A.map(n => self(n, scope)))\n  });\n});","map":{"version":3,"names":["createMap","isFunctionNode","isNode","isOperatorNode","isParenthesisNode","isSymbolNode","factory","name","dependencies","createResolve","_ref","typed","parse","ConstantNode","FunctionNode","OperatorNode","ParenthesisNode","_resolve","node","scope","within","arguments","length","undefined","Set","has","variables","Array","from","join","ReferenceError","concat","value","get","nextWithin","add","String","args","map","arg","op","fn","implicit","content","_args","child","Node","Node, Object","n","referToSelf","self","A","referTo","selfAM","selfMM"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/algebra/resolve.js"],"sourcesContent":["import { createMap } from '../../utils/map.js';\nimport { isFunctionNode, isNode, isOperatorNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'resolve';\nvar dependencies = ['typed', 'parse', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];\nexport var createResolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    parse,\n    ConstantNode,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode\n  } = _ref;\n  /**\n   * resolve(expr, scope) replaces variable nodes with their scoped values\n   *\n   * Syntax:\n   *\n   *     resolve(expr, scope)\n   *\n   * Examples:\n   *\n   *     math.resolve('x + y', {x:1, y:2})           // Node '1 + 2'\n   *     math.resolve(math.parse('x+y'), {x:1, y:2}) // Node '1 + 2'\n   *     math.simplify('x+y', {x:2, y: math.parse('x+x')}).toString() // \"6\"\n   *\n   * See also:\n   *\n   *     simplify, evaluate\n   *\n   * @param {Node | Node[]} node\n   *     The expression tree (or trees) to be simplified\n   * @param {Object} scope\n   *     Scope specifying variables to be resolved\n   * @return {Node | Node[]} Returns `node` with variables recursively substituted.\n   * @throws {ReferenceError}\n   *     If there is a cyclic dependency among the variables in `scope`,\n   *     resolution is impossible and a ReferenceError is thrown.\n   */\n  function _resolve(node, scope) {\n    var within = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n    // note `within`:\n    // `within` is not documented, since it is for internal cycle\n    // detection only\n    if (!scope) {\n      return node;\n    }\n    if (isSymbolNode(node)) {\n      if (within.has(node.name)) {\n        var variables = Array.from(within).join(', ');\n        throw new ReferenceError(\"recursive loop of variable definitions among {\".concat(variables, \"}\"));\n      }\n      var value = scope.get(node.name);\n      if (isNode(value)) {\n        var nextWithin = new Set(within);\n        nextWithin.add(node.name);\n        return _resolve(value, scope, nextWithin);\n      } else if (typeof value === 'number') {\n        return parse(String(value));\n      } else if (value !== undefined) {\n        return new ConstantNode(value);\n      } else {\n        return node;\n      }\n    } else if (isOperatorNode(node)) {\n      var args = node.args.map(function (arg) {\n        return _resolve(arg, scope, within);\n      });\n      return new OperatorNode(node.op, node.fn, args, node.implicit);\n    } else if (isParenthesisNode(node)) {\n      return new ParenthesisNode(_resolve(node.content, scope, within));\n    } else if (isFunctionNode(node)) {\n      var _args = node.args.map(function (arg) {\n        return _resolve(arg, scope, within);\n      });\n      return new FunctionNode(node.name, _args);\n    }\n\n    // Otherwise just recursively resolve any children (might also work\n    // for some of the above special cases)\n    return node.map(child => _resolve(child, scope, within));\n  }\n  return typed('resolve', {\n    Node: _resolve,\n    'Node, Map | null | undefined': _resolve,\n    'Node, Object': (n, scope) => _resolve(n, createMap(scope)),\n    // For arrays and matrices, we map `self` rather than `_resolve`\n    // because resolve is fairly expensive anyway, and this way\n    // we get nice error messages if one entry in the array has wrong type.\n    'Array | Matrix': typed.referToSelf(self => A => A.map(n => self(n))),\n    'Array | Matrix, null | undefined': typed.referToSelf(self => A => A.map(n => self(n))),\n    'Array, Object': typed.referTo('Array,Map', selfAM => (A, scope) => selfAM(A, createMap(scope))),\n    'Matrix, Object': typed.referTo('Matrix,Map', selfMM => (A, scope) => selfMM(A, createMap(scope))),\n    'Array | Matrix, Map': typed.referToSelf(self => (A, scope) => A.map(n => self(n, scope)))\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}