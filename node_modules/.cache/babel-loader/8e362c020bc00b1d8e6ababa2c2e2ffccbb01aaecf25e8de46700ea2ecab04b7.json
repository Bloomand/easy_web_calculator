{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isBigNumber, isComplex, isFraction } from '../../utils/is.js';\nimport { cbrtNumber } from '../../plain/number/index.js';\nvar name = 'cbrt';\nvar dependencies = ['config', 'typed', 'isNegative', 'unaryMinus', 'matrix', 'Complex', 'BigNumber', 'Fraction'];\nexport var createCbrt = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    isNegative,\n    unaryMinus,\n    matrix,\n    Complex,\n    BigNumber,\n    Fraction\n  } = _ref;\n  /**\n   * Calculate the cubic root of a value.\n   *\n   * To avoid confusion with the matrix cube root, this function does not\n   * apply to matrices. For a matrix, to take the cube root elementwise,\n   * see the examples.\n   *\n   * Syntax:\n   *\n   *    math.cbrt(x)\n   *    math.cbrt(x, allRoots)\n   *\n   * Examples:\n   *\n   *    math.cbrt(27)                  // returns 3\n   *    math.cube(3)                   // returns 27\n   *    math.cbrt(-64)                 // returns -4\n   *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m\n   *    math.map([27, 64, 125], x => math.cbrt(x))       // returns [3, 4, 5]\n   *\n   *    const x = math.complex('8i')\n   *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i\n   *    math.cbrt(x, true)             // returns Matrix [\n   *                                    //    1.7320508075689 + i\n   *                                    //   -1.7320508075689 + i\n   *                                    //   -2i\n   *                                    // ]\n   *\n   * See also:\n   *\n   *    square, sqrt, cube\n   *\n   * @param {number | BigNumber | Complex | Unit} x\n   *            Value for which to calculate the cubic root.\n   * @param {boolean} [allRoots]  Optional, false by default. Only applicable\n   *            when `x` is a number or complex number. If true, all complex\n   *            roots are returned, if false (default) the principal root is\n   *            returned.\n   * @return {number | BigNumber | Complex | Unit}\n   *            Returns the cubic root of `x`\n   */\n  return typed(name, {\n    number: cbrtNumber,\n    // note: signature 'number, boolean' is also supported,\n    //       created by typed as it knows how to convert number to Complex\n\n    Complex: _cbrtComplex,\n    'Complex, boolean': _cbrtComplex,\n    BigNumber: function BigNumber(x) {\n      return x.cbrt();\n    },\n    Unit: _cbrtUnit\n  });\n\n  /**\n   * Calculate the cubic root for a complex number\n   * @param {Complex} x\n   * @param {boolean} [allRoots]   If true, the function will return an array\n   *                               with all three roots. If false or undefined,\n   *                               the principal root is returned.\n   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x\n   * @private\n   */\n  function _cbrtComplex(x, allRoots) {\n    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers\n\n    var arg3 = x.arg() / 3;\n    var abs = x.abs();\n\n    // principal root:\n    var principal = new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3).exp());\n    if (allRoots) {\n      var all = [principal, new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 + Math.PI * 2 / 3).exp()), new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 - Math.PI * 2 / 3).exp())];\n      return config.matrix === 'Array' ? all : matrix(all);\n    } else {\n      return principal;\n    }\n  }\n\n  /**\n   * Calculate the cubic root for a Unit\n   * @param {Unit} x\n   * @return {Unit} Returns the cubic root of x\n   * @private\n   */\n  function _cbrtUnit(x) {\n    if (x.value && isComplex(x.value)) {\n      var result = x.clone();\n      result.value = 1.0;\n      result = result.pow(1.0 / 3); // Compute the units\n      result.value = _cbrtComplex(x.value); // Compute the value\n      return result;\n    } else {\n      var negate = isNegative(x.value);\n      if (negate) {\n        x.value = unaryMinus(x.value);\n      }\n\n      // TODO: create a helper function for this\n      var third;\n      if (isBigNumber(x.value)) {\n        third = new BigNumber(1).div(3);\n      } else if (isFraction(x.value)) {\n        third = new Fraction(1, 3);\n      } else {\n        third = 1 / 3;\n      }\n      var _result = x.pow(third);\n      if (negate) {\n        _result.value = unaryMinus(_result.value);\n      }\n      return _result;\n    }\n  }\n});","map":{"version":3,"names":["factory","isBigNumber","isComplex","isFraction","cbrtNumber","name","dependencies","createCbrt","_ref","config","typed","isNegative","unaryMinus","matrix","Complex","BigNumber","Fraction","number","_cbrtComplex","x","cbrt","Unit","_cbrtUnit","allRoots","arg3","arg","abs","principal","mul","exp","all","Math","PI","value","result","clone","pow","negate","third","div","_result"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/arithmetic/cbrt.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isBigNumber, isComplex, isFraction } from '../../utils/is.js';\nimport { cbrtNumber } from '../../plain/number/index.js';\nvar name = 'cbrt';\nvar dependencies = ['config', 'typed', 'isNegative', 'unaryMinus', 'matrix', 'Complex', 'BigNumber', 'Fraction'];\nexport var createCbrt = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    isNegative,\n    unaryMinus,\n    matrix,\n    Complex,\n    BigNumber,\n    Fraction\n  } = _ref;\n  /**\n   * Calculate the cubic root of a value.\n   *\n   * To avoid confusion with the matrix cube root, this function does not\n   * apply to matrices. For a matrix, to take the cube root elementwise,\n   * see the examples.\n   *\n   * Syntax:\n   *\n   *    math.cbrt(x)\n   *    math.cbrt(x, allRoots)\n   *\n   * Examples:\n   *\n   *    math.cbrt(27)                  // returns 3\n   *    math.cube(3)                   // returns 27\n   *    math.cbrt(-64)                 // returns -4\n   *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m\n   *    math.map([27, 64, 125], x => math.cbrt(x))       // returns [3, 4, 5]\n   *\n   *    const x = math.complex('8i')\n   *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i\n   *    math.cbrt(x, true)             // returns Matrix [\n   *                                    //    1.7320508075689 + i\n   *                                    //   -1.7320508075689 + i\n   *                                    //   -2i\n   *                                    // ]\n   *\n   * See also:\n   *\n   *    square, sqrt, cube\n   *\n   * @param {number | BigNumber | Complex | Unit} x\n   *            Value for which to calculate the cubic root.\n   * @param {boolean} [allRoots]  Optional, false by default. Only applicable\n   *            when `x` is a number or complex number. If true, all complex\n   *            roots are returned, if false (default) the principal root is\n   *            returned.\n   * @return {number | BigNumber | Complex | Unit}\n   *            Returns the cubic root of `x`\n   */\n  return typed(name, {\n    number: cbrtNumber,\n    // note: signature 'number, boolean' is also supported,\n    //       created by typed as it knows how to convert number to Complex\n\n    Complex: _cbrtComplex,\n    'Complex, boolean': _cbrtComplex,\n    BigNumber: function BigNumber(x) {\n      return x.cbrt();\n    },\n    Unit: _cbrtUnit\n  });\n\n  /**\n   * Calculate the cubic root for a complex number\n   * @param {Complex} x\n   * @param {boolean} [allRoots]   If true, the function will return an array\n   *                               with all three roots. If false or undefined,\n   *                               the principal root is returned.\n   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x\n   * @private\n   */\n  function _cbrtComplex(x, allRoots) {\n    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers\n\n    var arg3 = x.arg() / 3;\n    var abs = x.abs();\n\n    // principal root:\n    var principal = new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3).exp());\n    if (allRoots) {\n      var all = [principal, new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 + Math.PI * 2 / 3).exp()), new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 - Math.PI * 2 / 3).exp())];\n      return config.matrix === 'Array' ? all : matrix(all);\n    } else {\n      return principal;\n    }\n  }\n\n  /**\n   * Calculate the cubic root for a Unit\n   * @param {Unit} x\n   * @return {Unit} Returns the cubic root of x\n   * @private\n   */\n  function _cbrtUnit(x) {\n    if (x.value && isComplex(x.value)) {\n      var result = x.clone();\n      result.value = 1.0;\n      result = result.pow(1.0 / 3); // Compute the units\n      result.value = _cbrtComplex(x.value); // Compute the value\n      return result;\n    } else {\n      var negate = isNegative(x.value);\n      if (negate) {\n        x.value = unaryMinus(x.value);\n      }\n\n      // TODO: create a helper function for this\n      var third;\n      if (isBigNumber(x.value)) {\n        third = new BigNumber(1).div(3);\n      } else if (isFraction(x.value)) {\n        third = new Fraction(1, 3);\n      } else {\n        third = 1 / 3;\n      }\n      var _result = x.pow(third);\n      if (negate) {\n        _result.value = unaryMinus(_result.value);\n      }\n      return _result;\n    }\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}