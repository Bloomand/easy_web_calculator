{"ast":null,"code":"import { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'ifft';\nvar dependencies = ['typed', 'fft', 'dotDivide', 'conj'];\nexport var createIfft = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    fft,\n    dotDivide,\n    conj\n  } = _ref;\n  /**\n   * Calculate N-dimensional inverse fourier transform\n   *\n   * Syntax:\n   *\n   *     math.ifft(arr)\n   *\n   * Examples:\n   *\n   *    math.ifft([[2, 2], [0, 0]]) // returns [[{re:1, im:0}, {re:0, im:0}], [{re:1, im:0}, {re:0, im:0}]]\n   *\n   * See Also:\n   *\n   *      fft\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @return {Array | Matrix}       N-dimensional fourier transformation of the array\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(arr) {\n      var size = isMatrix(arr) ? arr.size() : arraySize(arr);\n      return dotDivide(conj(fft(conj(arr))), size.reduce((acc, curr) => acc * curr, 1));\n    }\n  });\n});","map":{"version":3,"names":["arraySize","factory","isMatrix","name","dependencies","createIfft","_ref","typed","fft","dotDivide","conj","ArrayMatrix","arr","size","reduce","acc","curr"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/matrix/ifft.js"],"sourcesContent":["import { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'ifft';\nvar dependencies = ['typed', 'fft', 'dotDivide', 'conj'];\nexport var createIfft = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    fft,\n    dotDivide,\n    conj\n  } = _ref;\n  /**\n   * Calculate N-dimensional inverse fourier transform\n   *\n   * Syntax:\n   *\n   *     math.ifft(arr)\n   *\n   * Examples:\n   *\n   *    math.ifft([[2, 2], [0, 0]]) // returns [[{re:1, im:0}, {re:0, im:0}], [{re:1, im:0}, {re:0, im:0}]]\n   *\n   * See Also:\n   *\n   *      fft\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @return {Array | Matrix}       N-dimensional fourier transformation of the array\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(arr) {\n      var size = isMatrix(arr) ? arr.size() : arraySize(arr);\n      return dotDivide(conj(fft(conj(arr))), size.reduce((acc, curr) => acc * curr, 1));\n    }\n  });\n});"],"mappings":"AAAA,SAASA,SAAS,QAAQ,sBAAsB;AAChD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,CAAC;AACxD,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC,KAAK;IACLC,GAAG;IACHC,SAAS;IACTC;EACF,CAAC,GAAGJ,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAE,SAASQ,WAAWA,CAACC,GAAG,EAAE;MAC1C,IAAIC,IAAI,GAAGX,QAAQ,CAACU,GAAG,CAAC,GAAGA,GAAG,CAACC,IAAI,EAAE,GAAGb,SAAS,CAACY,GAAG,CAAC;MACtD,OAAOH,SAAS,CAACC,IAAI,CAACF,GAAG,CAACE,IAAI,CAACE,GAAG,CAAC,CAAC,CAAC,EAAEC,IAAI,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,EAAE,CAAC,CAAC,CAAC;IACnF;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}