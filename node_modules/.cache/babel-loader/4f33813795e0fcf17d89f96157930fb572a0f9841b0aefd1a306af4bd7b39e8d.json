{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { sechNumber } from '../../plain/number/index.js';\nvar name = 'sech';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createSech = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the hyperbolic secant of a value,\n   * defined as `sech(x) = 1 / cosh(x)`.\n   *\n   * To avoid confusion with the matrix hyperbolic secant, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.sech(x)\n   *\n   * Examples:\n   *\n   *    // sech(x) = 1/ cosh(x)\n   *    math.sech(0.5)       // returns 0.886818883970074\n   *    1 / math.cosh(0.5)   // returns 0.886818883970074\n   *\n   * See also:\n   *\n   *    cosh, csch, coth\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic secant of x\n   */\n  return typed(name, {\n    number: sechNumber,\n    Complex: x => x.sech(),\n    BigNumber: x => new _BigNumber(1).div(x.cosh())\n  });\n});","map":{"version":3,"names":["factory","sechNumber","name","dependencies","createSech","_ref","typed","BigNumber","_BigNumber","number","Complex","x","sech","div","cosh"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/trigonometry/sech.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { sechNumber } from '../../plain/number/index.js';\nvar name = 'sech';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createSech = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the hyperbolic secant of a value,\n   * defined as `sech(x) = 1 / cosh(x)`.\n   *\n   * To avoid confusion with the matrix hyperbolic secant, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.sech(x)\n   *\n   * Examples:\n   *\n   *    // sech(x) = 1/ cosh(x)\n   *    math.sech(0.5)       // returns 0.886818883970074\n   *    1 / math.cosh(0.5)   // returns 0.886818883970074\n   *\n   * See also:\n   *\n   *    cosh, csch, coth\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic secant of x\n   */\n  return typed(name, {\n    number: sechNumber,\n    Complex: x => x.sech(),\n    BigNumber: x => new _BigNumber(1).div(x.cosh())\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,UAAU,QAAQ,6BAA6B;AACxD,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC;AACzC,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC,KAAK;IACLC,SAAS,EAAEC;EACb,CAAC,GAAGH,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBO,MAAM,EAAER,UAAU;IAClBS,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAACC,IAAI,EAAE;IACtBL,SAAS,EAAEI,CAAC,IAAI,IAAIH,UAAU,CAAC,CAAC,CAAC,CAACK,GAAG,CAACF,CAAC,CAACG,IAAI,EAAE;EAChD,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}