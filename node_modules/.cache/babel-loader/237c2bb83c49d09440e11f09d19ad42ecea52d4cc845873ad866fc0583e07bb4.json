{"ast":null,"code":"import { factory } from '../../utils/factory.js';\n\n// Source: https://en.wikipedia.org/wiki/Physical_constant\n\n// Universal constants\nexport var createSpeedOfLight = /* #__PURE__ */unitFactory('speedOfLight', '299792458', 'm s^-1');\nexport var createGravitationConstant = /* #__PURE__ */unitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');\nexport var createPlanckConstant = /* #__PURE__ */unitFactory('planckConstant', '6.62607015e-34', 'J s');\nexport var createReducedPlanckConstant = /* #__PURE__ */unitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s');\n\n// Electromagnetic constants\nexport var createMagneticConstant = /* #__PURE__ */unitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');\nexport var createElectricConstant = /* #__PURE__ */unitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');\nexport var createVacuumImpedance = /* #__PURE__ */unitFactory('vacuumImpedance', '376.730313667', 'ohm');\nexport var createCoulomb = /* #__PURE__ */unitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');\nexport var createElementaryCharge = /* #__PURE__ */unitFactory('elementaryCharge', '1.602176634e-19', 'C');\nexport var createBohrMagneton = /* #__PURE__ */unitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');\nexport var createConductanceQuantum = /* #__PURE__ */unitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');\nexport var createInverseConductanceQuantum = /* #__PURE__ */unitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');\nexport var createMagneticFluxQuantum = /* #__PURE__ */unitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');\nexport var createNuclearMagneton = /* #__PURE__ */unitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');\nexport var createKlitzing = /* #__PURE__ */unitFactory('klitzing', '25812.807459304513', 'ohm');\nexport var createJosephson = /* #__PURE__ */unitFactory('josephson', '4.835978484169836e14 Hz V', 'Hz V^-1'); // TODO: support for Hz needed\n\n// Atomic and nuclear constants\nexport var createBohrRadius = /* #__PURE__ */unitFactory('bohrRadius', '5.29177210903e-11', 'm');\nexport var createClassicalElectronRadius = /* #__PURE__ */unitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');\nexport var createElectronMass = /* #__PURE__ */unitFactory('electronMass', '9.1093837015e-31', 'kg');\nexport var createFermiCoupling = /* #__PURE__ */unitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');\nexport var createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);\nexport var createHartreeEnergy = /* #__PURE__ */unitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');\nexport var createProtonMass = /* #__PURE__ */unitFactory('protonMass', '1.67262192369e-27', 'kg');\nexport var createDeuteronMass = /* #__PURE__ */unitFactory('deuteronMass', '3.3435830926e-27', 'kg');\nexport var createNeutronMass = /* #__PURE__ */unitFactory('neutronMass', '1.6749271613e-27', 'kg');\nexport var createQuantumOfCirculation = /* #__PURE__ */unitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');\nexport var createRydberg = /* #__PURE__ */unitFactory('rydberg', '10973731.568160', 'm^-1');\nexport var createThomsonCrossSection = /* #__PURE__ */unitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');\nexport var createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);\nexport var createEfimovFactor = numberFactory('efimovFactor', 22.7);\n\n// Physico-chemical constants\nexport var createAtomicMass = /* #__PURE__ */unitFactory('atomicMass', '1.66053906660e-27', 'kg');\nexport var createAvogadro = /* #__PURE__ */unitFactory('avogadro', '6.02214076e23', 'mol^-1');\nexport var createBoltzmann = /* #__PURE__ */unitFactory('boltzmann', '1.380649e-23', 'J K^-1');\nexport var createFaraday = /* #__PURE__ */unitFactory('faraday', '96485.33212331001', 'C mol^-1');\nexport var createFirstRadiation = /* #__PURE__ */unitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2');\n// export const createSpectralRadiance = /* #__PURE__ */ unitFactory('spectralRadiance', '1.1910429723971881e-16', 'W m^2 sr^-1') // TODO spectralRadiance\nexport var createLoschmidt = /* #__PURE__ */unitFactory('loschmidt', '2.686780111798444e25', 'm^-3');\nexport var createGasConstant = /* #__PURE__ */unitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');\nexport var createMolarPlanckConstant = /* #__PURE__ */unitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');\nexport var createMolarVolume = /* #__PURE__ */unitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');\nexport var createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);\nexport var createSecondRadiation = /* #__PURE__ */unitFactory('secondRadiation', '0.014387768775039337', 'm K');\nexport var createStefanBoltzmann = /* #__PURE__ */unitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');\nexport var createWienDisplacement = /* #__PURE__ */unitFactory('wienDisplacement', '2.897771955e-3', 'm K');\n\n// Adopted values\nexport var createMolarMass = /* #__PURE__ */unitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');\nexport var createMolarMassC12 = /* #__PURE__ */unitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');\nexport var createGravity = /* #__PURE__ */unitFactory('gravity', '9.80665', 'm s^-2');\n// atm is defined in Unit.js\n\n// Natural units\nexport var createPlanckLength = /* #__PURE__ */unitFactory('planckLength', '1.616255e-35', 'm');\nexport var createPlanckMass = /* #__PURE__ */unitFactory('planckMass', '2.176435e-8', 'kg');\nexport var createPlanckTime = /* #__PURE__ */unitFactory('planckTime', '5.391245e-44', 's');\nexport var createPlanckCharge = /* #__PURE__ */unitFactory('planckCharge', '1.87554603778e-18', 'C');\nexport var createPlanckTemperature = /* #__PURE__ */unitFactory('planckTemperature', '1.416785e+32', 'K');\n\n// helper function to create a factory function which creates a physical constant,\n// a Unit with either a number value or a BigNumber value depending on the configuration\nfunction unitFactory(name, valueStr, unitStr) {\n  var dependencies = ['config', 'Unit', 'BigNumber'];\n  return factory(name, dependencies, _ref => {\n    var {\n      config,\n      Unit,\n      BigNumber\n    } = _ref;\n    // Note that we can parse into number or BigNumber.\n    // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values\n    // Therefore we dont use Unit.parse()\n    var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);\n    var unit = new Unit(value, unitStr);\n    unit.fixPrefix = true;\n    return unit;\n  });\n}\n\n// helper function to create a factory function which creates a numeric constant,\n// either a number or BigNumber depending on the configuration\nfunction numberFactory(name, value) {\n  var dependencies = ['config', 'BigNumber'];\n  return factory(name, dependencies, _ref2 => {\n    var {\n      config,\n      BigNumber\n    } = _ref2;\n    return config.number === 'BigNumber' ? new BigNumber(value) : value;\n  });\n}","map":{"version":3,"names":["factory","createSpeedOfLight","unitFactory","createGravitationConstant","createPlanckConstant","createReducedPlanckConstant","createMagneticConstant","createElectricConstant","createVacuumImpedance","createCoulomb","createElementaryCharge","createBohrMagneton","createConductanceQuantum","createInverseConductanceQuantum","createMagneticFluxQuantum","createNuclearMagneton","createKlitzing","createJosephson","createBohrRadius","createClassicalElectronRadius","createElectronMass","createFermiCoupling","createFineStructure","numberFactory","createHartreeEnergy","createProtonMass","createDeuteronMass","createNeutronMass","createQuantumOfCirculation","createRydberg","createThomsonCrossSection","createWeakMixingAngle","createEfimovFactor","createAtomicMass","createAvogadro","createBoltzmann","createFaraday","createFirstRadiation","createLoschmidt","createGasConstant","createMolarPlanckConstant","createMolarVolume","createSackurTetrode","createSecondRadiation","createStefanBoltzmann","createWienDisplacement","createMolarMass","createMolarMassC12","createGravity","createPlanckLength","createPlanckMass","createPlanckTime","createPlanckCharge","createPlanckTemperature","name","valueStr","unitStr","dependencies","_ref","config","Unit","BigNumber","value","number","parseFloat","unit","fixPrefix","_ref2"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/type/unit/physicalConstants.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\n\n// Source: https://en.wikipedia.org/wiki/Physical_constant\n\n// Universal constants\nexport var createSpeedOfLight = /* #__PURE__ */unitFactory('speedOfLight', '299792458', 'm s^-1');\nexport var createGravitationConstant = /* #__PURE__ */unitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');\nexport var createPlanckConstant = /* #__PURE__ */unitFactory('planckConstant', '6.62607015e-34', 'J s');\nexport var createReducedPlanckConstant = /* #__PURE__ */unitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s');\n\n// Electromagnetic constants\nexport var createMagneticConstant = /* #__PURE__ */unitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');\nexport var createElectricConstant = /* #__PURE__ */unitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');\nexport var createVacuumImpedance = /* #__PURE__ */unitFactory('vacuumImpedance', '376.730313667', 'ohm');\nexport var createCoulomb = /* #__PURE__ */unitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');\nexport var createElementaryCharge = /* #__PURE__ */unitFactory('elementaryCharge', '1.602176634e-19', 'C');\nexport var createBohrMagneton = /* #__PURE__ */unitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');\nexport var createConductanceQuantum = /* #__PURE__ */unitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');\nexport var createInverseConductanceQuantum = /* #__PURE__ */unitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');\nexport var createMagneticFluxQuantum = /* #__PURE__ */unitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');\nexport var createNuclearMagneton = /* #__PURE__ */unitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');\nexport var createKlitzing = /* #__PURE__ */unitFactory('klitzing', '25812.807459304513', 'ohm');\nexport var createJosephson = /* #__PURE__ */unitFactory('josephson', '4.835978484169836e14 Hz V', 'Hz V^-1'); // TODO: support for Hz needed\n\n// Atomic and nuclear constants\nexport var createBohrRadius = /* #__PURE__ */unitFactory('bohrRadius', '5.29177210903e-11', 'm');\nexport var createClassicalElectronRadius = /* #__PURE__ */unitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');\nexport var createElectronMass = /* #__PURE__ */unitFactory('electronMass', '9.1093837015e-31', 'kg');\nexport var createFermiCoupling = /* #__PURE__ */unitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');\nexport var createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);\nexport var createHartreeEnergy = /* #__PURE__ */unitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');\nexport var createProtonMass = /* #__PURE__ */unitFactory('protonMass', '1.67262192369e-27', 'kg');\nexport var createDeuteronMass = /* #__PURE__ */unitFactory('deuteronMass', '3.3435830926e-27', 'kg');\nexport var createNeutronMass = /* #__PURE__ */unitFactory('neutronMass', '1.6749271613e-27', 'kg');\nexport var createQuantumOfCirculation = /* #__PURE__ */unitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');\nexport var createRydberg = /* #__PURE__ */unitFactory('rydberg', '10973731.568160', 'm^-1');\nexport var createThomsonCrossSection = /* #__PURE__ */unitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');\nexport var createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);\nexport var createEfimovFactor = numberFactory('efimovFactor', 22.7);\n\n// Physico-chemical constants\nexport var createAtomicMass = /* #__PURE__ */unitFactory('atomicMass', '1.66053906660e-27', 'kg');\nexport var createAvogadro = /* #__PURE__ */unitFactory('avogadro', '6.02214076e23', 'mol^-1');\nexport var createBoltzmann = /* #__PURE__ */unitFactory('boltzmann', '1.380649e-23', 'J K^-1');\nexport var createFaraday = /* #__PURE__ */unitFactory('faraday', '96485.33212331001', 'C mol^-1');\nexport var createFirstRadiation = /* #__PURE__ */unitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2');\n// export const createSpectralRadiance = /* #__PURE__ */ unitFactory('spectralRadiance', '1.1910429723971881e-16', 'W m^2 sr^-1') // TODO spectralRadiance\nexport var createLoschmidt = /* #__PURE__ */unitFactory('loschmidt', '2.686780111798444e25', 'm^-3');\nexport var createGasConstant = /* #__PURE__ */unitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');\nexport var createMolarPlanckConstant = /* #__PURE__ */unitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');\nexport var createMolarVolume = /* #__PURE__ */unitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');\nexport var createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);\nexport var createSecondRadiation = /* #__PURE__ */unitFactory('secondRadiation', '0.014387768775039337', 'm K');\nexport var createStefanBoltzmann = /* #__PURE__ */unitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');\nexport var createWienDisplacement = /* #__PURE__ */unitFactory('wienDisplacement', '2.897771955e-3', 'm K');\n\n// Adopted values\nexport var createMolarMass = /* #__PURE__ */unitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');\nexport var createMolarMassC12 = /* #__PURE__ */unitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');\nexport var createGravity = /* #__PURE__ */unitFactory('gravity', '9.80665', 'm s^-2');\n// atm is defined in Unit.js\n\n// Natural units\nexport var createPlanckLength = /* #__PURE__ */unitFactory('planckLength', '1.616255e-35', 'm');\nexport var createPlanckMass = /* #__PURE__ */unitFactory('planckMass', '2.176435e-8', 'kg');\nexport var createPlanckTime = /* #__PURE__ */unitFactory('planckTime', '5.391245e-44', 's');\nexport var createPlanckCharge = /* #__PURE__ */unitFactory('planckCharge', '1.87554603778e-18', 'C');\nexport var createPlanckTemperature = /* #__PURE__ */unitFactory('planckTemperature', '1.416785e+32', 'K');\n\n// helper function to create a factory function which creates a physical constant,\n// a Unit with either a number value or a BigNumber value depending on the configuration\nfunction unitFactory(name, valueStr, unitStr) {\n  var dependencies = ['config', 'Unit', 'BigNumber'];\n  return factory(name, dependencies, _ref => {\n    var {\n      config,\n      Unit,\n      BigNumber\n    } = _ref;\n    // Note that we can parse into number or BigNumber.\n    // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values\n    // Therefore we dont use Unit.parse()\n    var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);\n    var unit = new Unit(value, unitStr);\n    unit.fixPrefix = true;\n    return unit;\n  });\n}\n\n// helper function to create a factory function which creates a numeric constant,\n// either a number or BigNumber depending on the configuration\nfunction numberFactory(name, value) {\n  var dependencies = ['config', 'BigNumber'];\n  return factory(name, dependencies, _ref2 => {\n    var {\n      config,\n      BigNumber\n    } = _ref2;\n    return config.number === 'BigNumber' ? new BigNumber(value) : value;\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}