{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'catalan';\nvar dependencies = ['typed', 'addScalar', 'divideScalar', 'multiplyScalar', 'combinations', 'isNegative', 'isInteger'];\nexport var createCatalan = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    divideScalar,\n    multiplyScalar,\n    combinations,\n    isNegative,\n    isInteger\n  } = _ref;\n  /**\n   * The Catalan Numbers enumerate combinatorial structures of many different types.\n   * catalan only takes integer arguments.\n   * The following condition must be enforced: n >= 0\n   *\n   * Syntax:\n   *\n   *   math.catalan(n)\n   *\n   * Examples:\n   *\n   *    math.catalan(3) // returns 5\n   *    math.catalan(8) // returns 1430\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    nth Catalan number\n   * @return {Number | BigNumber}     Cn(n)\n   */\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      if (!isInteger(n) || isNegative(n)) {\n        throw new TypeError('Non-negative integer value expected in function catalan');\n      }\n      return divideScalar(combinations(multiplyScalar(n, 2), n), addScalar(n, 1));\n    }\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createCatalan","_ref","typed","addScalar","divideScalar","multiplyScalar","combinations","isNegative","isInteger","numberBigNumber","n","TypeError"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/combinatorics/catalan.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'catalan';\nvar dependencies = ['typed', 'addScalar', 'divideScalar', 'multiplyScalar', 'combinations', 'isNegative', 'isInteger'];\nexport var createCatalan = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    divideScalar,\n    multiplyScalar,\n    combinations,\n    isNegative,\n    isInteger\n  } = _ref;\n  /**\n   * The Catalan Numbers enumerate combinatorial structures of many different types.\n   * catalan only takes integer arguments.\n   * The following condition must be enforced: n >= 0\n   *\n   * Syntax:\n   *\n   *   math.catalan(n)\n   *\n   * Examples:\n   *\n   *    math.catalan(3) // returns 5\n   *    math.catalan(8) // returns 1430\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    nth Catalan number\n   * @return {Number | BigNumber}     Cn(n)\n   */\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      if (!isInteger(n) || isNegative(n)) {\n        throw new TypeError('Non-negative integer value expected in function catalan');\n      }\n      return divideScalar(combinations(multiplyScalar(n, 2), n), addScalar(n, 1));\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,gBAAgB,EAAE,cAAc,EAAE,YAAY,EAAE,WAAW,CAAC;AACtH,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC5E,IAAI;IACFC,KAAK;IACLC,SAAS;IACTC,YAAY;IACZC,cAAc;IACdC,YAAY;IACZC,UAAU;IACVC;EACF,CAAC,GAAGP,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,oBAAoB,EAAE,SAASW,eAAeA,CAACC,CAAC,EAAE;MAChD,IAAI,CAACF,SAAS,CAACE,CAAC,CAAC,IAAIH,UAAU,CAACG,CAAC,CAAC,EAAE;QAClC,MAAM,IAAIC,SAAS,CAAC,yDAAyD,CAAC;MAChF;MACA,OAAOP,YAAY,CAACE,YAAY,CAACD,cAAc,CAACK,CAAC,EAAE,CAAC,CAAC,EAAEA,CAAC,CAAC,EAAEP,SAAS,CAACO,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7E;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}