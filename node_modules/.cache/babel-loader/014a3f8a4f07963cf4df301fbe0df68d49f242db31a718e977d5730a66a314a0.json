{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'norm';\nvar dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix', 'ctranspose', 'eigs'];\nexport var createNorm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    pow,\n    conj,\n    sqrt,\n    multiply,\n    equalScalar,\n    larger,\n    smaller,\n    matrix,\n    ctranspose,\n    eigs\n  } = _ref;\n  /**\n   * Calculate the norm of a number, vector or matrix.\n   *\n   * The second parameter p is optional. If not provided, it defaults to 2.\n   *\n   * Syntax:\n   *\n   *    math.norm(x)\n   *    math.norm(x, p)\n   *\n   * Examples:\n   *\n   *    math.abs(-3.5)                         // returns 3.5\n   *    math.norm(-3.5)                        // returns 3.5\n   *\n   *    math.norm(math.complex(3, -4))         // returns 5\n   *\n   *    math.norm([1, 2, -3], Infinity)        // returns 3\n   *    math.norm([1, 2, -3], -Infinity)       // returns 1\n   *\n   *    math.norm([3, 4], 2)                   // returns 5\n   *\n   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7\n   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661\n   *\n   * See also:\n   *\n   *    abs, hypot\n   *\n   * @param  {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the norm\n   * @param  {number | BigNumber | string} [p=2]\n   *            Vector space.\n   *            Supported numbers include Infinity and -Infinity.\n   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n   * @return {number | BigNumber} the p-norm\n   */\n  return typed(name, {\n    number: Math.abs,\n    Complex: function Complex(x) {\n      return x.abs();\n    },\n    BigNumber: function BigNumber(x) {\n      // norm(x) = abs(x)\n      return x.abs();\n    },\n    boolean: function boolean(x) {\n      // norm(x) = abs(x)\n      return Math.abs(x);\n    },\n    Array: function Array(x) {\n      return _norm(matrix(x), 2);\n    },\n    Matrix: function Matrix(x) {\n      return _norm(x, 2);\n    },\n    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {\n      return _norm(matrix(x), p);\n    },\n    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {\n      return _norm(x, p);\n    }\n  });\n\n  /**\n   * Calculate the plus infinity norm for a vector\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _vectorNormPlusInfinity(x) {\n    // norm(x, Infinity) = max(abs(x))\n    var pinf = 0;\n    // skip zeros since abs(0) === 0\n    x.forEach(function (value) {\n      var v = abs(value);\n      if (larger(v, pinf)) {\n        pinf = v;\n      }\n    }, true);\n    return pinf;\n  }\n\n  /**\n   * Calculate the minus infinity norm for a vector\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _vectorNormMinusInfinity(x) {\n    // norm(x, -Infinity) = min(abs(x))\n    var ninf;\n    // skip zeros since abs(0) === 0\n    x.forEach(function (value) {\n      var v = abs(value);\n      if (!ninf || smaller(v, ninf)) {\n        ninf = v;\n      }\n    }, true);\n    return ninf || 0;\n  }\n\n  /**\n   * Calculate the norm for a vector\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _vectorNorm(x, p) {\n    // check p\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _vectorNormPlusInfinity(x);\n    }\n    if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\n      return _vectorNormMinusInfinity(x);\n    }\n    if (p === 'fro') {\n      return _norm(x, 2);\n    }\n    if (typeof p === 'number' && !isNaN(p)) {\n      // check p != 0\n      if (!equalScalar(p, 0)) {\n        // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\n        var n = 0;\n        // skip zeros since abs(0) === 0\n        x.forEach(function (value) {\n          n = add(pow(abs(value), p), n);\n        }, true);\n        return pow(n, 1 / p);\n      }\n      return Number.POSITIVE_INFINITY;\n    }\n    // invalid parameter value\n    throw new Error('Unsupported parameter value');\n  }\n\n  /**\n   * Calculate the Frobenius norm for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormFrobenius(x) {\n    // norm(x) = sqrt(sum(diag(x'x)))\n    var fro = 0;\n    x.forEach(function (value, index) {\n      fro = add(fro, multiply(value, conj(value)));\n    });\n    return abs(sqrt(fro));\n  }\n\n  /**\n   * Calculate the norm L1 for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormOne(x) {\n    // norm(x) = the largest column sum\n    var c = [];\n    // result\n    var maxc = 0;\n    // skip zeros since abs(0) == 0\n    x.forEach(function (value, index) {\n      var j = index[1];\n      var cj = add(c[j] || 0, abs(value));\n      if (larger(cj, maxc)) {\n        maxc = cj;\n      }\n      c[j] = cj;\n    }, true);\n    return maxc;\n  }\n\n  /**\n   * Calculate the norm L2 for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormTwo(x) {\n    // norm(x) = sqrt( max eigenvalue of A*.A)\n    var sizeX = x.size();\n    if (sizeX[0] !== sizeX[1]) {\n      throw new RangeError('Invalid matrix dimensions');\n    }\n    var tx = ctranspose(x);\n    var squaredX = multiply(tx, x);\n    var eigenVals = eigs(squaredX).values.toArray();\n    var rho = eigenVals[eigenVals.length - 1];\n    return abs(sqrt(rho));\n  }\n\n  /**\n   * Calculate the infinity norm for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormInfinity(x) {\n    // norm(x) = the largest row sum\n    var r = [];\n    // result\n    var maxr = 0;\n    // skip zeros since abs(0) == 0\n    x.forEach(function (value, index) {\n      var i = index[0];\n      var ri = add(r[i] || 0, abs(value));\n      if (larger(ri, maxr)) {\n        maxr = ri;\n      }\n      r[i] = ri;\n    }, true);\n    return maxr;\n  }\n\n  /**\n   * Calculate the norm for a 2D Matrix (M*N)\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNorm(x, p) {\n    // check p\n    if (p === 1) {\n      return _matrixNormOne(x);\n    }\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _matrixNormInfinity(x);\n    }\n    if (p === 'fro') {\n      return _matrixNormFrobenius(x);\n    }\n    if (p === 2) {\n      return _matrixNormTwo(x);\n    } // invalid parameter value\n\n    throw new Error('Unsupported parameter value ' + p);\n  }\n\n  /**\n   * Calculate the norm for an array\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _norm(x, p) {\n    // size\n    var sizeX = x.size();\n\n    // check if it is a vector\n    if (sizeX.length === 1) {\n      return _vectorNorm(x, p);\n    }\n    // MxN matrix\n    if (sizeX.length === 2) {\n      if (sizeX[0] && sizeX[1]) {\n        return _matrixNorm(x, p);\n      } else {\n        throw new RangeError('Invalid matrix dimensions');\n      }\n    }\n  }\n});","map":{"version":3,"names":["factory","name","dependencies","createNorm","_ref","typed","abs","add","pow","conj","sqrt","multiply","equalScalar","larger","smaller","matrix","ctranspose","eigs","number","Math","Complex","x","BigNumber","boolean","Array","_norm","Matrix","ArrayNumberBigNumberString","p","MatrixNumberBigNumberString","_vectorNormPlusInfinity","pinf","forEach","value","v","_vectorNormMinusInfinity","ninf","_vectorNorm","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","isNaN","n","Error","_matrixNormFrobenius","fro","index","_matrixNormOne","c","maxc","j","cj","_matrixNormTwo","sizeX","size","RangeError","tx","squaredX","eigenVals","values","toArray","rho","length","_matrixNormInfinity","r","maxr","i","ri","_matrixNorm"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/arithmetic/norm.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'norm';\nvar dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix', 'ctranspose', 'eigs'];\nexport var createNorm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    pow,\n    conj,\n    sqrt,\n    multiply,\n    equalScalar,\n    larger,\n    smaller,\n    matrix,\n    ctranspose,\n    eigs\n  } = _ref;\n  /**\n   * Calculate the norm of a number, vector or matrix.\n   *\n   * The second parameter p is optional. If not provided, it defaults to 2.\n   *\n   * Syntax:\n   *\n   *    math.norm(x)\n   *    math.norm(x, p)\n   *\n   * Examples:\n   *\n   *    math.abs(-3.5)                         // returns 3.5\n   *    math.norm(-3.5)                        // returns 3.5\n   *\n   *    math.norm(math.complex(3, -4))         // returns 5\n   *\n   *    math.norm([1, 2, -3], Infinity)        // returns 3\n   *    math.norm([1, 2, -3], -Infinity)       // returns 1\n   *\n   *    math.norm([3, 4], 2)                   // returns 5\n   *\n   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7\n   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661\n   *\n   * See also:\n   *\n   *    abs, hypot\n   *\n   * @param  {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the norm\n   * @param  {number | BigNumber | string} [p=2]\n   *            Vector space.\n   *            Supported numbers include Infinity and -Infinity.\n   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n   * @return {number | BigNumber} the p-norm\n   */\n  return typed(name, {\n    number: Math.abs,\n    Complex: function Complex(x) {\n      return x.abs();\n    },\n    BigNumber: function BigNumber(x) {\n      // norm(x) = abs(x)\n      return x.abs();\n    },\n    boolean: function boolean(x) {\n      // norm(x) = abs(x)\n      return Math.abs(x);\n    },\n    Array: function Array(x) {\n      return _norm(matrix(x), 2);\n    },\n    Matrix: function Matrix(x) {\n      return _norm(x, 2);\n    },\n    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {\n      return _norm(matrix(x), p);\n    },\n    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {\n      return _norm(x, p);\n    }\n  });\n\n  /**\n   * Calculate the plus infinity norm for a vector\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _vectorNormPlusInfinity(x) {\n    // norm(x, Infinity) = max(abs(x))\n    var pinf = 0;\n    // skip zeros since abs(0) === 0\n    x.forEach(function (value) {\n      var v = abs(value);\n      if (larger(v, pinf)) {\n        pinf = v;\n      }\n    }, true);\n    return pinf;\n  }\n\n  /**\n   * Calculate the minus infinity norm for a vector\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _vectorNormMinusInfinity(x) {\n    // norm(x, -Infinity) = min(abs(x))\n    var ninf;\n    // skip zeros since abs(0) === 0\n    x.forEach(function (value) {\n      var v = abs(value);\n      if (!ninf || smaller(v, ninf)) {\n        ninf = v;\n      }\n    }, true);\n    return ninf || 0;\n  }\n\n  /**\n   * Calculate the norm for a vector\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _vectorNorm(x, p) {\n    // check p\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _vectorNormPlusInfinity(x);\n    }\n    if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\n      return _vectorNormMinusInfinity(x);\n    }\n    if (p === 'fro') {\n      return _norm(x, 2);\n    }\n    if (typeof p === 'number' && !isNaN(p)) {\n      // check p != 0\n      if (!equalScalar(p, 0)) {\n        // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\n        var n = 0;\n        // skip zeros since abs(0) === 0\n        x.forEach(function (value) {\n          n = add(pow(abs(value), p), n);\n        }, true);\n        return pow(n, 1 / p);\n      }\n      return Number.POSITIVE_INFINITY;\n    }\n    // invalid parameter value\n    throw new Error('Unsupported parameter value');\n  }\n\n  /**\n   * Calculate the Frobenius norm for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormFrobenius(x) {\n    // norm(x) = sqrt(sum(diag(x'x)))\n    var fro = 0;\n    x.forEach(function (value, index) {\n      fro = add(fro, multiply(value, conj(value)));\n    });\n    return abs(sqrt(fro));\n  }\n\n  /**\n   * Calculate the norm L1 for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormOne(x) {\n    // norm(x) = the largest column sum\n    var c = [];\n    // result\n    var maxc = 0;\n    // skip zeros since abs(0) == 0\n    x.forEach(function (value, index) {\n      var j = index[1];\n      var cj = add(c[j] || 0, abs(value));\n      if (larger(cj, maxc)) {\n        maxc = cj;\n      }\n      c[j] = cj;\n    }, true);\n    return maxc;\n  }\n\n  /**\n   * Calculate the norm L2 for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormTwo(x) {\n    // norm(x) = sqrt( max eigenvalue of A*.A)\n    var sizeX = x.size();\n    if (sizeX[0] !== sizeX[1]) {\n      throw new RangeError('Invalid matrix dimensions');\n    }\n    var tx = ctranspose(x);\n    var squaredX = multiply(tx, x);\n    var eigenVals = eigs(squaredX).values.toArray();\n    var rho = eigenVals[eigenVals.length - 1];\n    return abs(sqrt(rho));\n  }\n\n  /**\n   * Calculate the infinity norm for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormInfinity(x) {\n    // norm(x) = the largest row sum\n    var r = [];\n    // result\n    var maxr = 0;\n    // skip zeros since abs(0) == 0\n    x.forEach(function (value, index) {\n      var i = index[0];\n      var ri = add(r[i] || 0, abs(value));\n      if (larger(ri, maxr)) {\n        maxr = ri;\n      }\n      r[i] = ri;\n    }, true);\n    return maxr;\n  }\n\n  /**\n   * Calculate the norm for a 2D Matrix (M*N)\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNorm(x, p) {\n    // check p\n    if (p === 1) {\n      return _matrixNormOne(x);\n    }\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _matrixNormInfinity(x);\n    }\n    if (p === 'fro') {\n      return _matrixNormFrobenius(x);\n    }\n    if (p === 2) {\n      return _matrixNormTwo(x);\n    } // invalid parameter value\n\n    throw new Error('Unsupported parameter value ' + p);\n  }\n\n  /**\n   * Calculate the norm for an array\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _norm(x, p) {\n    // size\n    var sizeX = x.size();\n\n    // check if it is a vector\n    if (sizeX.length === 1) {\n      return _vectorNorm(x, p);\n    }\n    // MxN matrix\n    if (sizeX.length === 2) {\n      if (sizeX[0] && sizeX[1]) {\n        return _matrixNorm(x, p);\n      } else {\n        throw new RangeError('Invalid matrix dimensions');\n      }\n    }\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}