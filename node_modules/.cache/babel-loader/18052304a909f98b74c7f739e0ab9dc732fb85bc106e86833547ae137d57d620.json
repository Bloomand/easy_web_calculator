{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nimport { assignFactory } from './utils/assign.js';\nimport { getPrecedence } from '../operators.js';\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix',\n// FIXME: should not be needed at all, should be handled by subset\n'Node'];\nexport var createAssignmentNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    matrix,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n  var assign = assignFactory({\n    subset,\n    matrix\n  });\n\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @param {string} implicit\n   * @private\n   */\n  function needParenthesis(node, parenthesis, implicit) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n    var precedence = getPrecedence(node, parenthesis, implicit);\n    var exprPrecedence = getPrecedence(node.value, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  class AssignmentNode extends Node {\n    /**\n     * @constructor AssignmentNode\n     * @extends {Node}\n     *\n     * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n     * replace a subset of a matrix like `A[2,2]=42`.\n     *\n     * Syntax:\n     *\n     *     new AssignmentNode(symbol, value)\n     *     new AssignmentNode(object, index, value)\n     *\n     * Usage:\n     *\n     *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))  // a=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode('b'),\n     *                       new ConstantNode(2))   // a.b=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode(1, 2),\n     *                       new ConstantNode(3))  // a[1,2]=3\n     *\n     * @param {SymbolNode | AccessorNode} object\n     *     Object on which to assign a value\n     * @param {IndexNode} [index=null]\n     *     Index, property name or matrix index. Optional. If not provided\n     *     and `object` is a SymbolNode, the property is assigned to the\n     *     global scope.\n     * @param {Node} value\n     *     The value to be assigned\n     */\n    constructor(object, index, value) {\n      super();\n      this.object = object;\n      this.index = value ? index : null;\n      this.value = value || index;\n\n      // validate input\n      if (!isSymbolNode(object) && !isAccessorNode(object)) {\n        throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n      }\n      if (isSymbolNode(object) && object.name === 'end') {\n        throw new Error('Cannot assign to symbol \"end\"');\n      }\n      if (this.index && !isIndexNode(this.index)) {\n        // index is optional\n        throw new TypeError('IndexNode expected as \"index\"');\n      }\n      if (!isNode(this.value)) {\n        throw new TypeError('Node expected as \"value\"');\n      }\n    }\n\n    // class name for typing purposes:\n\n    // readonly property name\n    get name() {\n      if (this.index) {\n        return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n      } else {\n        return this.object.name || '';\n      }\n    }\n    get type() {\n      return name;\n    }\n    get isAssignmentNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var evalObject = this.object._compile(math, argNames);\n      var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n      var evalValue = this.value._compile(math, argNames);\n      var name = this.object.name;\n      if (!this.index) {\n        // apply a variable to the scope, for example `a=2`\n        if (!isSymbolNode(this.object)) {\n          throw new TypeError('SymbolNode expected as object');\n        }\n        return function evalAssignmentNode(scope, args, context) {\n          var value = evalValue(scope, args, context);\n          scope.set(name, value);\n          return value;\n        };\n      } else if (this.index.isObjectProperty()) {\n        // apply an object property for example `a.b=2`\n        var prop = this.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          var value = evalValue(scope, args, context);\n          setSafeProperty(object, prop, value);\n          return value;\n        };\n      } else if (isSymbolNode(this.object)) {\n        // update a matrix subset, for example `a[2]=3`\n        return function evalAssignmentNode(scope, args, context) {\n          var childObject = evalObject(scope, args, context);\n          var value = evalValue(scope, args, context);\n          // Important:  we pass childObject instead of context:\n          var index = evalIndex(scope, args, childObject);\n          scope.set(name, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // isAccessorNode(node.object) === true\n        // update a matrix subset, for example `a.b[2]=3`\n\n        // we will not use the compile function of the AccessorNode, but\n        // compile it ourselves here as we need the parent object of the\n        // AccessorNode:\n        // wee need to apply the updated object to parent object\n        var evalParentObject = this.object.object._compile(math, argNames);\n        if (this.object.index.isObjectProperty()) {\n          var parentProp = this.object.index.getObjectProperty();\n          return function evalAssignmentNode(scope, args, context) {\n            var parent = evalParentObject(scope, args, context);\n            var childObject = getSafeProperty(parent, parentProp);\n            // Important: we pass childObject instead of context:\n            var index = evalIndex(scope, args, childObject);\n            var value = evalValue(scope, args, context);\n            setSafeProperty(parent, parentProp, assign(childObject, index, value));\n            return value;\n          };\n        } else {\n          // if some parameters use the 'end' parameter, we need to calculate\n          // the size\n          var evalParentIndex = this.object.index._compile(math, argNames);\n          return function evalAssignmentNode(scope, args, context) {\n            var parent = evalParentObject(scope, args, context);\n            // Important: we pass parent instead of context:\n            var parentIndex = evalParentIndex(scope, args, parent);\n            var childObject = access(parent, parentIndex);\n            // Important:  we pass childObject instead of context\n            var index = evalIndex(scope, args, childObject);\n            var value = evalValue(scope, args, context);\n            assign(parent, parentIndex, assign(childObject, index, value));\n            return value;\n          };\n        }\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.object, 'object', this);\n      if (this.index) {\n        callback(this.index, 'index', this);\n      }\n      callback(this.value, 'value', this);\n    }\n\n    /**\n     * Create a new AssignmentNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {AssignmentNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var object = this._ifNode(callback(this.object, 'object', this));\n      var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n      var value = this._ifNode(callback(this.value, 'value', this));\n      return new AssignmentNode(object, index, value);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {AssignmentNode}\n     */\n    clone() {\n      return new AssignmentNode(this.object, this.index, this.value);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string}\n     */\n    _toString(options) {\n      var object = this.object.toString(options);\n      var index = this.index ? this.index.toString(options) : '';\n      var value = this.value.toString(options);\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = '(' + value + ')';\n      }\n      return object + index + ' = ' + value;\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        object: this.object,\n        index: this.index,\n        value: this.value\n      };\n    }\n\n    /**\n     * Instantiate an AssignmentNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n     *     where mathjs is optional\n     * @returns {AssignmentNode}\n     */\n    static fromJSON(json) {\n      return new AssignmentNode(json.object, json.index, json.value);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string}\n     */\n    toHTML(options) {\n      var object = this.object.toHTML(options);\n      var index = this.index ? this.index.toHTML(options) : '';\n      var value = this.value.toHTML(options);\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n      }\n      return object + index + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string}\n     */\n    _toTex(options) {\n      var object = this.object.toTex(options);\n      var index = this.index ? this.index.toTex(options) : '';\n      var value = this.value.toTex(options);\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = \"\\\\left(\".concat(value, \"\\\\right)\");\n      }\n      return object + index + ':=' + value;\n    }\n  }\n  _defineProperty(AssignmentNode, \"name\", name);\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isAccessorNode","isIndexNode","isNode","isSymbolNode","getSafeProperty","setSafeProperty","factory","accessFactory","assignFactory","getPrecedence","name","dependencies","createAssignmentNode","_ref","subset","matrix","Node","access","assign","needParenthesis","node","parenthesis","implicit","precedence","exprPrecedence","value","AssignmentNode","constructor","object","index","TypeError","Error","isObjectProperty","getObjectProperty","type","isAssignmentNode","_compile","math","argNames","evalObject","evalIndex","evalValue","evalAssignmentNode","scope","args","context","set","prop","childObject","evalParentObject","parentProp","parent","evalParentIndex","parentIndex","forEach","callback","map","_ifNode","clone","_toString","options","toString","toJSON","mathjs","fromJSON","json","toHTML","_toTex","toTex","concat","isClass"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/expression/node/AssignmentNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nimport { assignFactory } from './utils/assign.js';\nimport { getPrecedence } from '../operators.js';\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix',\n// FIXME: should not be needed at all, should be handled by subset\n'Node'];\nexport var createAssignmentNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    matrix,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n  var assign = assignFactory({\n    subset,\n    matrix\n  });\n\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @param {string} implicit\n   * @private\n   */\n  function needParenthesis(node, parenthesis, implicit) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n    var precedence = getPrecedence(node, parenthesis, implicit);\n    var exprPrecedence = getPrecedence(node.value, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  class AssignmentNode extends Node {\n    /**\n     * @constructor AssignmentNode\n     * @extends {Node}\n     *\n     * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n     * replace a subset of a matrix like `A[2,2]=42`.\n     *\n     * Syntax:\n     *\n     *     new AssignmentNode(symbol, value)\n     *     new AssignmentNode(object, index, value)\n     *\n     * Usage:\n     *\n     *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))  // a=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode('b'),\n     *                       new ConstantNode(2))   // a.b=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode(1, 2),\n     *                       new ConstantNode(3))  // a[1,2]=3\n     *\n     * @param {SymbolNode | AccessorNode} object\n     *     Object on which to assign a value\n     * @param {IndexNode} [index=null]\n     *     Index, property name or matrix index. Optional. If not provided\n     *     and `object` is a SymbolNode, the property is assigned to the\n     *     global scope.\n     * @param {Node} value\n     *     The value to be assigned\n     */\n    constructor(object, index, value) {\n      super();\n      this.object = object;\n      this.index = value ? index : null;\n      this.value = value || index;\n\n      // validate input\n      if (!isSymbolNode(object) && !isAccessorNode(object)) {\n        throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n      }\n      if (isSymbolNode(object) && object.name === 'end') {\n        throw new Error('Cannot assign to symbol \"end\"');\n      }\n      if (this.index && !isIndexNode(this.index)) {\n        // index is optional\n        throw new TypeError('IndexNode expected as \"index\"');\n      }\n      if (!isNode(this.value)) {\n        throw new TypeError('Node expected as \"value\"');\n      }\n    }\n\n    // class name for typing purposes:\n\n    // readonly property name\n    get name() {\n      if (this.index) {\n        return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n      } else {\n        return this.object.name || '';\n      }\n    }\n    get type() {\n      return name;\n    }\n    get isAssignmentNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var evalObject = this.object._compile(math, argNames);\n      var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n      var evalValue = this.value._compile(math, argNames);\n      var name = this.object.name;\n      if (!this.index) {\n        // apply a variable to the scope, for example `a=2`\n        if (!isSymbolNode(this.object)) {\n          throw new TypeError('SymbolNode expected as object');\n        }\n        return function evalAssignmentNode(scope, args, context) {\n          var value = evalValue(scope, args, context);\n          scope.set(name, value);\n          return value;\n        };\n      } else if (this.index.isObjectProperty()) {\n        // apply an object property for example `a.b=2`\n        var prop = this.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          var value = evalValue(scope, args, context);\n          setSafeProperty(object, prop, value);\n          return value;\n        };\n      } else if (isSymbolNode(this.object)) {\n        // update a matrix subset, for example `a[2]=3`\n        return function evalAssignmentNode(scope, args, context) {\n          var childObject = evalObject(scope, args, context);\n          var value = evalValue(scope, args, context);\n          // Important:  we pass childObject instead of context:\n          var index = evalIndex(scope, args, childObject);\n          scope.set(name, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // isAccessorNode(node.object) === true\n        // update a matrix subset, for example `a.b[2]=3`\n\n        // we will not use the compile function of the AccessorNode, but\n        // compile it ourselves here as we need the parent object of the\n        // AccessorNode:\n        // wee need to apply the updated object to parent object\n        var evalParentObject = this.object.object._compile(math, argNames);\n        if (this.object.index.isObjectProperty()) {\n          var parentProp = this.object.index.getObjectProperty();\n          return function evalAssignmentNode(scope, args, context) {\n            var parent = evalParentObject(scope, args, context);\n            var childObject = getSafeProperty(parent, parentProp);\n            // Important: we pass childObject instead of context:\n            var index = evalIndex(scope, args, childObject);\n            var value = evalValue(scope, args, context);\n            setSafeProperty(parent, parentProp, assign(childObject, index, value));\n            return value;\n          };\n        } else {\n          // if some parameters use the 'end' parameter, we need to calculate\n          // the size\n          var evalParentIndex = this.object.index._compile(math, argNames);\n          return function evalAssignmentNode(scope, args, context) {\n            var parent = evalParentObject(scope, args, context);\n            // Important: we pass parent instead of context:\n            var parentIndex = evalParentIndex(scope, args, parent);\n            var childObject = access(parent, parentIndex);\n            // Important:  we pass childObject instead of context\n            var index = evalIndex(scope, args, childObject);\n            var value = evalValue(scope, args, context);\n            assign(parent, parentIndex, assign(childObject, index, value));\n            return value;\n          };\n        }\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.object, 'object', this);\n      if (this.index) {\n        callback(this.index, 'index', this);\n      }\n      callback(this.value, 'value', this);\n    }\n\n    /**\n     * Create a new AssignmentNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {AssignmentNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var object = this._ifNode(callback(this.object, 'object', this));\n      var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n      var value = this._ifNode(callback(this.value, 'value', this));\n      return new AssignmentNode(object, index, value);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {AssignmentNode}\n     */\n    clone() {\n      return new AssignmentNode(this.object, this.index, this.value);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string}\n     */\n    _toString(options) {\n      var object = this.object.toString(options);\n      var index = this.index ? this.index.toString(options) : '';\n      var value = this.value.toString(options);\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = '(' + value + ')';\n      }\n      return object + index + ' = ' + value;\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        object: this.object,\n        index: this.index,\n        value: this.value\n      };\n    }\n\n    /**\n     * Instantiate an AssignmentNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n     *     where mathjs is optional\n     * @returns {AssignmentNode}\n     */\n    static fromJSON(json) {\n      return new AssignmentNode(json.object, json.index, json.value);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string}\n     */\n    toHTML(options) {\n      var object = this.object.toHTML(options);\n      var index = this.index ? this.index.toHTML(options) : '';\n      var value = this.value.toHTML(options);\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n      }\n      return object + index + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string}\n     */\n    _toTex(options) {\n      var object = this.object.toTex(options);\n      var index = this.index ? this.index.toTex(options) : '';\n      var value = this.value.toTex(options);\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = \"\\\\left(\".concat(value, \"\\\\right)\");\n      }\n      return object + index + ':=' + value;\n    }\n  }\n  _defineProperty(AssignmentNode, \"name\", name);\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}