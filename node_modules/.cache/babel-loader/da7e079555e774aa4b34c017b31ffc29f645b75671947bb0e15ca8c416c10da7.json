{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'smaller';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat'];\nexport var createSmaller = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is smaller than y.\n   *\n   * The function returns true when x is smaller than y and the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smaller(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(2, 3)            // returns true\n   *    math.smaller(5, 2 * 2)        // returns false\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.smaller(a, b)            // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n  return typed(name, createSmallerNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x < y,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': (x, y) => x.compare(y) === -1,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createSmallerNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x < y && !nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","map":{"version":3,"names":["nearlyEqual","bigNearlyEqual","factory","createMatAlgo03xDSf","createMatAlgo07xSSf","createMatAlgo12xSfs","createMatrixAlgorithmSuite","createCompareUnits","name","dependencies","createSmaller","_ref","typed","config","matrix","DenseMatrix","concat","matAlgo03xDSf","matAlgo07xSSf","matAlgo12xSfs","matrixAlgorithmSuite","compareUnits","createSmallerNumber","boolean, boolean","x","y","BigNumberBigNumber","lt","epsilon","Fraction, Fraction","compare","ComplexComplex","TypeError","SS","DS","Ss","_ref2","numberNumber"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/relational/smaller.js"],"sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'smaller';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat'];\nexport var createSmaller = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is smaller than y.\n   *\n   * The function returns true when x is smaller than y and the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smaller(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(2, 3)            // returns true\n   *    math.smaller(5, 2 * 2)        // returns false\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.smaller(a, b)            // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n  return typed(name, createSmallerNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x < y,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': (x, y) => x.compare(y) === -1,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createSmallerNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x < y && !nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}