{"ast":null,"code":"import { isArray, isMatrix, isString, typeOf } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ImmutableDenseMatrix';\nvar dependencies = ['smaller', 'DenseMatrix'];\nexport var createImmutableDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    smaller,\n    DenseMatrix\n  } = _ref;\n  function ImmutableDenseMatrix(data, datatype) {\n    if (!(this instanceof ImmutableDenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data) || isArray(data)) {\n      // use DenseMatrix implementation\n      var matrix = new DenseMatrix(data, datatype);\n      // internal structures\n      this._data = matrix._data;\n      this._size = matrix._size;\n      this._datatype = matrix._datatype;\n      this._min = null;\n      this._max = null;\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = data.datatype;\n      this._min = typeof data.min !== 'undefined' ? data.min : null;\n      this._max = typeof data.max !== 'undefined' ? data.max : null;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n      this._min = null;\n      this._max = null;\n    }\n  }\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\n\n  /**\n   * Attach type information\n   */\n  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';\n  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | ImmutableDenseMatrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  ImmutableDenseMatrix.prototype.subset = function (index) {\n    switch (arguments.length) {\n      case 1:\n        {\n          // use base implementation\n          var m = DenseMatrix.prototype.subset.call(this, index);\n          // check result is a matrix\n          if (isMatrix(m)) {\n            // return immutable matrix\n            return new ImmutableDenseMatrix({\n              data: m._data,\n              size: m._size,\n              datatype: m._datatype\n            });\n          }\n          return m;\n        }\n      // intentional fall through\n      case 2:\n      case 3:\n        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @param {Number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {ImmutableDenseMatrix} self\n   */\n  ImmutableDenseMatrix.prototype.set = function () {\n    throw new Error('Cannot invoke set on an Immutable Matrix instance');\n  };\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {Number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  ImmutableDenseMatrix.prototype.resize = function () {\n    throw new Error('Cannot invoke resize on an Immutable Matrix instance');\n  };\n\n  /**\n   * Disallows reshaping in favor of immutability.\n   *\n   * @throws {Error} Operation not allowed\n   */\n  ImmutableDenseMatrix.prototype.reshape = function () {\n    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');\n  };\n\n  /**\n   * Create a clone of the matrix\n   * @return {ImmutableDenseMatrix} clone\n   */\n  ImmutableDenseMatrix.prototype.clone = function () {\n    return new ImmutableDenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @returns {Object}\n   */\n  ImmutableDenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'ImmutableDenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {ImmutableDenseMatrix}\n   */\n  ImmutableDenseMatrix.fromJSON = function (json) {\n    return new ImmutableDenseMatrix(json);\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @param {Number} i       Matrix row index 1\n   * @param {Number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  ImmutableDenseMatrix.prototype.swapRows = function () {\n    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');\n  };\n\n  /**\n   * Calculate the minimum value in the set\n   * @return {Number | undefined} min\n   */\n  ImmutableDenseMatrix.prototype.min = function () {\n    // check min has been calculated before\n    if (this._min === null) {\n      // minimum\n      var m = null;\n      // compute min\n      this.forEach(function (v) {\n        if (m === null || smaller(v, m)) {\n          m = v;\n        }\n      });\n      this._min = m !== null ? m : undefined;\n    }\n    return this._min;\n  };\n\n  /**\n   * Calculate the maximum value in the set\n   * @return {Number | undefined} max\n   */\n  ImmutableDenseMatrix.prototype.max = function () {\n    // check max has been calculated before\n    if (this._max === null) {\n      // maximum\n      var m = null;\n      // compute max\n      this.forEach(function (v) {\n        if (m === null || smaller(m, v)) {\n          m = v;\n        }\n      });\n      this._max = m !== null ? m : undefined;\n    }\n    return this._max;\n  };\n  return ImmutableDenseMatrix;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["isArray","isMatrix","isString","typeOf","clone","factory","name","dependencies","createImmutableDenseMatrixClass","_ref","smaller","DenseMatrix","ImmutableDenseMatrix","data","datatype","SyntaxError","Error","matrix","_data","_size","_datatype","_min","_max","size","min","max","TypeError","prototype","type","isImmutableDenseMatrix","subset","index","arguments","length","m","call","set","resize","reshape","toJSON","mathjs","fromJSON","json","swapRows","forEach","v","undefined","isClass"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/type/matrix/ImmutableDenseMatrix.js"],"sourcesContent":["import { isArray, isMatrix, isString, typeOf } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ImmutableDenseMatrix';\nvar dependencies = ['smaller', 'DenseMatrix'];\nexport var createImmutableDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    smaller,\n    DenseMatrix\n  } = _ref;\n  function ImmutableDenseMatrix(data, datatype) {\n    if (!(this instanceof ImmutableDenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data) || isArray(data)) {\n      // use DenseMatrix implementation\n      var matrix = new DenseMatrix(data, datatype);\n      // internal structures\n      this._data = matrix._data;\n      this._size = matrix._size;\n      this._datatype = matrix._datatype;\n      this._min = null;\n      this._max = null;\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = data.datatype;\n      this._min = typeof data.min !== 'undefined' ? data.min : null;\n      this._max = typeof data.max !== 'undefined' ? data.max : null;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n      this._min = null;\n      this._max = null;\n    }\n  }\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\n\n  /**\n   * Attach type information\n   */\n  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';\n  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | ImmutableDenseMatrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  ImmutableDenseMatrix.prototype.subset = function (index) {\n    switch (arguments.length) {\n      case 1:\n        {\n          // use base implementation\n          var m = DenseMatrix.prototype.subset.call(this, index);\n          // check result is a matrix\n          if (isMatrix(m)) {\n            // return immutable matrix\n            return new ImmutableDenseMatrix({\n              data: m._data,\n              size: m._size,\n              datatype: m._datatype\n            });\n          }\n          return m;\n        }\n      // intentional fall through\n      case 2:\n      case 3:\n        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @param {Number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {ImmutableDenseMatrix} self\n   */\n  ImmutableDenseMatrix.prototype.set = function () {\n    throw new Error('Cannot invoke set on an Immutable Matrix instance');\n  };\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {Number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  ImmutableDenseMatrix.prototype.resize = function () {\n    throw new Error('Cannot invoke resize on an Immutable Matrix instance');\n  };\n\n  /**\n   * Disallows reshaping in favor of immutability.\n   *\n   * @throws {Error} Operation not allowed\n   */\n  ImmutableDenseMatrix.prototype.reshape = function () {\n    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');\n  };\n\n  /**\n   * Create a clone of the matrix\n   * @return {ImmutableDenseMatrix} clone\n   */\n  ImmutableDenseMatrix.prototype.clone = function () {\n    return new ImmutableDenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @returns {Object}\n   */\n  ImmutableDenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'ImmutableDenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {ImmutableDenseMatrix}\n   */\n  ImmutableDenseMatrix.fromJSON = function (json) {\n    return new ImmutableDenseMatrix(json);\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @param {Number} i       Matrix row index 1\n   * @param {Number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  ImmutableDenseMatrix.prototype.swapRows = function () {\n    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');\n  };\n\n  /**\n   * Calculate the minimum value in the set\n   * @return {Number | undefined} min\n   */\n  ImmutableDenseMatrix.prototype.min = function () {\n    // check min has been calculated before\n    if (this._min === null) {\n      // minimum\n      var m = null;\n      // compute min\n      this.forEach(function (v) {\n        if (m === null || smaller(v, m)) {\n          m = v;\n        }\n      });\n      this._min = m !== null ? m : undefined;\n    }\n    return this._min;\n  };\n\n  /**\n   * Calculate the maximum value in the set\n   * @return {Number | undefined} max\n   */\n  ImmutableDenseMatrix.prototype.max = function () {\n    // check max has been calculated before\n    if (this._max === null) {\n      // maximum\n      var m = null;\n      // compute max\n      this.forEach(function (v) {\n        if (m === null || smaller(m, v)) {\n          m = v;\n        }\n      });\n      this._max = m !== null ? m : undefined;\n    }\n    return this._max;\n  };\n  return ImmutableDenseMatrix;\n}, {\n  isClass: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}