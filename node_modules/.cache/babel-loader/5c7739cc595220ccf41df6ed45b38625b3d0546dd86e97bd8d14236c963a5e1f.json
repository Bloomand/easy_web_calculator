{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'invmod';\nvar dependencies = ['typed', 'config', 'BigNumber', 'xgcd', 'equal', 'smaller', 'mod', 'add', 'isInteger'];\nexport var createInvmod = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    BigNumber,\n    xgcd,\n    equal,\n    smaller,\n    mod,\n    add,\n    isInteger\n  } = _ref;\n  /**\n   * Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation `ax ≣ 1 (mod b)`\n   * See https://en.wikipedia.org/wiki/Modular_multiplicative_inverse.\n   *\n   * Syntax:\n   *\n   *    math.invmod(a, b)\n   *\n   * Examples:\n   *\n   *    math.invmod(8, 12)             // returns NaN\n   *    math.invmod(7, 13)             // returns 2\n   *    math.invmod(15151, 15122)      // returns 10429\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {number | BigNumber }  Returns an integer number\n   *                              where `invmod(a,b)*a ≣ 1 (mod b)`\n   */\n  return typed(name, {\n    'number, number': invmod,\n    'BigNumber, BigNumber': invmod\n  });\n  function invmod(a, b) {\n    if (!isInteger(a) || !isInteger(b)) throw new Error('Parameters in function invmod must be integer numbers');\n    a = mod(a, b);\n    if (equal(b, 0)) throw new Error('Divisor must be non zero');\n    var res = xgcd(a, b);\n    res = res.valueOf();\n    var [gcd, inv] = res;\n    if (!equal(gcd, BigNumber(1))) return NaN;\n    inv = mod(inv, b);\n    if (smaller(inv, BigNumber(0))) inv = add(inv, b);\n    return inv;\n  }\n});","map":{"version":3,"names":["factory","name","dependencies","createInvmod","_ref","typed","config","BigNumber","xgcd","equal","smaller","mod","add","isInteger","invmod","a","b","Error","res","valueOf","gcd","inv","NaN"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/arithmetic/invmod.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'invmod';\nvar dependencies = ['typed', 'config', 'BigNumber', 'xgcd', 'equal', 'smaller', 'mod', 'add', 'isInteger'];\nexport var createInvmod = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    BigNumber,\n    xgcd,\n    equal,\n    smaller,\n    mod,\n    add,\n    isInteger\n  } = _ref;\n  /**\n   * Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation `ax ≣ 1 (mod b)`\n   * See https://en.wikipedia.org/wiki/Modular_multiplicative_inverse.\n   *\n   * Syntax:\n   *\n   *    math.invmod(a, b)\n   *\n   * Examples:\n   *\n   *    math.invmod(8, 12)             // returns NaN\n   *    math.invmod(7, 13)             // returns 2\n   *    math.invmod(15151, 15122)      // returns 10429\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {number | BigNumber }  Returns an integer number\n   *                              where `invmod(a,b)*a ≣ 1 (mod b)`\n   */\n  return typed(name, {\n    'number, number': invmod,\n    'BigNumber, BigNumber': invmod\n  });\n  function invmod(a, b) {\n    if (!isInteger(a) || !isInteger(b)) throw new Error('Parameters in function invmod must be integer numbers');\n    a = mod(a, b);\n    if (equal(b, 0)) throw new Error('Divisor must be non zero');\n    var res = xgcd(a, b);\n    res = res.valueOf();\n    var [gcd, inv] = res;\n    if (!equal(gcd, BigNumber(1))) return NaN;\n    inv = mod(inv, b);\n    if (smaller(inv, BigNumber(0))) inv = add(inv, b);\n    return inv;\n  }\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,CAAC;AAC1G,OAAO,IAAIC,YAAY,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC3E,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,SAAS;IACTC,IAAI;IACJC,KAAK;IACLC,OAAO;IACPC,GAAG;IACHC,GAAG;IACHC;EACF,CAAC,GAAGT,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAEa,MAAM;IACxB,sBAAsB,EAAEA;EAC1B,CAAC,CAAC;EACF,SAASA,MAAMA,CAACC,CAAC,EAAEC,CAAC,EAAE;IACpB,IAAI,CAACH,SAAS,CAACE,CAAC,CAAC,IAAI,CAACF,SAAS,CAACG,CAAC,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;IAC5GF,CAAC,GAAGJ,GAAG,CAACI,CAAC,EAAEC,CAAC,CAAC;IACb,IAAIP,KAAK,CAACO,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC5D,IAAIC,GAAG,GAAGV,IAAI,CAACO,CAAC,EAAEC,CAAC,CAAC;IACpBE,GAAG,GAAGA,GAAG,CAACC,OAAO,EAAE;IACnB,IAAI,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGH,GAAG;IACpB,IAAI,CAACT,KAAK,CAACW,GAAG,EAAEb,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,OAAOe,GAAG;IACzCD,GAAG,GAAGV,GAAG,CAACU,GAAG,EAAEL,CAAC,CAAC;IACjB,IAAIN,OAAO,CAACW,GAAG,EAAEd,SAAS,CAAC,CAAC,CAAC,CAAC,EAAEc,GAAG,GAAGT,GAAG,CAACS,GAAG,EAAEL,CAAC,CAAC;IACjD,OAAOK,GAAG;EACZ;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}