{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'nthRoots';\nvar dependencies = ['config', 'typed', 'divideScalar', 'Complex'];\nexport var createNthRoots = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    divideScalar,\n    Complex\n  } = _ref;\n  /**\n   * Each function here returns a real multiple of i as a Complex value.\n   * @param  {number} val\n   * @return {Complex} val, i*val, -val or -i*val for index 0, 1, 2, 3\n   */\n  // This is used to fix float artifacts for zero-valued components.\n  var _calculateExactResult = [function realPos(val) {\n    return new Complex(val, 0);\n  }, function imagPos(val) {\n    return new Complex(0, val);\n  }, function realNeg(val) {\n    return new Complex(-val, 0);\n  }, function imagNeg(val) {\n    return new Complex(0, -val);\n  }];\n\n  /**\n   * Calculate the nth root of a Complex Number a using De Movire's Theorem.\n   * @param  {Complex} a\n   * @param  {number} root\n   * @return {Array} array of n Complex Roots\n   */\n  function _nthComplexRoots(a, root) {\n    if (root < 0) throw new Error('Root must be greater than zero');\n    if (root === 0) throw new Error('Root must be non-zero');\n    if (root % 1 !== 0) throw new Error('Root must be an integer');\n    if (a === 0 || a.abs() === 0) return [new Complex(0, 0)];\n    var aIsNumeric = typeof a === 'number';\n    var offset;\n    // determine the offset (argument of a)/(pi/2)\n    if (aIsNumeric || a.re === 0 || a.im === 0) {\n      if (aIsNumeric) {\n        offset = 2 * +(a < 0); // numeric value on the real axis\n      } else if (a.im === 0) {\n        offset = 2 * +(a.re < 0); // complex value on the real axis\n      } else {\n        offset = 2 * +(a.im < 0) + 1; // complex value on the imaginary axis\n      }\n    }\n\n    var arg = a.arg();\n    var abs = a.abs();\n    var roots = [];\n    var r = Math.pow(abs, 1 / root);\n    for (var k = 0; k < root; k++) {\n      var halfPiFactor = (offset + 4 * k) / root;\n      /**\n       * If (offset + 4*k)/root is an integral multiple of pi/2\n       * then we can produce a more exact result.\n       */\n      if (halfPiFactor === Math.round(halfPiFactor)) {\n        roots.push(_calculateExactResult[halfPiFactor % 4](r));\n        continue;\n      }\n      roots.push(new Complex({\n        r,\n        phi: (arg + 2 * Math.PI * k) / root\n      }));\n    }\n    return roots;\n  }\n\n  /**\n   * Calculate the nth roots of a value.\n   * An nth root of a positive real number A,\n   * is a positive real solution of the equation \"x^root = A\".\n   * This function returns an array of complex values.\n   *\n   * Syntax:\n   *\n   *    math.nthRoots(x)\n   *    math.nthRoots(x, root)\n   *\n   * Examples:\n   *\n   *    math.nthRoots(1)\n   *    // returns [\n   *    //   {re: 1, im: 0},\n   *    //   {re: -1, im: 0}\n   *    // ]\n   *    math.nthRoots(1, 3)\n   *    // returns [\n   *    //   { re: 1, im: 0 },\n   *    //   { re: -0.4999999999999998, im: 0.8660254037844387 },\n   *    //   { re: -0.5000000000000004, im: -0.8660254037844385 }\n   *    // ]\n   *\n   * See also:\n   *\n   *    nthRoot, pow, sqrt\n   *\n   * @param {number | BigNumber | Fraction | Complex} x Number to be rounded\n   * @param {number} [root=2] Optional root, default value is 2\n   * @return {number | BigNumber | Fraction | Complex} Returns the nth roots\n   */\n  return typed(name, {\n    Complex: function Complex(x) {\n      return _nthComplexRoots(x, 2);\n    },\n    'Complex, number': _nthComplexRoots\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createNthRoots","_ref","typed","config","divideScalar","Complex","_calculateExactResult","realPos","val","imagPos","realNeg","imagNeg","_nthComplexRoots","a","root","Error","abs","aIsNumeric","offset","re","im","arg","roots","r","Math","pow","k","halfPiFactor","round","push","phi","PI","x"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/arithmetic/nthRoots.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'nthRoots';\nvar dependencies = ['config', 'typed', 'divideScalar', 'Complex'];\nexport var createNthRoots = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    divideScalar,\n    Complex\n  } = _ref;\n  /**\n   * Each function here returns a real multiple of i as a Complex value.\n   * @param  {number} val\n   * @return {Complex} val, i*val, -val or -i*val for index 0, 1, 2, 3\n   */\n  // This is used to fix float artifacts for zero-valued components.\n  var _calculateExactResult = [function realPos(val) {\n    return new Complex(val, 0);\n  }, function imagPos(val) {\n    return new Complex(0, val);\n  }, function realNeg(val) {\n    return new Complex(-val, 0);\n  }, function imagNeg(val) {\n    return new Complex(0, -val);\n  }];\n\n  /**\n   * Calculate the nth root of a Complex Number a using De Movire's Theorem.\n   * @param  {Complex} a\n   * @param  {number} root\n   * @return {Array} array of n Complex Roots\n   */\n  function _nthComplexRoots(a, root) {\n    if (root < 0) throw new Error('Root must be greater than zero');\n    if (root === 0) throw new Error('Root must be non-zero');\n    if (root % 1 !== 0) throw new Error('Root must be an integer');\n    if (a === 0 || a.abs() === 0) return [new Complex(0, 0)];\n    var aIsNumeric = typeof a === 'number';\n    var offset;\n    // determine the offset (argument of a)/(pi/2)\n    if (aIsNumeric || a.re === 0 || a.im === 0) {\n      if (aIsNumeric) {\n        offset = 2 * +(a < 0); // numeric value on the real axis\n      } else if (a.im === 0) {\n        offset = 2 * +(a.re < 0); // complex value on the real axis\n      } else {\n        offset = 2 * +(a.im < 0) + 1; // complex value on the imaginary axis\n      }\n    }\n\n    var arg = a.arg();\n    var abs = a.abs();\n    var roots = [];\n    var r = Math.pow(abs, 1 / root);\n    for (var k = 0; k < root; k++) {\n      var halfPiFactor = (offset + 4 * k) / root;\n      /**\n       * If (offset + 4*k)/root is an integral multiple of pi/2\n       * then we can produce a more exact result.\n       */\n      if (halfPiFactor === Math.round(halfPiFactor)) {\n        roots.push(_calculateExactResult[halfPiFactor % 4](r));\n        continue;\n      }\n      roots.push(new Complex({\n        r,\n        phi: (arg + 2 * Math.PI * k) / root\n      }));\n    }\n    return roots;\n  }\n\n  /**\n   * Calculate the nth roots of a value.\n   * An nth root of a positive real number A,\n   * is a positive real solution of the equation \"x^root = A\".\n   * This function returns an array of complex values.\n   *\n   * Syntax:\n   *\n   *    math.nthRoots(x)\n   *    math.nthRoots(x, root)\n   *\n   * Examples:\n   *\n   *    math.nthRoots(1)\n   *    // returns [\n   *    //   {re: 1, im: 0},\n   *    //   {re: -1, im: 0}\n   *    // ]\n   *    math.nthRoots(1, 3)\n   *    // returns [\n   *    //   { re: 1, im: 0 },\n   *    //   { re: -0.4999999999999998, im: 0.8660254037844387 },\n   *    //   { re: -0.5000000000000004, im: -0.8660254037844385 }\n   *    // ]\n   *\n   * See also:\n   *\n   *    nthRoot, pow, sqrt\n   *\n   * @param {number | BigNumber | Fraction | Complex} x Number to be rounded\n   * @param {number} [root=2] Optional root, default value is 2\n   * @return {number | BigNumber | Fraction | Complex} Returns the nth roots\n   */\n  return typed(name, {\n    Complex: function Complex(x) {\n      return _nthComplexRoots(x, 2);\n    },\n    'Complex, number': _nthComplexRoots\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}