{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { gammaG, gammaNumber, gammaP } from '../../plain/number/index.js';\nvar name = 'gamma';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];\nexport var createGamma = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiplyScalar,\n    pow,\n    BigNumber: _BigNumber,\n    Complex\n  } = _ref;\n  /**\n   * Compute the gamma function of a value using Lanczos approximation for\n   * small values, and an extended Stirling approximation for large values.\n   *\n   * To avoid confusion with the matrix Gamma function, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.gamma(n)\n   *\n   * Examples:\n   *\n   *    math.gamma(5)       // returns 24\n   *    math.gamma(-0.5)    // returns -3.5449077018110335\n   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i\n   *\n   * See also:\n   *\n   *    combinations, factorial, permutations\n   *\n   * @param {number | BigNumber | Complex} n   A real or complex number\n   * @return {number | BigNumber | Complex}    The gamma of `n`\n   */\n\n  function gammaComplex(n) {\n    if (n.im === 0) {\n      return gammaNumber(n.re);\n    }\n\n    // Lanczos approximation doesn't work well with real part lower than 0.5\n    // So reflection formula is required\n    if (n.re < 0.5) {\n      // Euler's reflection formula\n      // gamma(1-z) * gamma(z) = PI / sin(PI * z)\n      // real part of Z should not be integer [sin(PI) == 0 -> 1/0 - undefined]\n      // thanks to imperfect sin implementation sin(PI * n) != 0\n      // we can safely use it anyway\n      var _t = new Complex(1 - n.re, -n.im);\n      var r = new Complex(Math.PI * n.re, Math.PI * n.im);\n      return new Complex(Math.PI).div(r.sin()).div(gammaComplex(_t));\n    }\n\n    // Lanczos approximation\n    // z -= 1\n    n = new Complex(n.re - 1, n.im);\n\n    // x = gammaPval[0]\n    var x = new Complex(gammaP[0], 0);\n    // for (i, gammaPval) in enumerate(gammaP):\n    for (var i = 1; i < gammaP.length; ++i) {\n      // x += gammaPval / (z + i)\n      var gammaPval = new Complex(gammaP[i], 0);\n      x = x.add(gammaPval.div(n.add(i)));\n    }\n    // t = z + gammaG + 0.5\n    var t = new Complex(n.re + gammaG + 0.5, n.im);\n\n    // y = sqrt(2 * pi) * t ** (z + 0.5) * exp(-t) * x\n    var twoPiSqrt = Math.sqrt(2 * Math.PI);\n    var tpow = t.pow(n.add(0.5));\n    var expt = t.neg().exp();\n\n    // y = [x] * [sqrt(2 * pi)] * [t ** (z + 0.5)] * [exp(-t)]\n    return x.mul(twoPiSqrt).mul(tpow).mul(expt);\n  }\n  return typed(name, {\n    number: gammaNumber,\n    Complex: gammaComplex,\n    BigNumber: function BigNumber(n) {\n      if (n.isInteger()) {\n        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));\n      }\n      if (!n.isFinite()) {\n        return new _BigNumber(n.isNegative() ? NaN : Infinity);\n      }\n      throw new Error('Integer BigNumber expected');\n    }\n  });\n\n  /**\n   * Calculate factorial for a BigNumber\n   * @param {BigNumber} n\n   * @returns {BigNumber} Returns the factorial of n\n   */\n  function bigFactorial(n) {\n    if (n < 8) {\n      return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);\n    }\n    var precision = config.precision + (Math.log(n.toNumber()) | 0);\n    var Big = _BigNumber.clone({\n      precision\n    });\n    if (n % 2 === 1) {\n      return n.times(bigFactorial(new _BigNumber(n - 1)));\n    }\n    var p = n;\n    var prod = new Big(n);\n    var sum = n.toNumber();\n    while (p > 2) {\n      p -= 2;\n      sum += p;\n      prod = prod.times(sum);\n    }\n    return new _BigNumber(prod.toPrecision(_BigNumber.precision));\n  }\n});","map":{"version":3,"names":["factory","gammaG","gammaNumber","gammaP","name","dependencies","createGamma","_ref","typed","config","multiplyScalar","pow","BigNumber","_BigNumber","Complex","gammaComplex","n","im","re","_t","r","Math","PI","div","sin","x","i","length","gammaPval","add","t","twoPiSqrt","sqrt","tpow","expt","neg","exp","mul","number","isInteger","isNegative","isZero","Infinity","bigFactorial","minus","isFinite","NaN","Error","precision","log","toNumber","Big","clone","times","p","prod","sum","toPrecision"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/probability/gamma.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { gammaG, gammaNumber, gammaP } from '../../plain/number/index.js';\nvar name = 'gamma';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];\nexport var createGamma = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiplyScalar,\n    pow,\n    BigNumber: _BigNumber,\n    Complex\n  } = _ref;\n  /**\n   * Compute the gamma function of a value using Lanczos approximation for\n   * small values, and an extended Stirling approximation for large values.\n   *\n   * To avoid confusion with the matrix Gamma function, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.gamma(n)\n   *\n   * Examples:\n   *\n   *    math.gamma(5)       // returns 24\n   *    math.gamma(-0.5)    // returns -3.5449077018110335\n   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i\n   *\n   * See also:\n   *\n   *    combinations, factorial, permutations\n   *\n   * @param {number | BigNumber | Complex} n   A real or complex number\n   * @return {number | BigNumber | Complex}    The gamma of `n`\n   */\n\n  function gammaComplex(n) {\n    if (n.im === 0) {\n      return gammaNumber(n.re);\n    }\n\n    // Lanczos approximation doesn't work well with real part lower than 0.5\n    // So reflection formula is required\n    if (n.re < 0.5) {\n      // Euler's reflection formula\n      // gamma(1-z) * gamma(z) = PI / sin(PI * z)\n      // real part of Z should not be integer [sin(PI) == 0 -> 1/0 - undefined]\n      // thanks to imperfect sin implementation sin(PI * n) != 0\n      // we can safely use it anyway\n      var _t = new Complex(1 - n.re, -n.im);\n      var r = new Complex(Math.PI * n.re, Math.PI * n.im);\n      return new Complex(Math.PI).div(r.sin()).div(gammaComplex(_t));\n    }\n\n    // Lanczos approximation\n    // z -= 1\n    n = new Complex(n.re - 1, n.im);\n\n    // x = gammaPval[0]\n    var x = new Complex(gammaP[0], 0);\n    // for (i, gammaPval) in enumerate(gammaP):\n    for (var i = 1; i < gammaP.length; ++i) {\n      // x += gammaPval / (z + i)\n      var gammaPval = new Complex(gammaP[i], 0);\n      x = x.add(gammaPval.div(n.add(i)));\n    }\n    // t = z + gammaG + 0.5\n    var t = new Complex(n.re + gammaG + 0.5, n.im);\n\n    // y = sqrt(2 * pi) * t ** (z + 0.5) * exp(-t) * x\n    var twoPiSqrt = Math.sqrt(2 * Math.PI);\n    var tpow = t.pow(n.add(0.5));\n    var expt = t.neg().exp();\n\n    // y = [x] * [sqrt(2 * pi)] * [t ** (z + 0.5)] * [exp(-t)]\n    return x.mul(twoPiSqrt).mul(tpow).mul(expt);\n  }\n  return typed(name, {\n    number: gammaNumber,\n    Complex: gammaComplex,\n    BigNumber: function BigNumber(n) {\n      if (n.isInteger()) {\n        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));\n      }\n      if (!n.isFinite()) {\n        return new _BigNumber(n.isNegative() ? NaN : Infinity);\n      }\n      throw new Error('Integer BigNumber expected');\n    }\n  });\n\n  /**\n   * Calculate factorial for a BigNumber\n   * @param {BigNumber} n\n   * @returns {BigNumber} Returns the factorial of n\n   */\n  function bigFactorial(n) {\n    if (n < 8) {\n      return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);\n    }\n    var precision = config.precision + (Math.log(n.toNumber()) | 0);\n    var Big = _BigNumber.clone({\n      precision\n    });\n    if (n % 2 === 1) {\n      return n.times(bigFactorial(new _BigNumber(n - 1)));\n    }\n    var p = n;\n    var prod = new Big(n);\n    var sum = n.toNumber();\n    while (p > 2) {\n      p -= 2;\n      sum += p;\n      prod = prod.times(sum);\n    }\n    return new _BigNumber(prod.toPrecision(_BigNumber.precision));\n  }\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,MAAM,EAAEC,WAAW,EAAEC,MAAM,QAAQ,6BAA6B;AACzE,IAAIC,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,CAAC;AACvF,OAAO,IAAIC,WAAW,GAAG,eAAeN,OAAO,CAACI,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC1E,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,cAAc;IACdC,GAAG;IACHC,SAAS,EAAEC,UAAU;IACrBC;EACF,CAAC,GAAGP,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,SAASQ,YAAYA,CAACC,CAAC,EAAE;IACvB,IAAIA,CAAC,CAACC,EAAE,KAAK,CAAC,EAAE;MACd,OAAOf,WAAW,CAACc,CAAC,CAACE,EAAE,CAAC;IAC1B;;IAEA;IACA;IACA,IAAIF,CAAC,CAACE,EAAE,GAAG,GAAG,EAAE;MACd;MACA;MACA;MACA;MACA;MACA,IAAIC,EAAE,GAAG,IAAIL,OAAO,CAAC,CAAC,GAAGE,CAAC,CAACE,EAAE,EAAE,CAACF,CAAC,CAACC,EAAE,CAAC;MACrC,IAAIG,CAAC,GAAG,IAAIN,OAAO,CAACO,IAAI,CAACC,EAAE,GAAGN,CAAC,CAACE,EAAE,EAAEG,IAAI,CAACC,EAAE,GAAGN,CAAC,CAACC,EAAE,CAAC;MACnD,OAAO,IAAIH,OAAO,CAACO,IAAI,CAACC,EAAE,CAAC,CAACC,GAAG,CAACH,CAAC,CAACI,GAAG,EAAE,CAAC,CAACD,GAAG,CAACR,YAAY,CAACI,EAAE,CAAC,CAAC;IAChE;;IAEA;IACA;IACAH,CAAC,GAAG,IAAIF,OAAO,CAACE,CAAC,CAACE,EAAE,GAAG,CAAC,EAAEF,CAAC,CAACC,EAAE,CAAC;;IAE/B;IACA,IAAIQ,CAAC,GAAG,IAAIX,OAAO,CAACX,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IACjC;IACA,KAAK,IAAIuB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvB,MAAM,CAACwB,MAAM,EAAE,EAAED,CAAC,EAAE;MACtC;MACA,IAAIE,SAAS,GAAG,IAAId,OAAO,CAACX,MAAM,CAACuB,CAAC,CAAC,EAAE,CAAC,CAAC;MACzCD,CAAC,GAAGA,CAAC,CAACI,GAAG,CAACD,SAAS,CAACL,GAAG,CAACP,CAAC,CAACa,GAAG,CAACH,CAAC,CAAC,CAAC,CAAC;IACpC;IACA;IACA,IAAII,CAAC,GAAG,IAAIhB,OAAO,CAACE,CAAC,CAACE,EAAE,GAAGjB,MAAM,GAAG,GAAG,EAAEe,CAAC,CAACC,EAAE,CAAC;;IAE9C;IACA,IAAIc,SAAS,GAAGV,IAAI,CAACW,IAAI,CAAC,CAAC,GAAGX,IAAI,CAACC,EAAE,CAAC;IACtC,IAAIW,IAAI,GAAGH,CAAC,CAACnB,GAAG,CAACK,CAAC,CAACa,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5B,IAAIK,IAAI,GAAGJ,CAAC,CAACK,GAAG,EAAE,CAACC,GAAG,EAAE;;IAExB;IACA,OAAOX,CAAC,CAACY,GAAG,CAACN,SAAS,CAAC,CAACM,GAAG,CAACJ,IAAI,CAAC,CAACI,GAAG,CAACH,IAAI,CAAC;EAC7C;EACA,OAAO1B,KAAK,CAACJ,IAAI,EAAE;IACjBkC,MAAM,EAAEpC,WAAW;IACnBY,OAAO,EAAEC,YAAY;IACrBH,SAAS,EAAE,SAASA,SAASA,CAACI,CAAC,EAAE;MAC/B,IAAIA,CAAC,CAACuB,SAAS,EAAE,EAAE;QACjB,OAAOvB,CAAC,CAACwB,UAAU,EAAE,IAAIxB,CAAC,CAACyB,MAAM,EAAE,GAAG,IAAI5B,UAAU,CAAC6B,QAAQ,CAAC,GAAGC,YAAY,CAAC3B,CAAC,CAAC4B,KAAK,CAAC,CAAC,CAAC,CAAC;MAC3F;MACA,IAAI,CAAC5B,CAAC,CAAC6B,QAAQ,EAAE,EAAE;QACjB,OAAO,IAAIhC,UAAU,CAACG,CAAC,CAACwB,UAAU,EAAE,GAAGM,GAAG,GAAGJ,QAAQ,CAAC;MACxD;MACA,MAAM,IAAIK,KAAK,CAAC,4BAA4B,CAAC;IAC/C;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;EACE,SAASJ,YAAYA,CAAC3B,CAAC,EAAE;IACvB,IAAIA,CAAC,GAAG,CAAC,EAAE;MACT,OAAO,IAAIH,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAACG,CAAC,CAAC,CAAC;IAC5D;IACA,IAAIgC,SAAS,GAAGvC,MAAM,CAACuC,SAAS,IAAI3B,IAAI,CAAC4B,GAAG,CAACjC,CAAC,CAACkC,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC;IAC/D,IAAIC,GAAG,GAAGtC,UAAU,CAACuC,KAAK,CAAC;MACzBJ;IACF,CAAC,CAAC;IACF,IAAIhC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;MACf,OAAOA,CAAC,CAACqC,KAAK,CAACV,YAAY,CAAC,IAAI9B,UAAU,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACrD;IACA,IAAIsC,CAAC,GAAGtC,CAAC;IACT,IAAIuC,IAAI,GAAG,IAAIJ,GAAG,CAACnC,CAAC,CAAC;IACrB,IAAIwC,GAAG,GAAGxC,CAAC,CAACkC,QAAQ,EAAE;IACtB,OAAOI,CAAC,GAAG,CAAC,EAAE;MACZA,CAAC,IAAI,CAAC;MACNE,GAAG,IAAIF,CAAC;MACRC,IAAI,GAAGA,IAAI,CAACF,KAAK,CAACG,GAAG,CAAC;IACxB;IACA,OAAO,IAAI3C,UAAU,CAAC0C,IAAI,CAACE,WAAW,CAAC5C,UAAU,CAACmC,SAAS,CAAC,CAAC;EAC/D;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}