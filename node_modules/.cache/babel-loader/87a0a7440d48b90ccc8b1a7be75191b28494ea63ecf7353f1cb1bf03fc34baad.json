{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { format } from '../../utils/string.js';\nimport { createComplexEigs } from './eigs/complexEigs.js';\nimport { createRealSymmetric } from './eigs/realSymetric.js';\nimport { typeOf, isNumber, isBigNumber, isComplex, isFraction } from '../../utils/is.js';\nvar name = 'eigs';\n\n// The absolute state of math.js's dependency system:\nvar dependencies = ['config', 'typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'divideScalar', 'inv', 'bignumber', 'multiply', 'add', 'larger', 'column', 'flatten', 'number', 'complex', 'sqrt', 'diag', 'qr', 'usolve', 'usolveAll', 'im', 're', 'smaller', 'matrixFromColumns', 'dot'];\nexport var createEigs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    matrix,\n    addScalar,\n    subtract,\n    equal,\n    abs,\n    atan,\n    cos,\n    sin,\n    multiplyScalar,\n    divideScalar,\n    inv,\n    bignumber,\n    multiply,\n    add,\n    larger,\n    column,\n    flatten,\n    number,\n    complex,\n    sqrt,\n    diag,\n    qr,\n    usolve,\n    usolveAll,\n    im,\n    re,\n    smaller,\n    matrixFromColumns,\n    dot\n  } = _ref;\n  var doRealSymetric = createRealSymmetric({\n    config,\n    addScalar,\n    subtract,\n    column,\n    flatten,\n    equal,\n    abs,\n    atan,\n    cos,\n    sin,\n    multiplyScalar,\n    inv,\n    bignumber,\n    complex,\n    multiply,\n    add\n  });\n  var doComplexEigs = createComplexEigs({\n    config,\n    addScalar,\n    subtract,\n    multiply,\n    multiplyScalar,\n    flatten,\n    divideScalar,\n    sqrt,\n    abs,\n    bignumber,\n    diag,\n    qr,\n    inv,\n    usolve,\n    usolveAll,\n    equal,\n    complex,\n    larger,\n    smaller,\n    matrixFromColumns,\n    dot\n  });\n\n  /**\n   * Compute eigenvalues and eigenvectors of a matrix. The eigenvalues are sorted by their absolute value, ascending.\n   * An eigenvalue with multiplicity k will be listed k times. The eigenvectors are returned as columns of a matrix –\n   * the eigenvector that belongs to the j-th eigenvalue in the list (eg. `values[j]`) is the j-th column (eg. `column(vectors, j)`).\n   * If the algorithm fails to converge, it will throw an error – in that case, however, you may still find useful information\n   * in `err.values` and `err.vectors`.\n   *\n   * Syntax:\n   *\n   *     math.eigs(x, [prec])\n   *\n   * Examples:\n   *\n   *     const { eigs, multiply, column, transpose } = math\n   *     const H = [[5, 2.3], [2.3, 1]]\n   *     const ans = eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors as columns]}\n   *     const E = ans.values\n   *     const U = ans.vectors\n   *     multiply(H, column(U, 0)) // returns multiply(E[0], column(U, 0))\n   *     const UTxHxU = multiply(transpose(U), H, U) // diagonalizes H\n   *     E[0] == UTxHxU[0][0]  // returns true\n   *\n   * See also:\n   *\n   *     inv\n   *\n   * @param {Array | Matrix} x  Matrix to be diagonalized\n   *\n   * @param {number | BigNumber} [prec] Precision, default value: 1e-15\n   * @return {{values: Array|Matrix, vectors: Array|Matrix}} Object containing an array of eigenvalues and a matrix with eigenvectors as columns.\n   *\n   */\n  return typed('eigs', {\n    Array: function Array(x) {\n      var mat = matrix(x);\n      return computeValuesAndVectors(mat);\n    },\n    'Array, number|BigNumber': function ArrayNumberBigNumber(x, prec) {\n      var mat = matrix(x);\n      return computeValuesAndVectors(mat, prec);\n    },\n    Matrix: function Matrix(mat) {\n      var {\n        values,\n        vectors\n      } = computeValuesAndVectors(mat);\n      return {\n        values: matrix(values),\n        vectors: matrix(vectors)\n      };\n    },\n    'Matrix, number|BigNumber': function MatrixNumberBigNumber(mat, prec) {\n      var {\n        values,\n        vectors\n      } = computeValuesAndVectors(mat, prec);\n      return {\n        values: matrix(values),\n        vectors: matrix(vectors)\n      };\n    }\n  });\n  function computeValuesAndVectors(mat, prec) {\n    if (prec === undefined) {\n      prec = config.epsilon;\n    }\n    var size = mat.size();\n    if (size.length !== 2 || size[0] !== size[1]) {\n      throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n    }\n    var arr = mat.toArray();\n    var N = size[0];\n    if (isReal(arr, N, prec)) {\n      coerceReal(arr, N);\n      if (isSymmetric(arr, N, prec)) {\n        var _type = coerceTypes(mat, arr, N);\n        return doRealSymetric(arr, N, prec, _type);\n      }\n    }\n    var type = coerceTypes(mat, arr, N);\n    return doComplexEigs(arr, N, prec, type);\n  }\n\n  /** @return {boolean} */\n  function isSymmetric(arr, N, prec) {\n    for (var i = 0; i < N; i++) {\n      for (var j = i; j < N; j++) {\n        // TODO proper comparison of bignum and frac\n        if (larger(bignumber(abs(subtract(arr[i][j], arr[j][i]))), prec)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /** @return {boolean} */\n  function isReal(arr, N, prec) {\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        // TODO proper comparison of bignum and frac\n        if (larger(bignumber(abs(im(arr[i][j]))), prec)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function coerceReal(arr, N) {\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        arr[i][j] = re(arr[i][j]);\n      }\n    }\n  }\n\n  /** @return {'number' | 'BigNumber' | 'Complex'} */\n  function coerceTypes(mat, arr, N) {\n    /** @type {string} */\n    var type = mat.datatype();\n    if (type === 'number' || type === 'BigNumber' || type === 'Complex') {\n      return type;\n    }\n    var hasNumber = false;\n    var hasBig = false;\n    var hasComplex = false;\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        var el = arr[i][j];\n        if (isNumber(el) || isFraction(el)) {\n          hasNumber = true;\n        } else if (isBigNumber(el)) {\n          hasBig = true;\n        } else if (isComplex(el)) {\n          hasComplex = true;\n        } else {\n          throw TypeError('Unsupported type in Matrix: ' + typeOf(el));\n        }\n      }\n    }\n    if (hasBig && hasComplex) {\n      console.warn('Complex BigNumbers not supported, this operation will lose precission.');\n    }\n    if (hasComplex) {\n      for (var _i = 0; _i < N; _i++) {\n        for (var _j = 0; _j < N; _j++) {\n          arr[_i][_j] = complex(arr[_i][_j]);\n        }\n      }\n      return 'Complex';\n    }\n    if (hasBig) {\n      for (var _i2 = 0; _i2 < N; _i2++) {\n        for (var _j2 = 0; _j2 < N; _j2++) {\n          arr[_i2][_j2] = bignumber(arr[_i2][_j2]);\n        }\n      }\n      return 'BigNumber';\n    }\n    if (hasNumber) {\n      for (var _i3 = 0; _i3 < N; _i3++) {\n        for (var _j3 = 0; _j3 < N; _j3++) {\n          arr[_i3][_j3] = number(arr[_i3][_j3]);\n        }\n      }\n      return 'number';\n    } else {\n      throw TypeError('Matrix contains unsupported types only.');\n    }\n  }\n});","map":{"version":3,"names":["factory","format","createComplexEigs","createRealSymmetric","typeOf","isNumber","isBigNumber","isComplex","isFraction","name","dependencies","createEigs","_ref","config","typed","matrix","addScalar","subtract","equal","abs","atan","cos","sin","multiplyScalar","divideScalar","inv","bignumber","multiply","add","larger","column","flatten","number","complex","sqrt","diag","qr","usolve","usolveAll","im","re","smaller","matrixFromColumns","dot","doRealSymetric","doComplexEigs","Array","x","mat","computeValuesAndVectors","ArrayNumberBigNumber","prec","Matrix","values","vectors","MatrixNumberBigNumber","undefined","epsilon","size","length","RangeError","arr","toArray","N","isReal","coerceReal","isSymmetric","_type","coerceTypes","type","i","j","datatype","hasNumber","hasBig","hasComplex","el","TypeError","console","warn","_i","_j","_i2","_j2","_i3","_j3"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/matrix/eigs.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { format } from '../../utils/string.js';\nimport { createComplexEigs } from './eigs/complexEigs.js';\nimport { createRealSymmetric } from './eigs/realSymetric.js';\nimport { typeOf, isNumber, isBigNumber, isComplex, isFraction } from '../../utils/is.js';\nvar name = 'eigs';\n\n// The absolute state of math.js's dependency system:\nvar dependencies = ['config', 'typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'divideScalar', 'inv', 'bignumber', 'multiply', 'add', 'larger', 'column', 'flatten', 'number', 'complex', 'sqrt', 'diag', 'qr', 'usolve', 'usolveAll', 'im', 're', 'smaller', 'matrixFromColumns', 'dot'];\nexport var createEigs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    matrix,\n    addScalar,\n    subtract,\n    equal,\n    abs,\n    atan,\n    cos,\n    sin,\n    multiplyScalar,\n    divideScalar,\n    inv,\n    bignumber,\n    multiply,\n    add,\n    larger,\n    column,\n    flatten,\n    number,\n    complex,\n    sqrt,\n    diag,\n    qr,\n    usolve,\n    usolveAll,\n    im,\n    re,\n    smaller,\n    matrixFromColumns,\n    dot\n  } = _ref;\n  var doRealSymetric = createRealSymmetric({\n    config,\n    addScalar,\n    subtract,\n    column,\n    flatten,\n    equal,\n    abs,\n    atan,\n    cos,\n    sin,\n    multiplyScalar,\n    inv,\n    bignumber,\n    complex,\n    multiply,\n    add\n  });\n  var doComplexEigs = createComplexEigs({\n    config,\n    addScalar,\n    subtract,\n    multiply,\n    multiplyScalar,\n    flatten,\n    divideScalar,\n    sqrt,\n    abs,\n    bignumber,\n    diag,\n    qr,\n    inv,\n    usolve,\n    usolveAll,\n    equal,\n    complex,\n    larger,\n    smaller,\n    matrixFromColumns,\n    dot\n  });\n\n  /**\n   * Compute eigenvalues and eigenvectors of a matrix. The eigenvalues are sorted by their absolute value, ascending.\n   * An eigenvalue with multiplicity k will be listed k times. The eigenvectors are returned as columns of a matrix –\n   * the eigenvector that belongs to the j-th eigenvalue in the list (eg. `values[j]`) is the j-th column (eg. `column(vectors, j)`).\n   * If the algorithm fails to converge, it will throw an error – in that case, however, you may still find useful information\n   * in `err.values` and `err.vectors`.\n   *\n   * Syntax:\n   *\n   *     math.eigs(x, [prec])\n   *\n   * Examples:\n   *\n   *     const { eigs, multiply, column, transpose } = math\n   *     const H = [[5, 2.3], [2.3, 1]]\n   *     const ans = eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors as columns]}\n   *     const E = ans.values\n   *     const U = ans.vectors\n   *     multiply(H, column(U, 0)) // returns multiply(E[0], column(U, 0))\n   *     const UTxHxU = multiply(transpose(U), H, U) // diagonalizes H\n   *     E[0] == UTxHxU[0][0]  // returns true\n   *\n   * See also:\n   *\n   *     inv\n   *\n   * @param {Array | Matrix} x  Matrix to be diagonalized\n   *\n   * @param {number | BigNumber} [prec] Precision, default value: 1e-15\n   * @return {{values: Array|Matrix, vectors: Array|Matrix}} Object containing an array of eigenvalues and a matrix with eigenvectors as columns.\n   *\n   */\n  return typed('eigs', {\n    Array: function Array(x) {\n      var mat = matrix(x);\n      return computeValuesAndVectors(mat);\n    },\n    'Array, number|BigNumber': function ArrayNumberBigNumber(x, prec) {\n      var mat = matrix(x);\n      return computeValuesAndVectors(mat, prec);\n    },\n    Matrix: function Matrix(mat) {\n      var {\n        values,\n        vectors\n      } = computeValuesAndVectors(mat);\n      return {\n        values: matrix(values),\n        vectors: matrix(vectors)\n      };\n    },\n    'Matrix, number|BigNumber': function MatrixNumberBigNumber(mat, prec) {\n      var {\n        values,\n        vectors\n      } = computeValuesAndVectors(mat, prec);\n      return {\n        values: matrix(values),\n        vectors: matrix(vectors)\n      };\n    }\n  });\n  function computeValuesAndVectors(mat, prec) {\n    if (prec === undefined) {\n      prec = config.epsilon;\n    }\n    var size = mat.size();\n    if (size.length !== 2 || size[0] !== size[1]) {\n      throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n    }\n    var arr = mat.toArray();\n    var N = size[0];\n    if (isReal(arr, N, prec)) {\n      coerceReal(arr, N);\n      if (isSymmetric(arr, N, prec)) {\n        var _type = coerceTypes(mat, arr, N);\n        return doRealSymetric(arr, N, prec, _type);\n      }\n    }\n    var type = coerceTypes(mat, arr, N);\n    return doComplexEigs(arr, N, prec, type);\n  }\n\n  /** @return {boolean} */\n  function isSymmetric(arr, N, prec) {\n    for (var i = 0; i < N; i++) {\n      for (var j = i; j < N; j++) {\n        // TODO proper comparison of bignum and frac\n        if (larger(bignumber(abs(subtract(arr[i][j], arr[j][i]))), prec)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /** @return {boolean} */\n  function isReal(arr, N, prec) {\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        // TODO proper comparison of bignum and frac\n        if (larger(bignumber(abs(im(arr[i][j]))), prec)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function coerceReal(arr, N) {\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        arr[i][j] = re(arr[i][j]);\n      }\n    }\n  }\n\n  /** @return {'number' | 'BigNumber' | 'Complex'} */\n  function coerceTypes(mat, arr, N) {\n    /** @type {string} */\n    var type = mat.datatype();\n    if (type === 'number' || type === 'BigNumber' || type === 'Complex') {\n      return type;\n    }\n    var hasNumber = false;\n    var hasBig = false;\n    var hasComplex = false;\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        var el = arr[i][j];\n        if (isNumber(el) || isFraction(el)) {\n          hasNumber = true;\n        } else if (isBigNumber(el)) {\n          hasBig = true;\n        } else if (isComplex(el)) {\n          hasComplex = true;\n        } else {\n          throw TypeError('Unsupported type in Matrix: ' + typeOf(el));\n        }\n      }\n    }\n    if (hasBig && hasComplex) {\n      console.warn('Complex BigNumbers not supported, this operation will lose precission.');\n    }\n    if (hasComplex) {\n      for (var _i = 0; _i < N; _i++) {\n        for (var _j = 0; _j < N; _j++) {\n          arr[_i][_j] = complex(arr[_i][_j]);\n        }\n      }\n      return 'Complex';\n    }\n    if (hasBig) {\n      for (var _i2 = 0; _i2 < N; _i2++) {\n        for (var _j2 = 0; _j2 < N; _j2++) {\n          arr[_i2][_j2] = bignumber(arr[_i2][_j2]);\n        }\n      }\n      return 'BigNumber';\n    }\n    if (hasNumber) {\n      for (var _i3 = 0; _i3 < N; _i3++) {\n        for (var _j3 = 0; _j3 < N; _j3++) {\n          arr[_i3][_j3] = number(arr[_i3][_j3]);\n        }\n      }\n      return 'number';\n    } else {\n      throw TypeError('Matrix contains unsupported types only.');\n    }\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}