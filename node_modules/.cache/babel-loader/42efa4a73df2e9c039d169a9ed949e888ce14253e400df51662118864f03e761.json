{"ast":null,"code":"import { isMatrix } from '../../utils/is.js';\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { format } from '../../utils/string.js';\nvar name = 'inv';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'addScalar', 'multiply', 'unaryMinus', 'det', 'identity', 'abs'];\nexport var createInv = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    addScalar,\n    multiply,\n    unaryMinus,\n    det,\n    identity,\n    abs\n  } = _ref;\n  /**\n   * Calculate the inverse of a square matrix.\n   *\n   * Syntax:\n   *\n   *     math.inv(x)\n   *\n   * Examples:\n   *\n   *     math.inv([[1, 2], [3, 4]])  // returns [[-2, 1], [1.5, -0.5]]\n   *     math.inv(4)                 // returns 0.25\n   *     1 / 4                       // returns 0.25\n   *\n   * See also:\n   *\n   *     det, transpose\n   *\n   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n   * @return {number | Complex | Array | Matrix} The inverse of `x`.\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(x) {\n      var size = isMatrix(x) ? x.size() : arraySize(x);\n      switch (size.length) {\n        case 1:\n          // vector\n          if (size[0] === 1) {\n            if (isMatrix(x)) {\n              return matrix([divideScalar(1, x.valueOf()[0])]);\n            } else {\n              return [divideScalar(1, x[0])];\n            }\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n          }\n        case 2:\n          // two dimensional array\n          {\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              if (isMatrix(x)) {\n                return matrix(_inv(x.valueOf(), rows, cols), x.storage());\n              } else {\n                // return an Array\n                return _inv(x, rows, cols);\n              }\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n            }\n          }\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format(size) + ')');\n      }\n    },\n    any: function any(x) {\n      // scalar\n      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers\n    }\n  });\n\n  /**\n   * Calculate the inverse of a square matrix\n   * @param {Array[]} mat     A square matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns, must equal rows\n   * @return {Array[]} inv    Inverse matrix\n   * @private\n   */\n  function _inv(mat, rows, cols) {\n    var r, s, f, value, temp;\n    if (rows === 1) {\n      // this is a 1 x 1 matrix\n      value = mat[0][0];\n      if (value === 0) {\n        throw Error('Cannot calculate inverse, determinant is zero');\n      }\n      return [[divideScalar(1, value)]];\n    } else if (rows === 2) {\n      // this is a 2 x 2 matrix\n      var d = det(mat);\n      if (d === 0) {\n        throw Error('Cannot calculate inverse, determinant is zero');\n      }\n      return [[divideScalar(mat[1][1], d), divideScalar(unaryMinus(mat[0][1]), d)], [divideScalar(unaryMinus(mat[1][0]), d), divideScalar(mat[0][0], d)]];\n    } else {\n      // this is a matrix of 3 x 3 or larger\n      // calculate inverse using gauss-jordan elimination\n      //      https://en.wikipedia.org/wiki/Gaussian_elimination\n      //      http://mathworld.wolfram.com/MatrixInverse.html\n      //      http://math.uww.edu/~mcfarlat/inverse.htm\n\n      // make a copy of the matrix (only the arrays, not of the elements)\n      var A = mat.concat();\n      for (r = 0; r < rows; r++) {\n        A[r] = A[r].concat();\n      }\n\n      // create an identity matrix which in the end will contain the\n      // matrix inverse\n      var B = identity(rows).valueOf();\n\n      // loop over all columns, and perform row reductions\n      for (var c = 0; c < cols; c++) {\n        // Pivoting: Swap row c with row r, where row r contains the largest element A[r][c]\n        var ABig = abs(A[c][c]);\n        var rBig = c;\n        r = c + 1;\n        while (r < rows) {\n          if (abs(A[r][c]) > ABig) {\n            ABig = abs(A[r][c]);\n            rBig = r;\n          }\n          r++;\n        }\n        if (ABig === 0) {\n          throw Error('Cannot calculate inverse, determinant is zero');\n        }\n        r = rBig;\n        if (r !== c) {\n          temp = A[c];\n          A[c] = A[r];\n          A[r] = temp;\n          temp = B[c];\n          B[c] = B[r];\n          B[r] = temp;\n        }\n\n        // eliminate non-zero values on the other rows at column c\n        var Ac = A[c];\n        var Bc = B[c];\n        for (r = 0; r < rows; r++) {\n          var Ar = A[r];\n          var Br = B[r];\n          if (r !== c) {\n            // eliminate value at column c and row r\n            if (Ar[c] !== 0) {\n              f = divideScalar(unaryMinus(Ar[c]), Ac[c]);\n\n              // add (f * row c) to row r to eliminate the value\n              // at column c\n              for (s = c; s < cols; s++) {\n                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));\n              }\n              for (s = 0; s < cols; s++) {\n                Br[s] = addScalar(Br[s], multiply(f, Bc[s]));\n              }\n            }\n          } else {\n            // normalize value at Acc to 1,\n            // divide each value on row r with the value at Acc\n            f = Ac[c];\n            for (s = c; s < cols; s++) {\n              Ar[s] = divideScalar(Ar[s], f);\n            }\n            for (s = 0; s < cols; s++) {\n              Br[s] = divideScalar(Br[s], f);\n            }\n          }\n        }\n      }\n      return B;\n    }\n  }\n});","map":{"version":3,"names":["isMatrix","arraySize","factory","format","name","dependencies","createInv","_ref","typed","matrix","divideScalar","addScalar","multiply","unaryMinus","det","identity","abs","ArrayMatrix","x","size","length","valueOf","RangeError","rows","cols","_inv","storage","any","mat","r","s","f","value","temp","Error","d","A","concat","B","c","ABig","rBig","Ac","Bc","Ar","Br"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/matrix/inv.js"],"sourcesContent":["import { isMatrix } from '../../utils/is.js';\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { format } from '../../utils/string.js';\nvar name = 'inv';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'addScalar', 'multiply', 'unaryMinus', 'det', 'identity', 'abs'];\nexport var createInv = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    addScalar,\n    multiply,\n    unaryMinus,\n    det,\n    identity,\n    abs\n  } = _ref;\n  /**\n   * Calculate the inverse of a square matrix.\n   *\n   * Syntax:\n   *\n   *     math.inv(x)\n   *\n   * Examples:\n   *\n   *     math.inv([[1, 2], [3, 4]])  // returns [[-2, 1], [1.5, -0.5]]\n   *     math.inv(4)                 // returns 0.25\n   *     1 / 4                       // returns 0.25\n   *\n   * See also:\n   *\n   *     det, transpose\n   *\n   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n   * @return {number | Complex | Array | Matrix} The inverse of `x`.\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(x) {\n      var size = isMatrix(x) ? x.size() : arraySize(x);\n      switch (size.length) {\n        case 1:\n          // vector\n          if (size[0] === 1) {\n            if (isMatrix(x)) {\n              return matrix([divideScalar(1, x.valueOf()[0])]);\n            } else {\n              return [divideScalar(1, x[0])];\n            }\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n          }\n        case 2:\n          // two dimensional array\n          {\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              if (isMatrix(x)) {\n                return matrix(_inv(x.valueOf(), rows, cols), x.storage());\n              } else {\n                // return an Array\n                return _inv(x, rows, cols);\n              }\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n            }\n          }\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format(size) + ')');\n      }\n    },\n    any: function any(x) {\n      // scalar\n      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers\n    }\n  });\n\n  /**\n   * Calculate the inverse of a square matrix\n   * @param {Array[]} mat     A square matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns, must equal rows\n   * @return {Array[]} inv    Inverse matrix\n   * @private\n   */\n  function _inv(mat, rows, cols) {\n    var r, s, f, value, temp;\n    if (rows === 1) {\n      // this is a 1 x 1 matrix\n      value = mat[0][0];\n      if (value === 0) {\n        throw Error('Cannot calculate inverse, determinant is zero');\n      }\n      return [[divideScalar(1, value)]];\n    } else if (rows === 2) {\n      // this is a 2 x 2 matrix\n      var d = det(mat);\n      if (d === 0) {\n        throw Error('Cannot calculate inverse, determinant is zero');\n      }\n      return [[divideScalar(mat[1][1], d), divideScalar(unaryMinus(mat[0][1]), d)], [divideScalar(unaryMinus(mat[1][0]), d), divideScalar(mat[0][0], d)]];\n    } else {\n      // this is a matrix of 3 x 3 or larger\n      // calculate inverse using gauss-jordan elimination\n      //      https://en.wikipedia.org/wiki/Gaussian_elimination\n      //      http://mathworld.wolfram.com/MatrixInverse.html\n      //      http://math.uww.edu/~mcfarlat/inverse.htm\n\n      // make a copy of the matrix (only the arrays, not of the elements)\n      var A = mat.concat();\n      for (r = 0; r < rows; r++) {\n        A[r] = A[r].concat();\n      }\n\n      // create an identity matrix which in the end will contain the\n      // matrix inverse\n      var B = identity(rows).valueOf();\n\n      // loop over all columns, and perform row reductions\n      for (var c = 0; c < cols; c++) {\n        // Pivoting: Swap row c with row r, where row r contains the largest element A[r][c]\n        var ABig = abs(A[c][c]);\n        var rBig = c;\n        r = c + 1;\n        while (r < rows) {\n          if (abs(A[r][c]) > ABig) {\n            ABig = abs(A[r][c]);\n            rBig = r;\n          }\n          r++;\n        }\n        if (ABig === 0) {\n          throw Error('Cannot calculate inverse, determinant is zero');\n        }\n        r = rBig;\n        if (r !== c) {\n          temp = A[c];\n          A[c] = A[r];\n          A[r] = temp;\n          temp = B[c];\n          B[c] = B[r];\n          B[r] = temp;\n        }\n\n        // eliminate non-zero values on the other rows at column c\n        var Ac = A[c];\n        var Bc = B[c];\n        for (r = 0; r < rows; r++) {\n          var Ar = A[r];\n          var Br = B[r];\n          if (r !== c) {\n            // eliminate value at column c and row r\n            if (Ar[c] !== 0) {\n              f = divideScalar(unaryMinus(Ar[c]), Ac[c]);\n\n              // add (f * row c) to row r to eliminate the value\n              // at column c\n              for (s = c; s < cols; s++) {\n                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));\n              }\n              for (s = 0; s < cols; s++) {\n                Br[s] = addScalar(Br[s], multiply(f, Bc[s]));\n              }\n            }\n          } else {\n            // normalize value at Acc to 1,\n            // divide each value on row r with the value at Acc\n            f = Ac[c];\n            for (s = c; s < cols; s++) {\n              Ar[s] = divideScalar(Ar[s], f);\n            }\n            for (s = 0; s < cols; s++) {\n              Br[s] = divideScalar(Br[s], f);\n            }\n          }\n        }\n      }\n      return B;\n    }\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}