{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { cotNumber } from '../../plain/number/index.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'cot';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.\n   *\n   * To avoid confusion with the matrix cotangent, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.cot(x)\n   *\n   * Examples:\n   *\n   *    math.cot(2)      // returns number -0.45765755436028577\n   *    1 / math.tan(2)  // returns number -0.45765755436028577\n   *\n   * See also:\n   *\n   *    tan, sec, csc\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Cotangent of x\n   */\n  return typed(name, {\n    number: cotNumber,\n    Complex: x => x.cot(),\n    BigNumber: x => new _BigNumber(1).div(x.tan())\n  }, trigUnit);\n});","map":{"version":3,"names":["factory","cotNumber","createTrigUnit","name","dependencies","createCot","_ref","typed","BigNumber","_BigNumber","trigUnit","number","Complex","x","cot","div","tan"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/trigonometry/cot.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { cotNumber } from '../../plain/number/index.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'cot';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.\n   *\n   * To avoid confusion with the matrix cotangent, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.cot(x)\n   *\n   * Examples:\n   *\n   *    math.cot(2)      // returns number -0.45765755436028577\n   *    1 / math.tan(2)  // returns number -0.45765755436028577\n   *\n   * See also:\n   *\n   *    tan, sec, csc\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Cotangent of x\n   */\n  return typed(name, {\n    number: cotNumber,\n    Complex: x => x.cot(),\n    BigNumber: x => new _BigNumber(1).div(x.tan())\n  }, trigUnit);\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,cAAc,QAAQ,eAAe;AAC9C,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC;AACzC,OAAO,IAAIC,SAAS,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACxE,IAAI;IACFC,KAAK;IACLC,SAAS,EAAEC;EACb,CAAC,GAAGH,IAAI;EACR,IAAII,QAAQ,GAAGR,cAAc,CAAC;IAC5BK;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAACJ,IAAI,EAAE;IACjBQ,MAAM,EAAEV,SAAS;IACjBW,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAACC,GAAG,EAAE;IACrBN,SAAS,EAAEK,CAAC,IAAI,IAAIJ,UAAU,CAAC,CAAC,CAAC,CAACM,GAAG,CAACF,CAAC,CAACG,GAAG,EAAE;EAC/C,CAAC,EAAEN,QAAQ,CAAC;AACd,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}