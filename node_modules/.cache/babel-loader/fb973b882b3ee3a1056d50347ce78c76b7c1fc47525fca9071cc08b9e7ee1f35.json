{"ast":null,"code":"import { isArray, isBigNumber, isMatrix, isNumber, isRange } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'index';\nvar dependencies = ['Index'];\nexport var createIndexTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Index\n  } = _ref;\n  /**\n   * Attach a transform function to math.index\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  return function indexTransform() {\n    var args = [];\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n\n      // change from one-based to zero based, and convert BigNumber to number\n      if (isRange(arg)) {\n        arg.start--;\n        arg.end -= arg.step > 0 ? 0 : 2;\n      } else if (arg && arg.isSet === true) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if (isArray(arg) || isMatrix(arg)) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if (isNumber(arg)) {\n        arg--;\n      } else if (isBigNumber(arg)) {\n        arg = arg.toNumber() - 1;\n      } else if (typeof arg === 'string') {\n        // leave as is\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n      args[i] = arg;\n    }\n    var res = new Index();\n    Index.apply(res, args);\n    return res;\n  };\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"names":["isArray","isBigNumber","isMatrix","isNumber","isRange","factory","name","dependencies","createIndexTransform","_ref","Index","indexTransform","args","i","ii","arguments","length","arg","start","end","step","isSet","map","v","toNumber","TypeError","res","apply","isTransformFunction"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/expression/transform/index.transform.js"],"sourcesContent":["import { isArray, isBigNumber, isMatrix, isNumber, isRange } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'index';\nvar dependencies = ['Index'];\nexport var createIndexTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Index\n  } = _ref;\n  /**\n   * Attach a transform function to math.index\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  return function indexTransform() {\n    var args = [];\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n\n      // change from one-based to zero based, and convert BigNumber to number\n      if (isRange(arg)) {\n        arg.start--;\n        arg.end -= arg.step > 0 ? 0 : 2;\n      } else if (arg && arg.isSet === true) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if (isArray(arg) || isMatrix(arg)) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if (isNumber(arg)) {\n        arg--;\n      } else if (isBigNumber(arg)) {\n        arg = arg.toNumber() - 1;\n      } else if (typeof arg === 'string') {\n        // leave as is\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n      args[i] = arg;\n    }\n    var res = new Index();\n    Index.apply(res, args);\n    return res;\n  };\n}, {\n  isTransformFunction: true\n});"],"mappings":"AAAA,SAASA,OAAO,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,mBAAmB;AACrF,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,oBAAoB,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACnF,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;EACE,OAAO,SAASE,cAAcA,CAAA,EAAG;IAC/B,IAAIC,IAAI,GAAG,EAAE;IACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,EAAE,EAAED,CAAC,EAAE,EAAE;MAClD,IAAII,GAAG,GAAGF,SAAS,CAACF,CAAC,CAAC;;MAEtB;MACA,IAAIT,OAAO,CAACa,GAAG,CAAC,EAAE;QAChBA,GAAG,CAACC,KAAK,EAAE;QACXD,GAAG,CAACE,GAAG,IAAIF,GAAG,CAACG,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;MACjC,CAAC,MAAM,IAAIH,GAAG,IAAIA,GAAG,CAACI,KAAK,KAAK,IAAI,EAAE;QACpCJ,GAAG,GAAGA,GAAG,CAACK,GAAG,CAAC,UAAUC,CAAC,EAAE;UACzB,OAAOA,CAAC,GAAG,CAAC;QACd,CAAC,CAAC;MACJ,CAAC,MAAM,IAAIvB,OAAO,CAACiB,GAAG,CAAC,IAAIf,QAAQ,CAACe,GAAG,CAAC,EAAE;QACxCA,GAAG,GAAGA,GAAG,CAACK,GAAG,CAAC,UAAUC,CAAC,EAAE;UACzB,OAAOA,CAAC,GAAG,CAAC;QACd,CAAC,CAAC;MACJ,CAAC,MAAM,IAAIpB,QAAQ,CAACc,GAAG,CAAC,EAAE;QACxBA,GAAG,EAAE;MACP,CAAC,MAAM,IAAIhB,WAAW,CAACgB,GAAG,CAAC,EAAE;QAC3BA,GAAG,GAAGA,GAAG,CAACO,QAAQ,EAAE,GAAG,CAAC;MAC1B,CAAC,MAAM,IAAI,OAAOP,GAAG,KAAK,QAAQ,EAAE;QAClC;MAAA,CACD,MAAM;QACL,MAAM,IAAIQ,SAAS,CAAC,8DAA8D,CAAC;MACrF;MACAb,IAAI,CAACC,CAAC,CAAC,GAAGI,GAAG;IACf;IACA,IAAIS,GAAG,GAAG,IAAIhB,KAAK,EAAE;IACrBA,KAAK,CAACiB,KAAK,CAACD,GAAG,EAAEd,IAAI,CAAC;IACtB,OAAOc,GAAG;EACZ,CAAC;AACH,CAAC,EAAE;EACDE,mBAAmB,EAAE;AACvB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}