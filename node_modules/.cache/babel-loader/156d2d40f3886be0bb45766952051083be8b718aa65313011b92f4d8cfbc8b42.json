{"ast":null,"code":"import { maxArgumentCount } from '../../utils/function.js';\nimport { forEach as forEachArray } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'forEach';\nvar dependencies = ['typed'];\nexport var createForEach = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterate over all elements of a matrix/array, and executes the given callback function.\n   *\n   * Syntax:\n   *\n   *    math.forEach(x, callback)\n   *\n   * Examples:\n   *\n   *    math.forEach([1, 2, 3], function(value) {\n   *      console.log(value)\n   *    })\n   *    // outputs 1, 2, 3\n   *\n   * See also:\n   *\n   *    filter, map, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix/array being traversed.\n   */\n  return typed(name, {\n    'Array, function': _forEach,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      x.forEach(callback);\n    }\n  });\n});\n\n/**\n * forEach for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @private\n */\nfunction _forEach(array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      forEachArray(value, function (child, i) {\n        // we create a copy of the index array and append the new index value\n        recurse(child, index.concat(i));\n      });\n    } else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        callback(value);\n      } else if (args === 2) {\n        callback(value, index);\n      } else {\n        // 3 or -1\n        callback(value, index, array);\n      }\n    }\n  };\n  recurse(array, []);\n}","map":{"version":3,"names":["maxArgumentCount","forEach","forEachArray","factory","name","dependencies","createForEach","_ref","typed","_forEach","MatrixFunction","x","callback","array","args","recurse","value","index","Array","isArray","child","i","concat"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/matrix/forEach.js"],"sourcesContent":["import { maxArgumentCount } from '../../utils/function.js';\nimport { forEach as forEachArray } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'forEach';\nvar dependencies = ['typed'];\nexport var createForEach = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterate over all elements of a matrix/array, and executes the given callback function.\n   *\n   * Syntax:\n   *\n   *    math.forEach(x, callback)\n   *\n   * Examples:\n   *\n   *    math.forEach([1, 2, 3], function(value) {\n   *      console.log(value)\n   *    })\n   *    // outputs 1, 2, 3\n   *\n   * See also:\n   *\n   *    filter, map, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix/array being traversed.\n   */\n  return typed(name, {\n    'Array, function': _forEach,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      x.forEach(callback);\n    }\n  });\n});\n\n/**\n * forEach for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @private\n */\nfunction _forEach(array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      forEachArray(value, function (child, i) {\n        // we create a copy of the index array and append the new index value\n        recurse(child, index.concat(i));\n      });\n    } else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        callback(value);\n      } else if (args === 2) {\n        callback(value, index);\n      } else {\n        // 3 or -1\n        callback(value, index, array);\n      }\n    }\n  };\n  recurse(array, []);\n}"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,yBAAyB;AAC1D,SAASC,OAAO,IAAIC,YAAY,QAAQ,sBAAsB;AAC9D,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC5E,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,iBAAiB,EAAEK,QAAQ;IAC3B,kBAAkB,EAAE,SAASC,cAAcA,CAACC,CAAC,EAAEC,QAAQ,EAAE;MACvDD,CAAC,CAACV,OAAO,CAACW,QAAQ,CAAC;IACrB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,SAASH,QAAQA,CAACI,KAAK,EAAED,QAAQ,EAAE;EACjC;EACA,IAAIE,IAAI,GAAGd,gBAAgB,CAACY,QAAQ,CAAC;EACrC,IAAIG,OAAO,GAAG,SAASA,OAAOA,CAACC,KAAK,EAAEC,KAAK,EAAE;IAC3C,IAAIC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE;MACxBd,YAAY,CAACc,KAAK,EAAE,UAAUI,KAAK,EAAEC,CAAC,EAAE;QACtC;QACAN,OAAO,CAACK,KAAK,EAAEH,KAAK,CAACK,MAAM,CAACD,CAAC,CAAC,CAAC;MACjC,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACA,IAAIP,IAAI,KAAK,CAAC,EAAE;QACdF,QAAQ,CAACI,KAAK,CAAC;MACjB,CAAC,MAAM,IAAIF,IAAI,KAAK,CAAC,EAAE;QACrBF,QAAQ,CAACI,KAAK,EAAEC,KAAK,CAAC;MACxB,CAAC,MAAM;QACL;QACAL,QAAQ,CAACI,KAAK,EAAEC,KAAK,EAAEJ,KAAK,CAAC;MAC/B;IACF;EACF,CAAC;EACDE,OAAO,CAACF,KAAK,EAAE,EAAE,CAAC;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}