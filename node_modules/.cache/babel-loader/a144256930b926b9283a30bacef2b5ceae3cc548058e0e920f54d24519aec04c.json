{"ast":null,"code":"import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { andNumber } from '../../plain/number/index.js';\nvar name = 'and';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'not', 'concat'];\nexport var createAnd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    not,\n    concat\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.and(x, y)\n   *\n   * Examples:\n   *\n   *    math.and(2, 4)   // returns true\n   *\n   *    a = [2, 0, 0]\n   *    b = [3, 7, 0]\n   *    c = 0\n   *\n   *    math.and(a, b)   // returns [true, false, false]\n   *    math.and(a, c)   // returns [false, false, false]\n   *\n   * See also:\n   *\n   *    not, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when both inputs are defined with a nonzero/nonempty value.\n   */\n  return typed(name, {\n    'number, number': andNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0)),\n    'SparseMatrix, any': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, any': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'any, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo11xS0s(y, x, self, true);\n    }),\n    'any, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    }),\n    'Array, any': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return self(matrix(x), y).valueOf();\n    }),\n    'any, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return self(x, matrix(y)).valueOf();\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0\n  }));\n});","map":{"version":3,"names":["createMatAlgo02xDS0","createMatAlgo11xS0s","createMatAlgo14xDs","createMatAlgo06xS0S0","factory","createMatrixAlgorithmSuite","andNumber","name","dependencies","createAnd","_ref","typed","matrix","equalScalar","zeros","not","concat","matAlgo02xDS0","matAlgo06xS0S0","matAlgo11xS0s","matAlgo14xDs","matrixAlgorithmSuite","ComplexComplex","x","y","re","im","BigNumberBigNumber","isZero","isNaN","referToSelf","self","value","size","storage","valueOf","SS","DS"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/logical/and.js"],"sourcesContent":["import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { andNumber } from '../../plain/number/index.js';\nvar name = 'and';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'not', 'concat'];\nexport var createAnd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    not,\n    concat\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.and(x, y)\n   *\n   * Examples:\n   *\n   *    math.and(2, 4)   // returns true\n   *\n   *    a = [2, 0, 0]\n   *    b = [3, 7, 0]\n   *    c = 0\n   *\n   *    math.and(a, b)   // returns [true, false, false]\n   *    math.and(a, c)   // returns [false, false, false]\n   *\n   * See also:\n   *\n   *    not, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when both inputs are defined with a nonzero/nonempty value.\n   */\n  return typed(name, {\n    'number, number': andNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0)),\n    'SparseMatrix, any': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, any': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'any, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo11xS0s(y, x, self, true);\n    }),\n    'any, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    }),\n    'Array, any': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return self(matrix(x), y).valueOf();\n    }),\n    'any, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return self(x, matrix(y)).valueOf();\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0\n  }));\n});"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,kBAAkB,QAAQ,yCAAyC;AAC5E,SAASC,oBAAoB,QAAQ,2CAA2C;AAChF,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,0BAA0B,QAAQ,iDAAiD;AAC5F,SAASC,SAAS,QAAQ,6BAA6B;AACvD,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC;AAC/E,OAAO,IAAIC,SAAS,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACxE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,WAAW;IACXC,KAAK;IACLC,GAAG;IACHC;EACF,CAAC,GAAGN,IAAI;EACR,IAAIO,aAAa,GAAGjB,mBAAmB,CAAC;IACtCW,KAAK;IACLE;EACF,CAAC,CAAC;EACF,IAAIK,cAAc,GAAGf,oBAAoB,CAAC;IACxCQ,KAAK;IACLE;EACF,CAAC,CAAC;EACF,IAAIM,aAAa,GAAGlB,mBAAmB,CAAC;IACtCU,KAAK;IACLE;EACF,CAAC,CAAC;EACF,IAAIO,YAAY,GAAGlB,kBAAkB,CAAC;IACpCS;EACF,CAAC,CAAC;EACF,IAAIU,oBAAoB,GAAGhB,0BAA0B,CAAC;IACpDM,KAAK;IACLC,MAAM;IACNI;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOL,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAED,SAAS;IAC3B,kBAAkB,EAAE,SAASgB,cAAcA,CAACC,CAAC,EAAEC,CAAC,EAAE;MAChD,OAAO,CAACD,CAAC,CAACE,EAAE,KAAK,CAAC,IAAIF,CAAC,CAACG,EAAE,KAAK,CAAC,MAAMF,CAAC,CAACC,EAAE,KAAK,CAAC,IAAID,CAAC,CAACE,EAAE,KAAK,CAAC,CAAC;IACjE,CAAC;IACD,sBAAsB,EAAE,SAASC,kBAAkBA,CAACJ,CAAC,EAAEC,CAAC,EAAE;MACxD,OAAO,CAACD,CAAC,CAACK,MAAM,EAAE,IAAI,CAACJ,CAAC,CAACI,MAAM,EAAE,IAAI,CAACL,CAAC,CAACM,KAAK,EAAE,IAAI,CAACL,CAAC,CAACK,KAAK,EAAE;IAC/D,CAAC;IACD,YAAY,EAAElB,KAAK,CAACmB,WAAW,CAACC,IAAI,IAAI,CAACR,CAAC,EAAEC,CAAC,KAAKO,IAAI,CAACR,CAAC,CAACS,KAAK,IAAI,CAAC,EAAER,CAAC,CAACQ,KAAK,IAAI,CAAC,CAAC,CAAC;IACnF,mBAAmB,EAAErB,KAAK,CAACmB,WAAW,CAACC,IAAI,IAAI,CAACR,CAAC,EAAEC,CAAC,KAAK;MACvD;MACA,IAAIT,GAAG,CAACS,CAAC,CAAC,EAAE;QACV;QACA,OAAOV,KAAK,CAACS,CAAC,CAACU,IAAI,EAAE,EAAEV,CAAC,CAACW,OAAO,EAAE,CAAC;MACrC;MACA,OAAOf,aAAa,CAACI,CAAC,EAAEC,CAAC,EAAEO,IAAI,EAAE,KAAK,CAAC;IACzC,CAAC,CAAC;IACF,kBAAkB,EAAEpB,KAAK,CAACmB,WAAW,CAACC,IAAI,IAAI,CAACR,CAAC,EAAEC,CAAC,KAAK;MACtD;MACA,IAAIT,GAAG,CAACS,CAAC,CAAC,EAAE;QACV;QACA,OAAOV,KAAK,CAACS,CAAC,CAACU,IAAI,EAAE,EAAEV,CAAC,CAACW,OAAO,EAAE,CAAC;MACrC;MACA,OAAOd,YAAY,CAACG,CAAC,EAAEC,CAAC,EAAEO,IAAI,EAAE,KAAK,CAAC;IACxC,CAAC,CAAC;IACF,mBAAmB,EAAEpB,KAAK,CAACmB,WAAW,CAACC,IAAI,IAAI,CAACR,CAAC,EAAEC,CAAC,KAAK;MACvD;MACA,IAAIT,GAAG,CAACQ,CAAC,CAAC,EAAE;QACV;QACA,OAAOT,KAAK,CAACS,CAAC,CAACU,IAAI,EAAE,EAAEV,CAAC,CAACW,OAAO,EAAE,CAAC;MACrC;MACA,OAAOf,aAAa,CAACK,CAAC,EAAED,CAAC,EAAEQ,IAAI,EAAE,IAAI,CAAC;IACxC,CAAC,CAAC;IACF,kBAAkB,EAAEpB,KAAK,CAACmB,WAAW,CAACC,IAAI,IAAI,CAACR,CAAC,EAAEC,CAAC,KAAK;MACtD;MACA,IAAIT,GAAG,CAACQ,CAAC,CAAC,EAAE;QACV;QACA,OAAOT,KAAK,CAACS,CAAC,CAACU,IAAI,EAAE,EAAEV,CAAC,CAACW,OAAO,EAAE,CAAC;MACrC;MACA,OAAOd,YAAY,CAACI,CAAC,EAAED,CAAC,EAAEQ,IAAI,EAAE,IAAI,CAAC;IACvC,CAAC,CAAC;IACF,YAAY,EAAEpB,KAAK,CAACmB,WAAW,CAACC,IAAI,IAAI,CAACR,CAAC,EAAEC,CAAC,KAAK;MAChD;MACA,OAAOO,IAAI,CAACnB,MAAM,CAACW,CAAC,CAAC,EAAEC,CAAC,CAAC,CAACW,OAAO,EAAE;IACrC,CAAC,CAAC;IACF,YAAY,EAAExB,KAAK,CAACmB,WAAW,CAACC,IAAI,IAAI,CAACR,CAAC,EAAEC,CAAC,KAAK;MAChD;MACA,OAAOO,IAAI,CAACR,CAAC,EAAEX,MAAM,CAACY,CAAC,CAAC,CAAC,CAACW,OAAO,EAAE;IACrC,CAAC;EACH,CAAC,EAAEd,oBAAoB,CAAC;IACtBe,EAAE,EAAElB,cAAc;IAClBmB,EAAE,EAAEpB;EACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}