{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isArrayNode, isConstantNode, isFunctionNode, isIndexNode, isNode, isObjectNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nvar name = 'AccessorNode';\nvar dependencies = ['subset', 'Node'];\nexport var createAccessorNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !(isAccessorNode(node) || isArrayNode(node) || isConstantNode(node) || isFunctionNode(node) || isObjectNode(node) || isParenthesisNode(node) || isSymbolNode(node));\n  }\n  class AccessorNode extends Node {\n    /**\n     * @constructor AccessorNode\n     * @extends {Node}\n     * Access an object property or get a matrix subset\n     *\n     * @param {Node} object                 The object from which to retrieve\n     *                                      a property or subset.\n     * @param {IndexNode} index             IndexNode containing ranges\n     */\n    constructor(object, index) {\n      super();\n      if (!isNode(object)) {\n        throw new TypeError('Node expected for parameter \"object\"');\n      }\n      if (!isIndexNode(index)) {\n        throw new TypeError('IndexNode expected for parameter \"index\"');\n      }\n      this.object = object;\n      this.index = index;\n    }\n\n    // readonly property name\n    get name() {\n      if (this.index) {\n        return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n      } else {\n        return this.object.name || '';\n      }\n    }\n    get type() {\n      return name;\n    }\n    get isAccessorNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var evalObject = this.object._compile(math, argNames);\n      var evalIndex = this.index._compile(math, argNames);\n      if (this.index.isObjectProperty()) {\n        var prop = this.index.getObjectProperty();\n        return function evalAccessorNode(scope, args, context) {\n          // get a property from an object evaluated using the scope.\n          return getSafeProperty(evalObject(scope, args, context), prop);\n        };\n      } else {\n        return function evalAccessorNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          // we pass just object here instead of context:\n          var index = evalIndex(scope, args, object);\n          return access(object, index);\n        };\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.object, 'object', this);\n      callback(this.index, 'index', this);\n    }\n\n    /**\n     * Create a new AccessorNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {AccessorNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {AccessorNode}\n     */\n    clone() {\n      return new AccessorNode(this.object, this.index);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string}\n     */\n    _toString(options) {\n      var object = this.object.toString(options);\n      if (needParenthesis(this.object)) {\n        object = '(' + object + ')';\n      }\n      return object + this.index.toString(options);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string}\n     */\n    toHTML(options) {\n      var object = this.object.toHTML(options);\n      if (needParenthesis(this.object)) {\n        object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      return object + this.index.toHTML(options);\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string}\n     */\n    _toTex(options) {\n      var object = this.object.toTex(options);\n      if (needParenthesis(this.object)) {\n        object = '\\\\left(\\' + object + \\'\\\\right)';\n      }\n      return object + this.index.toTex(options);\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        object: this.object,\n        index: this.index\n      };\n    }\n\n    /**\n     * Instantiate an AccessorNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\n     *     where mathjs is optional\n     * @returns {AccessorNode}\n     */\n    static fromJSON(json) {\n      return new AccessorNode(json.object, json.index);\n    }\n  }\n  _defineProperty(AccessorNode, \"name\", name);\n  return AccessorNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isAccessorNode","isArrayNode","isConstantNode","isFunctionNode","isIndexNode","isNode","isObjectNode","isParenthesisNode","isSymbolNode","getSafeProperty","factory","accessFactory","name","dependencies","createAccessorNode","_ref","subset","Node","access","needParenthesis","node","AccessorNode","constructor","object","index","TypeError","isObjectProperty","getObjectProperty","type","_compile","math","argNames","evalObject","evalIndex","prop","evalAccessorNode","scope","args","context","forEach","callback","map","_ifNode","clone","_toString","options","toString","toHTML","_toTex","toTex","toJSON","mathjs","fromJSON","json","isClass"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/expression/node/AccessorNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isArrayNode, isConstantNode, isFunctionNode, isIndexNode, isNode, isObjectNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nvar name = 'AccessorNode';\nvar dependencies = ['subset', 'Node'];\nexport var createAccessorNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !(isAccessorNode(node) || isArrayNode(node) || isConstantNode(node) || isFunctionNode(node) || isObjectNode(node) || isParenthesisNode(node) || isSymbolNode(node));\n  }\n  class AccessorNode extends Node {\n    /**\n     * @constructor AccessorNode\n     * @extends {Node}\n     * Access an object property or get a matrix subset\n     *\n     * @param {Node} object                 The object from which to retrieve\n     *                                      a property or subset.\n     * @param {IndexNode} index             IndexNode containing ranges\n     */\n    constructor(object, index) {\n      super();\n      if (!isNode(object)) {\n        throw new TypeError('Node expected for parameter \"object\"');\n      }\n      if (!isIndexNode(index)) {\n        throw new TypeError('IndexNode expected for parameter \"index\"');\n      }\n      this.object = object;\n      this.index = index;\n    }\n\n    // readonly property name\n    get name() {\n      if (this.index) {\n        return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n      } else {\n        return this.object.name || '';\n      }\n    }\n    get type() {\n      return name;\n    }\n    get isAccessorNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var evalObject = this.object._compile(math, argNames);\n      var evalIndex = this.index._compile(math, argNames);\n      if (this.index.isObjectProperty()) {\n        var prop = this.index.getObjectProperty();\n        return function evalAccessorNode(scope, args, context) {\n          // get a property from an object evaluated using the scope.\n          return getSafeProperty(evalObject(scope, args, context), prop);\n        };\n      } else {\n        return function evalAccessorNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          // we pass just object here instead of context:\n          var index = evalIndex(scope, args, object);\n          return access(object, index);\n        };\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.object, 'object', this);\n      callback(this.index, 'index', this);\n    }\n\n    /**\n     * Create a new AccessorNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {AccessorNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {AccessorNode}\n     */\n    clone() {\n      return new AccessorNode(this.object, this.index);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string}\n     */\n    _toString(options) {\n      var object = this.object.toString(options);\n      if (needParenthesis(this.object)) {\n        object = '(' + object + ')';\n      }\n      return object + this.index.toString(options);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string}\n     */\n    toHTML(options) {\n      var object = this.object.toHTML(options);\n      if (needParenthesis(this.object)) {\n        object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      return object + this.index.toHTML(options);\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string}\n     */\n    _toTex(options) {\n      var object = this.object.toTex(options);\n      if (needParenthesis(this.object)) {\n        object = '\\\\left(\\' + object + \\'\\\\right)';\n      }\n      return object + this.index.toTex(options);\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        object: this.object,\n        index: this.index\n      };\n    }\n\n    /**\n     * Instantiate an AccessorNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\n     *     where mathjs is optional\n     * @returns {AccessorNode}\n     */\n    static fromJSON(json) {\n      return new AccessorNode(json.object, json.index);\n    }\n  }\n  _defineProperty(AccessorNode, \"name\", name);\n  return AccessorNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}