{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isInteger } from '../../utils/number.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'diff';\nvar dependencies = ['typed', 'matrix', 'subtract', 'number'];\nexport var createDiff = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    subtract,\n    number\n  } = _ref;\n  /**\n   * Create a new matrix or array of the difference between elements of the given array\n   * The optional dim parameter lets you specify the dimension to evaluate the difference of\n   * If no dimension parameter is passed it is assumed as dimension 0\n   *\n   * Dimension is zero-based in javascript and one-based in the parser and can be a number or bignumber\n   * Arrays must be 'rectangular' meaning arrays like [1, 2]\n   * If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays\n   *\n   * Syntax:\n   *\n   *     math.diff(arr)\n   *     math.diff(arr, dim)\n   *\n   * Examples:\n   *\n   *     const arr = [1, 2, 4, 7, 0]\n   *     math.diff(arr) // returns [1, 2, 3, -7] (no dimension passed so 0 is assumed)\n   *     math.diff(math.matrix(arr)) // returns Matrix [1, 2, 3, -7]\n   *\n   *     const arr = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [9, 8, 7, 6, 4]]\n   *     math.diff(arr) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]\n   *     math.diff(arr, 0) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]\n   *     math.diff(arr, 1) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]\n   *     math.diff(arr, math.bignumber(1)) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]\n   *\n   *     math.diff(arr, 2) // throws RangeError as arr is 2 dimensional not 3\n   *     math.diff(arr, -1) // throws RangeError as negative dimensions are not allowed\n   *\n   *     // These will all produce the same result\n   *     math.diff([[1, 2], [3, 4]])\n   *     math.diff([math.matrix([1, 2]), math.matrix([3, 4])])\n   *     math.diff([[1, 2], math.matrix([3, 4])])\n   *     math.diff([math.matrix([1, 2]), [3, 4]])\n   *     // They do not produce the same result as  math.diff(math.matrix([[1, 2], [3, 4]])) as this returns a matrix\n   *\n   * See Also:\n   *\n   *      sum\n   *      subtract\n   *      partitionSelect\n   *\n   * @param {Array | Matrix} arr      An array or matrix\n   * @param {number | BigNumber} dim  Dimension\n   * @return {Array | Matrix}         Difference between array elements in given dimension\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(arr) {\n      // No dimension specified => assume dimension 0\n      if (isMatrix(arr)) {\n        return matrix(_diff(arr.toArray()));\n      } else {\n        return _diff(arr);\n      }\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(arr, dim) {\n      if (!isInteger(dim)) throw new RangeError('Dimension must be a whole number');\n      if (isMatrix(arr)) {\n        return matrix(_recursive(arr.toArray(), dim));\n      } else {\n        return _recursive(arr, dim);\n      }\n    },\n    'Array, BigNumber': typed.referTo('Array,number', selfAn => (arr, dim) => selfAn(arr, number(dim))),\n    'Matrix, BigNumber': typed.referTo('Matrix,number', selfMn => (arr, dim) => selfMn(arr, number(dim)))\n  });\n\n  /**\n   * Recursively find the correct dimension in the array/matrix\n   * Then Apply _diff to that dimension\n   *\n   * @param {Array} arr      The array\n   * @param {number} dim     Dimension\n   * @return {Array}         resulting array\n   */\n  function _recursive(arr, dim) {\n    if (isMatrix(arr)) {\n      arr = arr.toArray(); // Makes sure arrays like [ matrix([0, 1]), matrix([1, 0]) ] are processed properly\n    }\n\n    if (!Array.isArray(arr)) {\n      throw RangeError('Array/Matrix does not have that many dimensions');\n    }\n    if (dim > 0) {\n      var result = [];\n      arr.forEach(element => {\n        result.push(_recursive(element, dim - 1));\n      });\n      return result;\n    } else if (dim === 0) {\n      return _diff(arr);\n    } else {\n      throw RangeError('Cannot have negative dimension');\n    }\n  }\n\n  /**\n   * Difference between elements in the array\n   *\n   * @param {Array} arr      An array\n   * @return {Array}         resulting array\n   */\n  function _diff(arr) {\n    var result = [];\n    var size = arr.length;\n    for (var i = 1; i < size; i++) {\n      result.push(_ElementDiff(arr[i - 1], arr[i]));\n    }\n    return result;\n  }\n\n  /**\n   * Difference between 2 objects\n   *\n   * @param {Object} obj1    First object\n   * @param {Object} obj2    Second object\n   * @return {Array}         resulting array\n   */\n  function _ElementDiff(obj1, obj2) {\n    // Convert matrices to arrays\n    if (isMatrix(obj1)) obj1 = obj1.toArray();\n    if (isMatrix(obj2)) obj2 = obj2.toArray();\n    var obj1IsArray = Array.isArray(obj1);\n    var obj2IsArray = Array.isArray(obj2);\n    if (obj1IsArray && obj2IsArray) {\n      return _ArrayDiff(obj1, obj2);\n    }\n    if (!obj1IsArray && !obj2IsArray) {\n      return subtract(obj2, obj1); // Difference is (second - first) NOT (first - second)\n    }\n\n    throw TypeError('Cannot calculate difference between 1 array and 1 non-array');\n  }\n\n  /**\n   * Difference of elements in 2 arrays\n   *\n   * @param {Array} arr1     Array 1\n   * @param {Array} arr2     Array 2\n   * @return {Array}         resulting array\n   */\n  function _ArrayDiff(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      throw RangeError('Not all sub-arrays have the same length');\n    }\n    var result = [];\n    var size = arr1.length;\n    for (var i = 0; i < size; i++) {\n      result.push(_ElementDiff(arr1[i], arr2[i]));\n    }\n    return result;\n  }\n});","map":{"version":3,"names":["factory","isInteger","isMatrix","name","dependencies","createDiff","_ref","typed","matrix","subtract","number","ArrayMatrix","arr","_diff","toArray","ArrayMatrixNumber","dim","RangeError","_recursive","referTo","selfAn","selfMn","Array","isArray","result","forEach","element","push","size","length","i","_ElementDiff","obj1","obj2","obj1IsArray","obj2IsArray","_ArrayDiff","TypeError","arr1","arr2"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/matrix/diff.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isInteger } from '../../utils/number.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'diff';\nvar dependencies = ['typed', 'matrix', 'subtract', 'number'];\nexport var createDiff = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    subtract,\n    number\n  } = _ref;\n  /**\n   * Create a new matrix or array of the difference between elements of the given array\n   * The optional dim parameter lets you specify the dimension to evaluate the difference of\n   * If no dimension parameter is passed it is assumed as dimension 0\n   *\n   * Dimension is zero-based in javascript and one-based in the parser and can be a number or bignumber\n   * Arrays must be 'rectangular' meaning arrays like [1, 2]\n   * If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays\n   *\n   * Syntax:\n   *\n   *     math.diff(arr)\n   *     math.diff(arr, dim)\n   *\n   * Examples:\n   *\n   *     const arr = [1, 2, 4, 7, 0]\n   *     math.diff(arr) // returns [1, 2, 3, -7] (no dimension passed so 0 is assumed)\n   *     math.diff(math.matrix(arr)) // returns Matrix [1, 2, 3, -7]\n   *\n   *     const arr = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [9, 8, 7, 6, 4]]\n   *     math.diff(arr) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]\n   *     math.diff(arr, 0) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]\n   *     math.diff(arr, 1) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]\n   *     math.diff(arr, math.bignumber(1)) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]\n   *\n   *     math.diff(arr, 2) // throws RangeError as arr is 2 dimensional not 3\n   *     math.diff(arr, -1) // throws RangeError as negative dimensions are not allowed\n   *\n   *     // These will all produce the same result\n   *     math.diff([[1, 2], [3, 4]])\n   *     math.diff([math.matrix([1, 2]), math.matrix([3, 4])])\n   *     math.diff([[1, 2], math.matrix([3, 4])])\n   *     math.diff([math.matrix([1, 2]), [3, 4]])\n   *     // They do not produce the same result as  math.diff(math.matrix([[1, 2], [3, 4]])) as this returns a matrix\n   *\n   * See Also:\n   *\n   *      sum\n   *      subtract\n   *      partitionSelect\n   *\n   * @param {Array | Matrix} arr      An array or matrix\n   * @param {number | BigNumber} dim  Dimension\n   * @return {Array | Matrix}         Difference between array elements in given dimension\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(arr) {\n      // No dimension specified => assume dimension 0\n      if (isMatrix(arr)) {\n        return matrix(_diff(arr.toArray()));\n      } else {\n        return _diff(arr);\n      }\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(arr, dim) {\n      if (!isInteger(dim)) throw new RangeError('Dimension must be a whole number');\n      if (isMatrix(arr)) {\n        return matrix(_recursive(arr.toArray(), dim));\n      } else {\n        return _recursive(arr, dim);\n      }\n    },\n    'Array, BigNumber': typed.referTo('Array,number', selfAn => (arr, dim) => selfAn(arr, number(dim))),\n    'Matrix, BigNumber': typed.referTo('Matrix,number', selfMn => (arr, dim) => selfMn(arr, number(dim)))\n  });\n\n  /**\n   * Recursively find the correct dimension in the array/matrix\n   * Then Apply _diff to that dimension\n   *\n   * @param {Array} arr      The array\n   * @param {number} dim     Dimension\n   * @return {Array}         resulting array\n   */\n  function _recursive(arr, dim) {\n    if (isMatrix(arr)) {\n      arr = arr.toArray(); // Makes sure arrays like [ matrix([0, 1]), matrix([1, 0]) ] are processed properly\n    }\n\n    if (!Array.isArray(arr)) {\n      throw RangeError('Array/Matrix does not have that many dimensions');\n    }\n    if (dim > 0) {\n      var result = [];\n      arr.forEach(element => {\n        result.push(_recursive(element, dim - 1));\n      });\n      return result;\n    } else if (dim === 0) {\n      return _diff(arr);\n    } else {\n      throw RangeError('Cannot have negative dimension');\n    }\n  }\n\n  /**\n   * Difference between elements in the array\n   *\n   * @param {Array} arr      An array\n   * @return {Array}         resulting array\n   */\n  function _diff(arr) {\n    var result = [];\n    var size = arr.length;\n    for (var i = 1; i < size; i++) {\n      result.push(_ElementDiff(arr[i - 1], arr[i]));\n    }\n    return result;\n  }\n\n  /**\n   * Difference between 2 objects\n   *\n   * @param {Object} obj1    First object\n   * @param {Object} obj2    Second object\n   * @return {Array}         resulting array\n   */\n  function _ElementDiff(obj1, obj2) {\n    // Convert matrices to arrays\n    if (isMatrix(obj1)) obj1 = obj1.toArray();\n    if (isMatrix(obj2)) obj2 = obj2.toArray();\n    var obj1IsArray = Array.isArray(obj1);\n    var obj2IsArray = Array.isArray(obj2);\n    if (obj1IsArray && obj2IsArray) {\n      return _ArrayDiff(obj1, obj2);\n    }\n    if (!obj1IsArray && !obj2IsArray) {\n      return subtract(obj2, obj1); // Difference is (second - first) NOT (first - second)\n    }\n\n    throw TypeError('Cannot calculate difference between 1 array and 1 non-array');\n  }\n\n  /**\n   * Difference of elements in 2 arrays\n   *\n   * @param {Array} arr1     Array 1\n   * @param {Array} arr2     Array 2\n   * @return {Array}         resulting array\n   */\n  function _ArrayDiff(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      throw RangeError('Not all sub-arrays have the same length');\n    }\n    var result = [];\n    var size = arr1.length;\n    for (var i = 0; i < size; i++) {\n      result.push(_ElementDiff(arr1[i], arr2[i]));\n    }\n    return result;\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}