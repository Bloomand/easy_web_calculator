{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'FibonacciHeap';\nvar dependencies = ['smaller', 'larger'];\nexport var createFibonacciHeapClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    smaller,\n    larger\n  } = _ref;\n  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\n\n  /**\n   * Fibonacci Heap implementation, used interally for Matrix math.\n   * @class FibonacciHeap\n   * @constructor FibonacciHeap\n   */\n  function FibonacciHeap() {\n    if (!(this instanceof FibonacciHeap)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // initialize fields\n    this._minimum = null;\n    this._size = 0;\n  }\n\n  /**\n   * Attach type information\n   */\n  FibonacciHeap.prototype.type = 'FibonacciHeap';\n  FibonacciHeap.prototype.isFibonacciHeap = true;\n\n  /**\n   * Inserts a new data element into the heap. No heap consolidation is\n   * performed at this time, the new node is simply inserted into the root\n   * list of this heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.insert = function (key, value) {\n    // create node\n    var node = {\n      key,\n      value,\n      degree: 0\n    };\n    // check we have a node in the minimum\n    if (this._minimum) {\n      // minimum node\n      var minimum = this._minimum;\n      // update left & right of node\n      node.left = minimum;\n      node.right = minimum.right;\n      minimum.right = node;\n      node.right.left = node;\n      // update minimum node in heap if needed\n      if (smaller(key, minimum.key)) {\n        // node has a smaller key, use it as minimum\n        this._minimum = node;\n      }\n    } else {\n      // set left & right\n      node.left = node;\n      node.right = node;\n      // this is the first node\n      this._minimum = node;\n    }\n    // increment number of nodes in heap\n    this._size++;\n    // return node\n    return node;\n  };\n\n  /**\n   * Returns the number of nodes in heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.size = function () {\n    return this._size;\n  };\n\n  /**\n   * Removes all elements from this heap.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.clear = function () {\n    this._minimum = null;\n    this._size = 0;\n  };\n\n  /**\n   * Returns true if the heap is empty, otherwise false.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.isEmpty = function () {\n    return this._size === 0;\n  };\n\n  /**\n   * Extracts the node with minimum key from heap. Amortized running\n   * time: O(log n).\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.extractMinimum = function () {\n    // node to remove\n    var node = this._minimum;\n    // check we have a minimum\n    if (node === null) {\n      return node;\n    }\n    // current minimum\n    var minimum = this._minimum;\n    // get number of children\n    var numberOfChildren = node.degree;\n    // pointer to the first child\n    var x = node.child;\n    // for each child of node do...\n    while (numberOfChildren > 0) {\n      // store node in right side\n      var tempRight = x.right;\n      // remove x from child list\n      x.left.right = x.right;\n      x.right.left = x.left;\n      // add x to root list of heap\n      x.left = minimum;\n      x.right = minimum.right;\n      minimum.right = x;\n      x.right.left = x;\n      // set Parent[x] to null\n      x.parent = null;\n      x = tempRight;\n      numberOfChildren--;\n    }\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left;\n    // update minimum\n    if (node === node.right) {\n      // empty\n      minimum = null;\n    } else {\n      // update minimum\n      minimum = node.right;\n      // we need to update the pointer to the root with minimum key\n      minimum = _findMinimumNode(minimum, this._size);\n    }\n    // decrement size of heap\n    this._size--;\n    // update minimum\n    this._minimum = minimum;\n    // return node\n    return node;\n  };\n\n  /**\n   * Removes a node from the heap given the reference to the node. The trees\n   * in the heap will be consolidated, if necessary. This operation may fail\n   * to remove the correct element if there are nodes with key value -Infinity.\n   * Running time: O(log n) amortized.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.remove = function (node) {\n    // decrease key value\n    this._minimum = _decreaseKey(this._minimum, node, -1);\n    // remove the smallest\n    this.extractMinimum();\n  };\n\n  /**\n   * Decreases the key value for a heap node, given the new value to take on.\n   * The structure of the heap may be changed and will not be consolidated.\n   * Running time: O(1) amortized.\n   * @memberof FibonacciHeap\n   */\n  function _decreaseKey(minimum, node, key) {\n    // set node key\n    node.key = key;\n    // get parent node\n    var parent = node.parent;\n    if (parent && smaller(node.key, parent.key)) {\n      // remove node from parent\n      _cut(minimum, node, parent);\n      // remove all nodes from parent to the root parent\n      _cascadingCut(minimum, parent);\n    }\n    // update minimum node if needed\n    if (smaller(node.key, minimum.key)) {\n      minimum = node;\n    }\n    // return minimum\n    return minimum;\n  }\n\n  /**\n   * The reverse of the link operation: removes node from the child list of parent.\n   * This method assumes that min is non-null. Running time: O(1).\n   * @memberof FibonacciHeap\n   */\n  function _cut(minimum, node, parent) {\n    // remove node from parent children and decrement Degree[parent]\n    node.left.right = node.right;\n    node.right.left = node.left;\n    parent.degree--;\n    // reset y.child if necessary\n    if (parent.child === node) {\n      parent.child = node.right;\n    }\n    // remove child if degree is 0\n    if (parent.degree === 0) {\n      parent.child = null;\n    }\n    // add node to root list of heap\n    node.left = minimum;\n    node.right = minimum.right;\n    minimum.right = node;\n    node.right.left = node;\n    // set parent[node] to null\n    node.parent = null;\n    // set mark[node] to false\n    node.mark = false;\n  }\n\n  /**\n   * Performs a cascading cut operation. This cuts node from its parent and then\n   * does the same for its parent, and so on up the tree.\n   * Running time: O(log n); O(1) excluding the recursion.\n   * @memberof FibonacciHeap\n   */\n  function _cascadingCut(minimum, node) {\n    // store parent node\n    var parent = node.parent;\n    // if there's a parent...\n    if (!parent) {\n      return;\n    }\n    // if node is unmarked, set it marked\n    if (!node.mark) {\n      node.mark = true;\n    } else {\n      // it's marked, cut it from parent\n      _cut(minimum, node, parent);\n      // cut its parent as well\n      _cascadingCut(parent);\n    }\n  }\n\n  /**\n   * Make the first node a child of the second one. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  var _linkNodes = function _linkNodes(node, parent) {\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left;\n    // make node a Child of parent\n    node.parent = parent;\n    if (!parent.child) {\n      parent.child = node;\n      node.right = node;\n      node.left = node;\n    } else {\n      node.left = parent.child;\n      node.right = parent.child.right;\n      parent.child.right = node;\n      node.right.left = node;\n    }\n    // increase degree[parent]\n    parent.degree++;\n    // set mark[node] false\n    node.mark = false;\n  };\n  function _findMinimumNode(minimum, size) {\n    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree\n    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;\n    // create list with initial capacity\n    var array = new Array(arraySize);\n    // find the number of root nodes.\n    var numRoots = 0;\n    var x = minimum;\n    if (x) {\n      numRoots++;\n      x = x.right;\n      while (x !== minimum) {\n        numRoots++;\n        x = x.right;\n      }\n    }\n    // vars\n    var y;\n    // For each node in root list do...\n    while (numRoots > 0) {\n      // access this node's degree..\n      var d = x.degree;\n      // get next node\n      var next = x.right;\n      // check if there is a node already in array with the same degree\n      while (true) {\n        // get node with the same degree is any\n        y = array[d];\n        if (!y) {\n          break;\n        }\n        // make one node with the same degree a child of the other, do this based on the key value.\n        if (larger(x.key, y.key)) {\n          var temp = y;\n          y = x;\n          x = temp;\n        }\n        // make y a child of x\n        _linkNodes(y, x);\n        // we have handled this degree, go to next one.\n        array[d] = null;\n        d++;\n      }\n      // save this node for later when we might encounter another of the same degree.\n      array[d] = x;\n      // move forward through list.\n      x = next;\n      numRoots--;\n    }\n    // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].\n    minimum = null;\n    // loop nodes in array\n    for (var i = 0; i < arraySize; i++) {\n      // get current node\n      y = array[i];\n      if (!y) {\n        continue;\n      }\n      // check if we have a linked list\n      if (minimum) {\n        // First remove node from root list.\n        y.left.right = y.right;\n        y.right.left = y.left;\n        // now add to root list, again.\n        y.left = minimum;\n        y.right = minimum.right;\n        minimum.right = y;\n        y.right.left = y;\n        // check if this is a new min.\n        if (smaller(y.key, minimum.key)) {\n          minimum = y;\n        }\n      } else {\n        minimum = y;\n      }\n    }\n    return minimum;\n  }\n  return FibonacciHeap;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["factory","name","dependencies","createFibonacciHeapClass","_ref","smaller","larger","oneOverLogPhi","Math","log","sqrt","FibonacciHeap","SyntaxError","_minimum","_size","prototype","type","isFibonacciHeap","insert","key","value","node","degree","minimum","left","right","size","clear","isEmpty","extractMinimum","numberOfChildren","x","child","tempRight","parent","_findMinimumNode","remove","_decreaseKey","_cut","_cascadingCut","mark","_linkNodes","arraySize","floor","array","Array","numRoots","y","d","next","temp","i","isClass"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/type/matrix/FibonacciHeap.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'FibonacciHeap';\nvar dependencies = ['smaller', 'larger'];\nexport var createFibonacciHeapClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    smaller,\n    larger\n  } = _ref;\n  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\n\n  /**\n   * Fibonacci Heap implementation, used interally for Matrix math.\n   * @class FibonacciHeap\n   * @constructor FibonacciHeap\n   */\n  function FibonacciHeap() {\n    if (!(this instanceof FibonacciHeap)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // initialize fields\n    this._minimum = null;\n    this._size = 0;\n  }\n\n  /**\n   * Attach type information\n   */\n  FibonacciHeap.prototype.type = 'FibonacciHeap';\n  FibonacciHeap.prototype.isFibonacciHeap = true;\n\n  /**\n   * Inserts a new data element into the heap. No heap consolidation is\n   * performed at this time, the new node is simply inserted into the root\n   * list of this heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.insert = function (key, value) {\n    // create node\n    var node = {\n      key,\n      value,\n      degree: 0\n    };\n    // check we have a node in the minimum\n    if (this._minimum) {\n      // minimum node\n      var minimum = this._minimum;\n      // update left & right of node\n      node.left = minimum;\n      node.right = minimum.right;\n      minimum.right = node;\n      node.right.left = node;\n      // update minimum node in heap if needed\n      if (smaller(key, minimum.key)) {\n        // node has a smaller key, use it as minimum\n        this._minimum = node;\n      }\n    } else {\n      // set left & right\n      node.left = node;\n      node.right = node;\n      // this is the first node\n      this._minimum = node;\n    }\n    // increment number of nodes in heap\n    this._size++;\n    // return node\n    return node;\n  };\n\n  /**\n   * Returns the number of nodes in heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.size = function () {\n    return this._size;\n  };\n\n  /**\n   * Removes all elements from this heap.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.clear = function () {\n    this._minimum = null;\n    this._size = 0;\n  };\n\n  /**\n   * Returns true if the heap is empty, otherwise false.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.isEmpty = function () {\n    return this._size === 0;\n  };\n\n  /**\n   * Extracts the node with minimum key from heap. Amortized running\n   * time: O(log n).\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.extractMinimum = function () {\n    // node to remove\n    var node = this._minimum;\n    // check we have a minimum\n    if (node === null) {\n      return node;\n    }\n    // current minimum\n    var minimum = this._minimum;\n    // get number of children\n    var numberOfChildren = node.degree;\n    // pointer to the first child\n    var x = node.child;\n    // for each child of node do...\n    while (numberOfChildren > 0) {\n      // store node in right side\n      var tempRight = x.right;\n      // remove x from child list\n      x.left.right = x.right;\n      x.right.left = x.left;\n      // add x to root list of heap\n      x.left = minimum;\n      x.right = minimum.right;\n      minimum.right = x;\n      x.right.left = x;\n      // set Parent[x] to null\n      x.parent = null;\n      x = tempRight;\n      numberOfChildren--;\n    }\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left;\n    // update minimum\n    if (node === node.right) {\n      // empty\n      minimum = null;\n    } else {\n      // update minimum\n      minimum = node.right;\n      // we need to update the pointer to the root with minimum key\n      minimum = _findMinimumNode(minimum, this._size);\n    }\n    // decrement size of heap\n    this._size--;\n    // update minimum\n    this._minimum = minimum;\n    // return node\n    return node;\n  };\n\n  /**\n   * Removes a node from the heap given the reference to the node. The trees\n   * in the heap will be consolidated, if necessary. This operation may fail\n   * to remove the correct element if there are nodes with key value -Infinity.\n   * Running time: O(log n) amortized.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.remove = function (node) {\n    // decrease key value\n    this._minimum = _decreaseKey(this._minimum, node, -1);\n    // remove the smallest\n    this.extractMinimum();\n  };\n\n  /**\n   * Decreases the key value for a heap node, given the new value to take on.\n   * The structure of the heap may be changed and will not be consolidated.\n   * Running time: O(1) amortized.\n   * @memberof FibonacciHeap\n   */\n  function _decreaseKey(minimum, node, key) {\n    // set node key\n    node.key = key;\n    // get parent node\n    var parent = node.parent;\n    if (parent && smaller(node.key, parent.key)) {\n      // remove node from parent\n      _cut(minimum, node, parent);\n      // remove all nodes from parent to the root parent\n      _cascadingCut(minimum, parent);\n    }\n    // update minimum node if needed\n    if (smaller(node.key, minimum.key)) {\n      minimum = node;\n    }\n    // return minimum\n    return minimum;\n  }\n\n  /**\n   * The reverse of the link operation: removes node from the child list of parent.\n   * This method assumes that min is non-null. Running time: O(1).\n   * @memberof FibonacciHeap\n   */\n  function _cut(minimum, node, parent) {\n    // remove node from parent children and decrement Degree[parent]\n    node.left.right = node.right;\n    node.right.left = node.left;\n    parent.degree--;\n    // reset y.child if necessary\n    if (parent.child === node) {\n      parent.child = node.right;\n    }\n    // remove child if degree is 0\n    if (parent.degree === 0) {\n      parent.child = null;\n    }\n    // add node to root list of heap\n    node.left = minimum;\n    node.right = minimum.right;\n    minimum.right = node;\n    node.right.left = node;\n    // set parent[node] to null\n    node.parent = null;\n    // set mark[node] to false\n    node.mark = false;\n  }\n\n  /**\n   * Performs a cascading cut operation. This cuts node from its parent and then\n   * does the same for its parent, and so on up the tree.\n   * Running time: O(log n); O(1) excluding the recursion.\n   * @memberof FibonacciHeap\n   */\n  function _cascadingCut(minimum, node) {\n    // store parent node\n    var parent = node.parent;\n    // if there's a parent...\n    if (!parent) {\n      return;\n    }\n    // if node is unmarked, set it marked\n    if (!node.mark) {\n      node.mark = true;\n    } else {\n      // it's marked, cut it from parent\n      _cut(minimum, node, parent);\n      // cut its parent as well\n      _cascadingCut(parent);\n    }\n  }\n\n  /**\n   * Make the first node a child of the second one. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  var _linkNodes = function _linkNodes(node, parent) {\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left;\n    // make node a Child of parent\n    node.parent = parent;\n    if (!parent.child) {\n      parent.child = node;\n      node.right = node;\n      node.left = node;\n    } else {\n      node.left = parent.child;\n      node.right = parent.child.right;\n      parent.child.right = node;\n      node.right.left = node;\n    }\n    // increase degree[parent]\n    parent.degree++;\n    // set mark[node] false\n    node.mark = false;\n  };\n  function _findMinimumNode(minimum, size) {\n    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree\n    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;\n    // create list with initial capacity\n    var array = new Array(arraySize);\n    // find the number of root nodes.\n    var numRoots = 0;\n    var x = minimum;\n    if (x) {\n      numRoots++;\n      x = x.right;\n      while (x !== minimum) {\n        numRoots++;\n        x = x.right;\n      }\n    }\n    // vars\n    var y;\n    // For each node in root list do...\n    while (numRoots > 0) {\n      // access this node's degree..\n      var d = x.degree;\n      // get next node\n      var next = x.right;\n      // check if there is a node already in array with the same degree\n      while (true) {\n        // get node with the same degree is any\n        y = array[d];\n        if (!y) {\n          break;\n        }\n        // make one node with the same degree a child of the other, do this based on the key value.\n        if (larger(x.key, y.key)) {\n          var temp = y;\n          y = x;\n          x = temp;\n        }\n        // make y a child of x\n        _linkNodes(y, x);\n        // we have handled this degree, go to next one.\n        array[d] = null;\n        d++;\n      }\n      // save this node for later when we might encounter another of the same degree.\n      array[d] = x;\n      // move forward through list.\n      x = next;\n      numRoots--;\n    }\n    // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].\n    minimum = null;\n    // loop nodes in array\n    for (var i = 0; i < arraySize; i++) {\n      // get current node\n      y = array[i];\n      if (!y) {\n        continue;\n      }\n      // check if we have a linked list\n      if (minimum) {\n        // First remove node from root list.\n        y.left.right = y.right;\n        y.right.left = y.left;\n        // now add to root list, again.\n        y.left = minimum;\n        y.right = minimum.right;\n        minimum.right = y;\n        y.right.left = y;\n        // check if this is a new min.\n        if (smaller(y.key, minimum.key)) {\n          minimum = y;\n        }\n      } else {\n        minimum = y;\n      }\n    }\n    return minimum;\n  }\n  return FibonacciHeap;\n}, {\n  isClass: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}