{"ast":null,"code":"import { isIndex } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { validateIndex } from '../../utils/array.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'subset';\nvar dependencies = ['typed', 'matrix'];\nexport var createSubset = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  /**\n   * Get or set a subset of a matrix or string.\n   *\n   * Syntax:\n   *     math.subset(value, index)                                // retrieve a subset\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n   *\n   * Examples:\n   *\n   *     // get a subset\n   *     const d = [[1, 2], [3, 4]]\n   *     math.subset(d, math.index(1, 0))        // returns 3\n   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]\n   *\n   *     // replace a subset\n   *     const e = []\n   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]\n   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]\n   *\n   *     // get submatrix using ranges\n   *     const M = [\n   *       [1,2,3],\n   *       [4,5,6],\n   *       [7,8,9]\n   *     ]\n   *     math.subset(M, math.index(math.range(0,2), math.range(0,3))) // [[1,2,3],[4,5,6]]\n   *\n   * See also:\n   *\n   *     size, resize, squeeze, index\n   *\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n   * @param {Index} index\n   *    For each dimension of the target, specifies an index or a list of\n   *    indices to fetch or set. `subset` uses the cartesian product of\n   *    the indices specified in each dimension.\n   * @param {*} [replacement]                 An array, matrix, or scalar.\n   *                                          If provided, the subset is replaced with replacement.\n   *                                          If not provided, the subset is returned\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n   *                                          the matrix is resized. If not provided,\n   *                                          math.matrix elements will be left undefined.\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\n   */\n  return typed(name, {\n    // get subset\n    'Array, Index': function ArrayIndex(value, index) {\n      var m = matrix(value);\n      var subset = m.subset(index); // returns a Matrix\n      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)\n    },\n\n    'Matrix, Index': function MatrixIndex(value, index) {\n      return value.subset(index);\n    },\n    'Object, Index': _getObjectProperty,\n    'string, Index': _getSubstring,\n    // set subset\n    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {\n      return matrix(clone(value)).subset(index, replacement, undefined).valueOf();\n    },\n    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {\n      return matrix(clone(value)).subset(index, replacement, defaultValue).valueOf();\n    },\n    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {\n      return value.clone().subset(index, replacement);\n    },\n    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {\n      return value.clone().subset(index, replacement, defaultValue);\n    },\n    'string, Index, string': _setSubstring,\n    'string, Index, string, string': _setSubstring,\n    'Object, Index, any': _setObjectProperty\n  });\n});\n\n/**\n * Retrieve a subset of a string\n * @param {string} str            string from which to get a substring\n * @param {Index} index           An index or list of indices (character positions)\n * @returns {string} substring\n * @private\n */\nfunction _getSubstring(str, index) {\n  if (!isIndex(index)) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size().length, 1);\n  }\n\n  // validate whether the range is out of range\n  var strLen = str.length;\n  validateIndex(index.min()[0], strLen);\n  validateIndex(index.max()[0], strLen);\n  var range = index.dimension(0);\n  var substr = '';\n  range.forEach(function (v) {\n    substr += str.charAt(v);\n  });\n  return substr;\n}\n\n/**\n * Replace a substring in a string\n * @param {string} str            string to be replaced\n * @param {Index} index           An index or list of indices (character positions)\n * @param {string} replacement    Replacement string\n * @param {string} [defaultValue] Default value to be uses when resizing\n *                                the string. is ' ' by default\n * @returns {string} result\n * @private\n */\nfunction _setSubstring(str, index, replacement, defaultValue) {\n  if (!index || index.isIndex !== true) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size().length, 1);\n  }\n  if (defaultValue !== undefined) {\n    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n      throw new TypeError('Single character expected as defaultValue');\n    }\n  } else {\n    defaultValue = ' ';\n  }\n  var range = index.dimension(0);\n  var len = range.size()[0];\n  if (len !== replacement.length) {\n    throw new DimensionError(range.size()[0], replacement.length);\n  }\n\n  // validate whether the range is out of range\n  var strLen = str.length;\n  validateIndex(index.min()[0]);\n  validateIndex(index.max()[0]);\n\n  // copy the string into an array with characters\n  var chars = [];\n  for (var i = 0; i < strLen; i++) {\n    chars[i] = str.charAt(i);\n  }\n  range.forEach(function (v, i) {\n    chars[v] = replacement.charAt(i[0]);\n  });\n\n  // initialize undefined characters with a space\n  if (chars.length > strLen) {\n    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {\n      if (!chars[_i]) {\n        chars[_i] = defaultValue;\n      }\n    }\n  }\n  return chars.join('');\n}\n\n/**\n * Retrieve a property from an object\n * @param {Object} object\n * @param {Index} index\n * @return {*} Returns the value of the property\n * @private\n */\nfunction _getObjectProperty(object, index) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n  return getSafeProperty(object, key);\n}\n\n/**\n * Set a property on an object\n * @param {Object} object\n * @param {Index} index\n * @param {*} replacement\n * @return {*} Returns the updated object\n * @private\n */\nfunction _setObjectProperty(object, index, replacement) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  // clone the object, and apply the property to the clone\n  var updated = clone(object);\n  setSafeProperty(updated, key, replacement);\n  return updated;\n}","map":{"version":3,"names":["isIndex","clone","validateIndex","getSafeProperty","setSafeProperty","DimensionError","factory","name","dependencies","createSubset","_ref","typed","matrix","ArrayIndex","value","index","m","subset","isScalar","valueOf","MatrixIndex","_getObjectProperty","_getSubstring","ArrayIndexAny","replacement","undefined","ArrayIndexAnyAny","defaultValue","MatrixIndexAny","MatrixIndexAnyAny","_setSubstring","_setObjectProperty","str","TypeError","size","length","strLen","min","max","range","dimension","substr","forEach","v","charAt","len","chars","i","_i","_len","join","object","key","updated"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/matrix/subset.js"],"sourcesContent":["import { isIndex } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { validateIndex } from '../../utils/array.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'subset';\nvar dependencies = ['typed', 'matrix'];\nexport var createSubset = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  /**\n   * Get or set a subset of a matrix or string.\n   *\n   * Syntax:\n   *     math.subset(value, index)                                // retrieve a subset\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n   *\n   * Examples:\n   *\n   *     // get a subset\n   *     const d = [[1, 2], [3, 4]]\n   *     math.subset(d, math.index(1, 0))        // returns 3\n   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]\n   *\n   *     // replace a subset\n   *     const e = []\n   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]\n   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]\n   *\n   *     // get submatrix using ranges\n   *     const M = [\n   *       [1,2,3],\n   *       [4,5,6],\n   *       [7,8,9]\n   *     ]\n   *     math.subset(M, math.index(math.range(0,2), math.range(0,3))) // [[1,2,3],[4,5,6]]\n   *\n   * See also:\n   *\n   *     size, resize, squeeze, index\n   *\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n   * @param {Index} index\n   *    For each dimension of the target, specifies an index or a list of\n   *    indices to fetch or set. `subset` uses the cartesian product of\n   *    the indices specified in each dimension.\n   * @param {*} [replacement]                 An array, matrix, or scalar.\n   *                                          If provided, the subset is replaced with replacement.\n   *                                          If not provided, the subset is returned\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n   *                                          the matrix is resized. If not provided,\n   *                                          math.matrix elements will be left undefined.\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\n   */\n  return typed(name, {\n    // get subset\n    'Array, Index': function ArrayIndex(value, index) {\n      var m = matrix(value);\n      var subset = m.subset(index); // returns a Matrix\n      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)\n    },\n\n    'Matrix, Index': function MatrixIndex(value, index) {\n      return value.subset(index);\n    },\n    'Object, Index': _getObjectProperty,\n    'string, Index': _getSubstring,\n    // set subset\n    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {\n      return matrix(clone(value)).subset(index, replacement, undefined).valueOf();\n    },\n    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {\n      return matrix(clone(value)).subset(index, replacement, defaultValue).valueOf();\n    },\n    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {\n      return value.clone().subset(index, replacement);\n    },\n    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {\n      return value.clone().subset(index, replacement, defaultValue);\n    },\n    'string, Index, string': _setSubstring,\n    'string, Index, string, string': _setSubstring,\n    'Object, Index, any': _setObjectProperty\n  });\n});\n\n/**\n * Retrieve a subset of a string\n * @param {string} str            string from which to get a substring\n * @param {Index} index           An index or list of indices (character positions)\n * @returns {string} substring\n * @private\n */\nfunction _getSubstring(str, index) {\n  if (!isIndex(index)) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size().length, 1);\n  }\n\n  // validate whether the range is out of range\n  var strLen = str.length;\n  validateIndex(index.min()[0], strLen);\n  validateIndex(index.max()[0], strLen);\n  var range = index.dimension(0);\n  var substr = '';\n  range.forEach(function (v) {\n    substr += str.charAt(v);\n  });\n  return substr;\n}\n\n/**\n * Replace a substring in a string\n * @param {string} str            string to be replaced\n * @param {Index} index           An index or list of indices (character positions)\n * @param {string} replacement    Replacement string\n * @param {string} [defaultValue] Default value to be uses when resizing\n *                                the string. is ' ' by default\n * @returns {string} result\n * @private\n */\nfunction _setSubstring(str, index, replacement, defaultValue) {\n  if (!index || index.isIndex !== true) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size().length, 1);\n  }\n  if (defaultValue !== undefined) {\n    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n      throw new TypeError('Single character expected as defaultValue');\n    }\n  } else {\n    defaultValue = ' ';\n  }\n  var range = index.dimension(0);\n  var len = range.size()[0];\n  if (len !== replacement.length) {\n    throw new DimensionError(range.size()[0], replacement.length);\n  }\n\n  // validate whether the range is out of range\n  var strLen = str.length;\n  validateIndex(index.min()[0]);\n  validateIndex(index.max()[0]);\n\n  // copy the string into an array with characters\n  var chars = [];\n  for (var i = 0; i < strLen; i++) {\n    chars[i] = str.charAt(i);\n  }\n  range.forEach(function (v, i) {\n    chars[v] = replacement.charAt(i[0]);\n  });\n\n  // initialize undefined characters with a space\n  if (chars.length > strLen) {\n    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {\n      if (!chars[_i]) {\n        chars[_i] = defaultValue;\n      }\n    }\n  }\n  return chars.join('');\n}\n\n/**\n * Retrieve a property from an object\n * @param {Object} object\n * @param {Index} index\n * @return {*} Returns the value of the property\n * @private\n */\nfunction _getObjectProperty(object, index) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n  return getSafeProperty(object, key);\n}\n\n/**\n * Set a property on an object\n * @param {Object} object\n * @param {Index} index\n * @param {*} replacement\n * @return {*} Returns the updated object\n * @private\n */\nfunction _setObjectProperty(object, index, replacement) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  // clone the object, and apply the property to the clone\n  var updated = clone(object);\n  setSafeProperty(updated, key, replacement);\n  return updated;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}