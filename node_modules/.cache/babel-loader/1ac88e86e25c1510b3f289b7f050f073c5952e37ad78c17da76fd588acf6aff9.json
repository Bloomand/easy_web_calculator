{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'bignumber';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createBignumber = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber\n  } = _ref;\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  return typed('bignumber', {\n    '': function _() {\n      return new BigNumber(0);\n    },\n    number: function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new BigNumber(x + '');\n    },\n    string: function string(x) {\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n      if (wordSizeSuffixMatch) {\n        // x has a word size suffix\n        var size = wordSizeSuffixMatch[2];\n        var n = BigNumber(wordSizeSuffixMatch[1]);\n        var twoPowSize = new BigNumber(2).pow(Number(size));\n        if (n.gt(twoPowSize.sub(1))) {\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n        var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);\n        if (n.gte(twoPowSizeSubOne)) {\n          return n.sub(twoPowSize);\n        } else {\n          return n;\n        }\n      }\n      return new BigNumber(x);\n    },\n    BigNumber: function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    Fraction: function Fraction(x) {\n      return new BigNumber(x.n).div(x.d).times(x.s);\n    },\n    null: function _null(x) {\n      return new BigNumber(0);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","map":{"version":3,"names":["factory","deepMap","name","dependencies","createBignumber","_ref","typed","BigNumber","_","number","x","string","wordSizeSuffixMatch","match","size","n","twoPowSize","pow","Number","gt","sub","SyntaxError","concat","twoPowSizeSubOne","gte","Fraction","div","d","times","s","null","_null","referToSelf","self"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/type/bignumber/function/bignumber.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'bignumber';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createBignumber = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber\n  } = _ref;\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  return typed('bignumber', {\n    '': function _() {\n      return new BigNumber(0);\n    },\n    number: function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new BigNumber(x + '');\n    },\n    string: function string(x) {\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n      if (wordSizeSuffixMatch) {\n        // x has a word size suffix\n        var size = wordSizeSuffixMatch[2];\n        var n = BigNumber(wordSizeSuffixMatch[1]);\n        var twoPowSize = new BigNumber(2).pow(Number(size));\n        if (n.gt(twoPowSize.sub(1))) {\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n        var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);\n        if (n.gte(twoPowSizeSubOne)) {\n          return n.sub(twoPowSize);\n        } else {\n          return n;\n        }\n      }\n      return new BigNumber(x);\n    },\n    BigNumber: function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    Fraction: function Fraction(x) {\n      return new BigNumber(x.n).div(x.d).times(x.s);\n    },\n    null: function _null(x) {\n      return new BigNumber(0);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,OAAO,QAAQ,8BAA8B;AACtD,IAAIC,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC;AACzC,OAAO,IAAIC,eAAe,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC9E,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAAC,WAAW,EAAE;IACxB,EAAE,EAAE,SAASE,CAACA,CAAA,EAAG;MACf,OAAO,IAAID,SAAS,CAAC,CAAC,CAAC;IACzB,CAAC;IACDE,MAAM,EAAE,SAASA,MAAMA,CAACC,CAAC,EAAE;MACzB;MACA,OAAO,IAAIH,SAAS,CAACG,CAAC,GAAG,EAAE,CAAC;IAC9B,CAAC;IACDC,MAAM,EAAE,SAASA,MAAMA,CAACD,CAAC,EAAE;MACzB,IAAIE,mBAAmB,GAAGF,CAAC,CAACG,KAAK,CAAC,+BAA+B,CAAC;MAClE,IAAID,mBAAmB,EAAE;QACvB;QACA,IAAIE,IAAI,GAAGF,mBAAmB,CAAC,CAAC,CAAC;QACjC,IAAIG,CAAC,GAAGR,SAAS,CAACK,mBAAmB,CAAC,CAAC,CAAC,CAAC;QACzC,IAAII,UAAU,GAAG,IAAIT,SAAS,CAAC,CAAC,CAAC,CAACU,GAAG,CAACC,MAAM,CAACJ,IAAI,CAAC,CAAC;QACnD,IAAIC,CAAC,CAACI,EAAE,CAACH,UAAU,CAACI,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;UAC3B,MAAM,IAAIC,WAAW,CAAC,WAAW,CAACC,MAAM,CAACZ,CAAC,EAAE,oBAAoB,CAAC,CAAC;QACpE;QACA,IAAIa,gBAAgB,GAAG,IAAIhB,SAAS,CAAC,CAAC,CAAC,CAACU,GAAG,CAACC,MAAM,CAACJ,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7D,IAAIC,CAAC,CAACS,GAAG,CAACD,gBAAgB,CAAC,EAAE;UAC3B,OAAOR,CAAC,CAACK,GAAG,CAACJ,UAAU,CAAC;QAC1B,CAAC,MAAM;UACL,OAAOD,CAAC;QACV;MACF;MACA,OAAO,IAAIR,SAAS,CAACG,CAAC,CAAC;IACzB,CAAC;IACDH,SAAS,EAAE,SAASA,SAASA,CAACG,CAAC,EAAE;MAC/B;MACA,OAAOA,CAAC;IACV,CAAC;IACDe,QAAQ,EAAE,SAASA,QAAQA,CAACf,CAAC,EAAE;MAC7B,OAAO,IAAIH,SAAS,CAACG,CAAC,CAACK,CAAC,CAAC,CAACW,GAAG,CAAChB,CAAC,CAACiB,CAAC,CAAC,CAACC,KAAK,CAAClB,CAAC,CAACmB,CAAC,CAAC;IAC/C,CAAC;IACDC,IAAI,EAAE,SAASC,KAAKA,CAACrB,CAAC,EAAE;MACtB,OAAO,IAAIH,SAAS,CAAC,CAAC,CAAC;IACzB,CAAC;IACD,gBAAgB,EAAED,KAAK,CAAC0B,WAAW,CAACC,IAAI,IAAIvB,CAAC,IAAIT,OAAO,CAACS,CAAC,EAAEuB,IAAI,CAAC;EACnE,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}