{"ast":null,"code":"import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { createEmptyMap } from '../../utils/map.js';\nvar name = 'evaluate';\nvar dependencies = ['typed', 'parse'];\nexport var createEvaluate = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    parse\n  } = _ref;\n  /**\n   * Evaluate an expression.\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.evaluate(expr)\n   *     math.evaluate(expr, scope)\n   *     math.evaluate([expr1, expr2, expr3, ...])\n   *     math.evaluate([expr1, expr2, expr3, ...], scope)\n   *\n   * Example:\n   *\n   *     math.evaluate('(2+3)/4')                // 1.25\n   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5\n   *     math.evaluate('sqrt(-4)')               // 2i\n   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]\n   *\n   *     let scope = {a:3, b:4}\n   *     math.evaluate('a * b', scope)           // 12\n   *\n   * See also:\n   *\n   *    parse, compile\n   *\n   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n   * @param {Object} [scope]                    Scope to read/write variables\n   * @return {*} The result of the expression\n   * @throws {Error}\n   */\n  return typed(name, {\n    string: function string(expr) {\n      var scope = createEmptyMap();\n      return parse(expr).compile().evaluate(scope);\n    },\n    'string, Map | Object': function stringMapObject(expr, scope) {\n      return parse(expr).compile().evaluate(scope);\n    },\n    'Array | Matrix': function ArrayMatrix(expr) {\n      var scope = createEmptyMap();\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    },\n    'Array | Matrix, Map | Object': function ArrayMatrixMapObject(expr, scope) {\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    }\n  });\n});","map":{"version":3,"names":["deepMap","factory","createEmptyMap","name","dependencies","createEvaluate","_ref","typed","parse","string","expr","scope","compile","evaluate","stringMapObject","ArrayMatrix","entry","ArrayMatrixMapObject"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/expression/function/evaluate.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { createEmptyMap } from '../../utils/map.js';\nvar name = 'evaluate';\nvar dependencies = ['typed', 'parse'];\nexport var createEvaluate = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    parse\n  } = _ref;\n  /**\n   * Evaluate an expression.\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.evaluate(expr)\n   *     math.evaluate(expr, scope)\n   *     math.evaluate([expr1, expr2, expr3, ...])\n   *     math.evaluate([expr1, expr2, expr3, ...], scope)\n   *\n   * Example:\n   *\n   *     math.evaluate('(2+3)/4')                // 1.25\n   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5\n   *     math.evaluate('sqrt(-4)')               // 2i\n   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]\n   *\n   *     let scope = {a:3, b:4}\n   *     math.evaluate('a * b', scope)           // 12\n   *\n   * See also:\n   *\n   *    parse, compile\n   *\n   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n   * @param {Object} [scope]                    Scope to read/write variables\n   * @return {*} The result of the expression\n   * @throws {Error}\n   */\n  return typed(name, {\n    string: function string(expr) {\n      var scope = createEmptyMap();\n      return parse(expr).compile().evaluate(scope);\n    },\n    'string, Map | Object': function stringMapObject(expr, scope) {\n      return parse(expr).compile().evaluate(scope);\n    },\n    'Array | Matrix': function ArrayMatrix(expr) {\n      var scope = createEmptyMap();\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    },\n    'Array | Matrix, Map | Object': function ArrayMatrixMapObject(expr, scope) {\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,cAAc,QAAQ,oBAAoB;AACnD,IAAIC,IAAI,GAAG,UAAU;AACrB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC;AACrC,OAAO,IAAIC,cAAc,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC7E,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBM,MAAM,EAAE,SAASA,MAAMA,CAACC,IAAI,EAAE;MAC5B,IAAIC,KAAK,GAAGT,cAAc,EAAE;MAC5B,OAAOM,KAAK,CAACE,IAAI,CAAC,CAACE,OAAO,EAAE,CAACC,QAAQ,CAACF,KAAK,CAAC;IAC9C,CAAC;IACD,sBAAsB,EAAE,SAASG,eAAeA,CAACJ,IAAI,EAAEC,KAAK,EAAE;MAC5D,OAAOH,KAAK,CAACE,IAAI,CAAC,CAACE,OAAO,EAAE,CAACC,QAAQ,CAACF,KAAK,CAAC;IAC9C,CAAC;IACD,gBAAgB,EAAE,SAASI,WAAWA,CAACL,IAAI,EAAE;MAC3C,IAAIC,KAAK,GAAGT,cAAc,EAAE;MAC5B,OAAOF,OAAO,CAACU,IAAI,EAAE,UAAUM,KAAK,EAAE;QACpC,OAAOR,KAAK,CAACQ,KAAK,CAAC,CAACJ,OAAO,EAAE,CAACC,QAAQ,CAACF,KAAK,CAAC;MAC/C,CAAC,CAAC;IACJ,CAAC;IACD,8BAA8B,EAAE,SAASM,oBAAoBA,CAACP,IAAI,EAAEC,KAAK,EAAE;MACzE,OAAOX,OAAO,CAACU,IAAI,EAAE,UAAUM,KAAK,EAAE;QACpC,OAAOR,KAAK,CAACQ,KAAK,CAAC,CAACJ,OAAO,EAAE,CAACC,QAAQ,CAACF,KAAK,CAAC;MAC/C,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}