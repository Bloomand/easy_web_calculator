{"ast":null,"code":"import { isNode } from '../../utils/is.js';\nimport { keywords } from '../keywords.js';\nimport { deepStrictEqual } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMap } from '../../utils/map.js';\nvar name = 'Node';\nvar dependencies = ['mathWithTransform'];\nexport var createNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    mathWithTransform\n  } = _ref;\n  /**\n   * Validate the symbol names of a scope.\n   * Throws an error when the scope contains an illegal symbol.\n   * @param {Object} scope\n   */\n  function _validateScope(scope) {\n    for (var symbol of [...keywords]) {\n      if (scope.has(symbol)) {\n        throw new Error('Scope contains an illegal symbol, \"' + symbol + '\" is a reserved keyword');\n      }\n    }\n  }\n  class Node {\n    get type() {\n      return 'Node';\n    }\n    get isNode() {\n      return true;\n    }\n\n    /**\n     * Evaluate the node\n     * @param {Object} [scope]  Scope to read/write variables\n     * @return {*}              Returns the result\n     */\n    evaluate(scope) {\n      return this.compile().evaluate(scope);\n    }\n\n    /**\n     * Compile the node into an optimized, evauatable JavaScript function\n     * @return {{evaluate: function([Object])}} object\n     *                Returns an object with a function 'evaluate',\n     *                which can be invoked as expr.evaluate([scope: Object]),\n     *                where scope is an optional object with\n     *                variables.\n     */\n    compile() {\n      var expr = this._compile(mathWithTransform, {});\n      var args = {};\n      var context = null;\n      function evaluate(scope) {\n        var s = createMap(scope);\n        _validateScope(s);\n        return expr(s, args, context);\n      }\n      return {\n        evaluate\n      };\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      throw new Error('Method _compile must be implemented by type ' + this.type);\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      // must be implemented by each of the Node implementations\n      throw new Error('Cannot run forEach on a Node interface');\n    }\n\n    /**\n     * Create a new Node whose children are the results of calling the\n     * provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {OperatorNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      // must be implemented by each of the Node implementations\n      throw new Error('Cannot run map on a Node interface');\n    }\n\n    /**\n     * Validate whether an object is a Node, for use with map\n     * @param {Node} node\n     * @returns {Node} Returns the input if it's a node, else throws an Error\n     * @protected\n     */\n    _ifNode(node) {\n      if (!isNode(node)) {\n        throw new TypeError('Callback function must return a Node');\n      }\n      return node;\n    }\n\n    /**\n     * Recursively traverse all nodes in a node tree. Executes given callback for\n     * this node and each of its child nodes.\n     * @param {function(node: Node, path: string, parent: Node)} callback\n     *          A callback called for every node in the node tree.\n     */\n    traverse(callback) {\n      // execute callback for itself\n      // eslint-disable-next-line\n      callback(this, null, null);\n\n      // recursively traverse over all children of a node\n      function _traverse(node, callback) {\n        node.forEach(function (child, path, parent) {\n          callback(child, path, parent);\n          _traverse(child, callback);\n        });\n      }\n      _traverse(this, callback);\n    }\n\n    /**\n     * Recursively transform a node tree via a transform function.\n     *\n     * For example, to replace all nodes of type SymbolNode having name 'x' with\n     * a ConstantNode with value 2:\n     *\n     *     const res = Node.transform(function (node, path, parent) {\n     *       if (node && node.isSymbolNode) && (node.name === 'x')) {\n     *         return new ConstantNode(2)\n     *       }\n     *       else {\n     *         return node\n     *       }\n     *     })\n     *\n     * @param {function(node: Node, path: string, parent: Node) : Node} callback\n     *          A mapping function accepting a node, and returning\n     *          a replacement for the node or the original node. The \"signature\"\n     *          of the callback must be:\n     *          callback(node: Node, index: string, parent: Node) : Node\n     * @return {Node} Returns the original node or its replacement\n     */\n    transform(callback) {\n      function _transform(child, path, parent) {\n        var replacement = callback(child, path, parent);\n        if (replacement !== child) {\n          // stop iterating when the node is replaced\n          return replacement;\n        }\n        return child.map(_transform);\n      }\n      return _transform(this, null, null);\n    }\n\n    /**\n     * Find any node in the node tree matching given filter function. For\n     * example, to find all nodes of type SymbolNode having name 'x':\n     *\n     *     const results = Node.filter(function (node) {\n     *       return (node && node.isSymbolNode) && (node.name === 'x')\n     *     })\n     *\n     * @param {function(node: Node, path: string, parent: Node) : Node} callback\n     *            A test function returning true when a node matches, and false\n     *            otherwise. Function signature:\n     *            callback(node: Node, index: string, parent: Node) : boolean\n     * @return {Node[]} nodes\n     *            An array with nodes matching given filter criteria\n     */\n    filter(callback) {\n      var nodes = [];\n      this.traverse(function (node, path, parent) {\n        if (callback(node, path, parent)) {\n          nodes.push(node);\n        }\n      });\n      return nodes;\n    }\n\n    /**\n     * Create a shallow clone of this node\n     * @return {Node}\n     */\n    clone() {\n      // must be implemented by each of the Node implementations\n      throw new Error('Cannot clone a Node interface');\n    }\n\n    /**\n     * Create a deep clone of this node\n     * @return {Node}\n     */\n    cloneDeep() {\n      return this.map(function (node) {\n        return node.cloneDeep();\n      });\n    }\n\n    /**\n     * Deep compare this node with another node.\n     * @param {Node} other\n     * @return {boolean} Returns true when both nodes are of the same type and\n     *                   contain the same values (as do their childs)\n     */\n    equals(other) {\n      return other ? this.type === other.type && deepStrictEqual(this, other) : false;\n    }\n\n    /**\n     * Get string representation. (wrapper function)\n     *\n     * This function can get an object of the following form:\n     * {\n     *    handler: //This can be a callback function of the form\n     *             // \"function callback(node, options)\"or\n     *             // a map that maps function names (used in FunctionNodes)\n     *             // to callbacks\n     *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n     * }\n     *\n     * @param {Object} [options]\n     * @return {string}\n     */\n    toString(options) {\n      var customString = this._getCustomString(options);\n      if (typeof customString !== 'undefined') {\n        return customString;\n      }\n      return this._toString(options);\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * Both .toJSON() and the static .fromJSON(json) should be implemented by all\n     * implementations of Node\n     * @returns {Object}\n     */\n    toJSON() {\n      throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);\n    }\n\n    /**\n     * Get HTML representation. (wrapper function)\n     *\n     * This function can get an object of the following form:\n     * {\n     *    handler: //This can be a callback function of the form\n     *             // \"function callback(node, options)\" or\n     *             // a map that maps function names (used in FunctionNodes)\n     *             // to callbacks\n     *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n     * }\n     *\n     * @param {Object} [options]\n     * @return {string}\n     */\n    toHTML(options) {\n      var customString = this._getCustomString(options);\n      if (typeof customString !== 'undefined') {\n        return customString;\n      }\n      return this.toHTML(options);\n    }\n\n    /**\n     * Internal function to generate the string output.\n     * This has to be implemented by every Node\n     *\n     * @throws {Error}\n     */\n    _toString() {\n      // must be implemented by each of the Node implementations\n      throw new Error('_toString not implemented for ' + this.type);\n    }\n\n    /**\n     * Get LaTeX representation. (wrapper function)\n     *\n     * This function can get an object of the following form:\n     * {\n     *    handler: //This can be a callback function of the form\n     *             // \"function callback(node, options)\"or\n     *             // a map that maps function names (used in FunctionNodes)\n     *             // to callbacks\n     *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n     * }\n     *\n     * @param {Object} [options]\n     * @return {string}\n     */\n    toTex(options) {\n      var customString = this._getCustomString(options);\n      if (typeof customString !== 'undefined') {\n        return customString;\n      }\n      return this._toTex(options);\n    }\n\n    /**\n     * Internal function to generate the LaTeX output.\n     * This has to be implemented by every Node\n     *\n     * @param {Object} [options]\n     * @throws {Error}\n     */\n    _toTex(options) {\n      // must be implemented by each of the Node implementations\n      throw new Error('_toTex not implemented for ' + this.type);\n    }\n\n    /**\n     * Helper used by `to...` functions.\n     */\n    _getCustomString(options) {\n      if (options && typeof options === 'object') {\n        switch (typeof options.handler) {\n          case 'object':\n          case 'undefined':\n            return;\n          case 'function':\n            return options.handler(this, options);\n          default:\n            throw new TypeError('Object or function expected as callback');\n        }\n      }\n    }\n\n    /**\n     * Get identifier.\n     * @return {string}\n     */\n    getIdentifier() {\n      return this.type;\n    }\n\n    /**\n     * Get the content of the current Node.\n     * @return {Node} node\n     **/\n    getContent() {\n      return this;\n    }\n  }\n  return Node;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["isNode","keywords","deepStrictEqual","factory","createMap","name","dependencies","createNode","_ref","mathWithTransform","_validateScope","scope","symbol","has","Error","Node","type","evaluate","compile","expr","_compile","args","context","s","math","argNames","forEach","callback","map","_ifNode","node","TypeError","traverse","_traverse","child","path","parent","transform","_transform","replacement","filter","nodes","push","clone","cloneDeep","equals","other","toString","options","customString","_getCustomString","_toString","toJSON","toHTML","toTex","_toTex","handler","getIdentifier","getContent","isClass"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/expression/node/Node.js"],"sourcesContent":["import { isNode } from '../../utils/is.js';\nimport { keywords } from '../keywords.js';\nimport { deepStrictEqual } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMap } from '../../utils/map.js';\nvar name = 'Node';\nvar dependencies = ['mathWithTransform'];\nexport var createNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    mathWithTransform\n  } = _ref;\n  /**\n   * Validate the symbol names of a scope.\n   * Throws an error when the scope contains an illegal symbol.\n   * @param {Object} scope\n   */\n  function _validateScope(scope) {\n    for (var symbol of [...keywords]) {\n      if (scope.has(symbol)) {\n        throw new Error('Scope contains an illegal symbol, \"' + symbol + '\" is a reserved keyword');\n      }\n    }\n  }\n  class Node {\n    get type() {\n      return 'Node';\n    }\n    get isNode() {\n      return true;\n    }\n\n    /**\n     * Evaluate the node\n     * @param {Object} [scope]  Scope to read/write variables\n     * @return {*}              Returns the result\n     */\n    evaluate(scope) {\n      return this.compile().evaluate(scope);\n    }\n\n    /**\n     * Compile the node into an optimized, evauatable JavaScript function\n     * @return {{evaluate: function([Object])}} object\n     *                Returns an object with a function 'evaluate',\n     *                which can be invoked as expr.evaluate([scope: Object]),\n     *                where scope is an optional object with\n     *                variables.\n     */\n    compile() {\n      var expr = this._compile(mathWithTransform, {});\n      var args = {};\n      var context = null;\n      function evaluate(scope) {\n        var s = createMap(scope);\n        _validateScope(s);\n        return expr(s, args, context);\n      }\n      return {\n        evaluate\n      };\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      throw new Error('Method _compile must be implemented by type ' + this.type);\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      // must be implemented by each of the Node implementations\n      throw new Error('Cannot run forEach on a Node interface');\n    }\n\n    /**\n     * Create a new Node whose children are the results of calling the\n     * provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {OperatorNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      // must be implemented by each of the Node implementations\n      throw new Error('Cannot run map on a Node interface');\n    }\n\n    /**\n     * Validate whether an object is a Node, for use with map\n     * @param {Node} node\n     * @returns {Node} Returns the input if it's a node, else throws an Error\n     * @protected\n     */\n    _ifNode(node) {\n      if (!isNode(node)) {\n        throw new TypeError('Callback function must return a Node');\n      }\n      return node;\n    }\n\n    /**\n     * Recursively traverse all nodes in a node tree. Executes given callback for\n     * this node and each of its child nodes.\n     * @param {function(node: Node, path: string, parent: Node)} callback\n     *          A callback called for every node in the node tree.\n     */\n    traverse(callback) {\n      // execute callback for itself\n      // eslint-disable-next-line\n      callback(this, null, null);\n\n      // recursively traverse over all children of a node\n      function _traverse(node, callback) {\n        node.forEach(function (child, path, parent) {\n          callback(child, path, parent);\n          _traverse(child, callback);\n        });\n      }\n      _traverse(this, callback);\n    }\n\n    /**\n     * Recursively transform a node tree via a transform function.\n     *\n     * For example, to replace all nodes of type SymbolNode having name 'x' with\n     * a ConstantNode with value 2:\n     *\n     *     const res = Node.transform(function (node, path, parent) {\n     *       if (node && node.isSymbolNode) && (node.name === 'x')) {\n     *         return new ConstantNode(2)\n     *       }\n     *       else {\n     *         return node\n     *       }\n     *     })\n     *\n     * @param {function(node: Node, path: string, parent: Node) : Node} callback\n     *          A mapping function accepting a node, and returning\n     *          a replacement for the node or the original node. The \"signature\"\n     *          of the callback must be:\n     *          callback(node: Node, index: string, parent: Node) : Node\n     * @return {Node} Returns the original node or its replacement\n     */\n    transform(callback) {\n      function _transform(child, path, parent) {\n        var replacement = callback(child, path, parent);\n        if (replacement !== child) {\n          // stop iterating when the node is replaced\n          return replacement;\n        }\n        return child.map(_transform);\n      }\n      return _transform(this, null, null);\n    }\n\n    /**\n     * Find any node in the node tree matching given filter function. For\n     * example, to find all nodes of type SymbolNode having name 'x':\n     *\n     *     const results = Node.filter(function (node) {\n     *       return (node && node.isSymbolNode) && (node.name === 'x')\n     *     })\n     *\n     * @param {function(node: Node, path: string, parent: Node) : Node} callback\n     *            A test function returning true when a node matches, and false\n     *            otherwise. Function signature:\n     *            callback(node: Node, index: string, parent: Node) : boolean\n     * @return {Node[]} nodes\n     *            An array with nodes matching given filter criteria\n     */\n    filter(callback) {\n      var nodes = [];\n      this.traverse(function (node, path, parent) {\n        if (callback(node, path, parent)) {\n          nodes.push(node);\n        }\n      });\n      return nodes;\n    }\n\n    /**\n     * Create a shallow clone of this node\n     * @return {Node}\n     */\n    clone() {\n      // must be implemented by each of the Node implementations\n      throw new Error('Cannot clone a Node interface');\n    }\n\n    /**\n     * Create a deep clone of this node\n     * @return {Node}\n     */\n    cloneDeep() {\n      return this.map(function (node) {\n        return node.cloneDeep();\n      });\n    }\n\n    /**\n     * Deep compare this node with another node.\n     * @param {Node} other\n     * @return {boolean} Returns true when both nodes are of the same type and\n     *                   contain the same values (as do their childs)\n     */\n    equals(other) {\n      return other ? this.type === other.type && deepStrictEqual(this, other) : false;\n    }\n\n    /**\n     * Get string representation. (wrapper function)\n     *\n     * This function can get an object of the following form:\n     * {\n     *    handler: //This can be a callback function of the form\n     *             // \"function callback(node, options)\"or\n     *             // a map that maps function names (used in FunctionNodes)\n     *             // to callbacks\n     *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n     * }\n     *\n     * @param {Object} [options]\n     * @return {string}\n     */\n    toString(options) {\n      var customString = this._getCustomString(options);\n      if (typeof customString !== 'undefined') {\n        return customString;\n      }\n      return this._toString(options);\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * Both .toJSON() and the static .fromJSON(json) should be implemented by all\n     * implementations of Node\n     * @returns {Object}\n     */\n    toJSON() {\n      throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);\n    }\n\n    /**\n     * Get HTML representation. (wrapper function)\n     *\n     * This function can get an object of the following form:\n     * {\n     *    handler: //This can be a callback function of the form\n     *             // \"function callback(node, options)\" or\n     *             // a map that maps function names (used in FunctionNodes)\n     *             // to callbacks\n     *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n     * }\n     *\n     * @param {Object} [options]\n     * @return {string}\n     */\n    toHTML(options) {\n      var customString = this._getCustomString(options);\n      if (typeof customString !== 'undefined') {\n        return customString;\n      }\n      return this.toHTML(options);\n    }\n\n    /**\n     * Internal function to generate the string output.\n     * This has to be implemented by every Node\n     *\n     * @throws {Error}\n     */\n    _toString() {\n      // must be implemented by each of the Node implementations\n      throw new Error('_toString not implemented for ' + this.type);\n    }\n\n    /**\n     * Get LaTeX representation. (wrapper function)\n     *\n     * This function can get an object of the following form:\n     * {\n     *    handler: //This can be a callback function of the form\n     *             // \"function callback(node, options)\"or\n     *             // a map that maps function names (used in FunctionNodes)\n     *             // to callbacks\n     *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n     * }\n     *\n     * @param {Object} [options]\n     * @return {string}\n     */\n    toTex(options) {\n      var customString = this._getCustomString(options);\n      if (typeof customString !== 'undefined') {\n        return customString;\n      }\n      return this._toTex(options);\n    }\n\n    /**\n     * Internal function to generate the LaTeX output.\n     * This has to be implemented by every Node\n     *\n     * @param {Object} [options]\n     * @throws {Error}\n     */\n    _toTex(options) {\n      // must be implemented by each of the Node implementations\n      throw new Error('_toTex not implemented for ' + this.type);\n    }\n\n    /**\n     * Helper used by `to...` functions.\n     */\n    _getCustomString(options) {\n      if (options && typeof options === 'object') {\n        switch (typeof options.handler) {\n          case 'object':\n          case 'undefined':\n            return;\n          case 'function':\n            return options.handler(this, options);\n          default:\n            throw new TypeError('Object or function expected as callback');\n        }\n      }\n    }\n\n    /**\n     * Get identifier.\n     * @return {string}\n     */\n    getIdentifier() {\n      return this.type;\n    }\n\n    /**\n     * Get the content of the current Node.\n     * @return {Node} node\n     **/\n    getContent() {\n      return this;\n    }\n  }\n  return Node;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}