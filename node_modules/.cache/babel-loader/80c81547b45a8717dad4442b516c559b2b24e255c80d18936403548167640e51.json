{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.typed = factory());\n})(this, function () {\n  'use strict';\n\n  function _createForOfIteratorHelper(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n        var i = 0;\n        var F = function F() {};\n        return {\n          s: F,\n          n: function n() {\n            if (i >= o.length) return {\n              done: true\n            };\n            return {\n              done: false,\n              value: o[i++]\n            };\n          },\n          e: function e(_e) {\n            throw _e;\n          },\n          f: F\n        };\n      }\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true,\n      didErr = false,\n      err;\n    return {\n      s: function s() {\n        it = it.call(o);\n      },\n      n: function n() {\n        var step = it.next();\n        normalCompletion = step.done;\n        return step;\n      },\n      e: function e(_e2) {\n        didErr = true;\n        err = _e2;\n      },\n      f: function f() {\n        try {\n          if (!normalCompletion && it.return != null) it.return();\n        } finally {\n          if (didErr) throw err;\n        }\n      }\n    };\n  }\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for (var i = 0, arr2 = new Array(len); i < len; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n      return typeof obj;\n    } : function (obj) {\n      return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n  }\n  function ok() {\n    return true;\n  }\n  function notOk() {\n    return false;\n  }\n  function undef() {\n    return undefined;\n  }\n  var NOT_TYPED_FUNCTION = 'Argument is not a typed-function.';\n  /**\n   * @typedef {{\n   *   params: Param[],\n   *   fn: function,\n   *   test: function,\n   *   implementation: function\n   * }} Signature\n   *\n   * @typedef {{\n   *   types: Type[],\n   *   hasAny: boolean,\n   *   hasConversion: boolean,\n   *   restParam: boolean\n   * }} Param\n   *\n   * @typedef {{\n   *   name: string,\n   *   typeIndex: number,\n   *   test: function,\n   *   isAny: boolean,\n   *   conversion?: ConversionDef,\n   *   conversionIndex: number,\n   * }} Type\n   *\n   * @typedef {{\n   *   from: string,\n   *   to: string,\n   *   convert: function (*) : *\n   * }} ConversionDef\n   *\n   * @typedef {{\n   *   name: string,\n   *   test: function(*) : boolean,\n   *   isAny?: boolean\n   * }} TypeDef\n   */\n\n  /**\n   * @returns {() => function}\n   */\n\n  function create() {\n    // data type tests\n\n    /**\n     * Returns true if the argument is a non-null \"plain\" object\n     */\n    function isPlainObject(x) {\n      return _typeof(x) === 'object' && x !== null && x.constructor === Object;\n    }\n    var _types = [{\n      name: 'number',\n      test: function test(x) {\n        return typeof x === 'number';\n      }\n    }, {\n      name: 'string',\n      test: function test(x) {\n        return typeof x === 'string';\n      }\n    }, {\n      name: 'boolean',\n      test: function test(x) {\n        return typeof x === 'boolean';\n      }\n    }, {\n      name: 'Function',\n      test: function test(x) {\n        return typeof x === 'function';\n      }\n    }, {\n      name: 'Array',\n      test: Array.isArray\n    }, {\n      name: 'Date',\n      test: function test(x) {\n        return x instanceof Date;\n      }\n    }, {\n      name: 'RegExp',\n      test: function test(x) {\n        return x instanceof RegExp;\n      }\n    }, {\n      name: 'Object',\n      test: isPlainObject\n    }, {\n      name: 'null',\n      test: function test(x) {\n        return x === null;\n      }\n    }, {\n      name: 'undefined',\n      test: function test(x) {\n        return x === undefined;\n      }\n    }];\n    var anyType = {\n      name: 'any',\n      test: ok,\n      isAny: true\n    }; // Data structures to track the types. As these are local variables in\n    // create(), each typed universe will get its own copy, but the variables\n    // will only be accessible through the (closures of the) functions supplied\n    // as properties of the typed object, not directly.\n    // These will be initialized in clear() below\n\n    var typeMap; // primary store of all types\n\n    var typeList; // Array of just type names, for the sake of ordering\n    // And similar data structures for the type conversions:\n\n    var nConversions = 0; // the actual conversions are stored on a property of the destination types\n    // This is a temporary object, will be replaced with a function at the end\n\n    var typed = {\n      createCount: 0\n    };\n    /**\n     * Takes a type name and returns the corresponding official type object\n     * for that type.\n     *\n     * @param {string} typeName\n     * @returns {TypeDef} type\n     */\n\n    function findType(typeName) {\n      var type = typeMap.get(typeName);\n      if (type) {\n        return type;\n      } // Remainder is error handling\n\n      var message = 'Unknown type \"' + typeName + '\"';\n      var name = typeName.toLowerCase();\n      var otherName;\n      var _iterator = _createForOfIteratorHelper(typeList),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          otherName = _step.value;\n          if (otherName.toLowerCase() === name) {\n            message += '. Did you mean \"' + otherName + '\" ?';\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      throw new TypeError(message);\n    }\n    /**\n     * Adds an array `types` of type definitions to this typed instance.\n     * Each type definition should be an object with properties:\n     * 'name' - a string giving the name of the type; 'test' - function\n     * returning a boolean that tests membership in the type; and optionally\n     * 'isAny' - true only for the 'any' type.\n     *\n     * The second optional argument, `before`, gives the name of a type that\n     * these types should be added before. The new types are added in the\n     * order specified.\n     * @param {TypeDef[]} types\n     * @param {string | boolean} [beforeSpec='any'] before\n     */\n\n    function addTypes(types) {\n      var beforeSpec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'any';\n      var beforeIndex = beforeSpec ? findType(beforeSpec).index : typeList.length;\n      var newTypes = [];\n      for (var i = 0; i < types.length; ++i) {\n        if (!types[i] || typeof types[i].name !== 'string' || typeof types[i].test !== 'function') {\n          throw new TypeError('Object with properties {name: string, test: function} expected');\n        }\n        var typeName = types[i].name;\n        if (typeMap.has(typeName)) {\n          throw new TypeError('Duplicate type name \"' + typeName + '\"');\n        }\n        newTypes.push(typeName);\n        typeMap.set(typeName, {\n          name: typeName,\n          test: types[i].test,\n          isAny: types[i].isAny,\n          index: beforeIndex + i,\n          conversionsTo: [] // Newly added type can't have any conversions to it\n        });\n      } // update the typeList\n\n      var affectedTypes = typeList.slice(beforeIndex);\n      typeList = typeList.slice(0, beforeIndex).concat(newTypes).concat(affectedTypes); // Fix the indices\n\n      for (var _i = beforeIndex + newTypes.length; _i < typeList.length; ++_i) {\n        typeMap.get(typeList[_i]).index = _i;\n      }\n    }\n    /**\n     * Removes all types and conversions from this typed instance.\n     * May cause previously constructed typed-functions to throw\n     * strange errors when they are called with types that do not\n     * match any of their signatures.\n     */\n\n    function clear() {\n      typeMap = new Map();\n      typeList = [];\n      nConversions = 0;\n      addTypes([anyType], false);\n    } // initialize the types to the default list\n\n    clear();\n    addTypes(_types);\n    /**\n     * Removes all conversions, leaving the types alone.\n     */\n\n    function clearConversions() {\n      var typeName;\n      var _iterator2 = _createForOfIteratorHelper(typeList),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          typeName = _step2.value;\n          typeMap.get(typeName).conversionsTo = [];\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      nConversions = 0;\n    }\n    /**\n     * Find the type names that match a value.\n     * @param {*} value\n     * @return {string[]} Array of names of types for which\n     *                  the type test matches the value.\n     */\n\n    function findTypeNames(value) {\n      var matches = typeList.filter(function (name) {\n        var type = typeMap.get(name);\n        return !type.isAny && type.test(value);\n      });\n      if (matches.length) {\n        return matches;\n      }\n      return ['any'];\n    }\n    /**\n     * Check if an entity is a typed function created by any instance\n     * @param {any} entity\n     * @returns {boolean}\n     */\n\n    function isTypedFunction(entity) {\n      return entity && typeof entity === 'function' && '_typedFunctionData' in entity;\n    }\n    /**\n     * Find a specific signature from a (composed) typed function, for example:\n     *\n     *   typed.findSignature(fn, ['number', 'string'])\n     *   typed.findSignature(fn, 'number, string')\n     *   typed.findSignature(fn, 'number,string', {exact: true})\n     *\n     * This function findSignature will by default return the best match to\n     * the given signature, possibly employing type conversions.\n     *\n     * The (optional) third argument is a plain object giving options\n     * controlling the signature search. Currently the only implemented\n     * option is `exact`: if specified as true (default is false), only\n     * exact matches will be returned (i.e. signatures for which `fn` was\n     * directly defined). Note that a (possibly different) type matching\n     * `any`, or one or more instances of TYPE matching `...TYPE` are\n     * considered exact matches in this regard, as no conversions are used.\n     *\n     * This function returns a \"signature\" object, as does `typed.resolve()`,\n     * which is a plain object with four keys: `params` (the array of parameters\n     * for this signature), `fn` (the originally supplied function for this\n     * signature), `test` (a generated function that determines if an argument\n     * list matches this signature, and `implementation` (the function to call\n     * on a matching argument list, that performs conversions if necessary and\n     * then calls the originally supplied function).\n     *\n     * @param {Function} fn                   A typed-function\n     * @param {string | string[]} signature\n     *     Signature to be found, can be an array or a comma separated string.\n     * @param {object} options  Controls the signature search as documented\n     * @return {{ params: Param[], fn: function, test: function, implementation: function }}\n     *     Returns the matching signature, or throws an error when no signature\n     *     is found.\n     */\n\n    function findSignature(fn, signature, options) {\n      if (!isTypedFunction(fn)) {\n        throw new TypeError(NOT_TYPED_FUNCTION);\n      } // Canonicalize input\n\n      var exact = options && options.exact;\n      var stringSignature = Array.isArray(signature) ? signature.join(',') : signature;\n      var params = parseSignature(stringSignature);\n      var canonicalSignature = stringifyParams(params); // First hope we get lucky and exactly match a signature\n\n      if (!exact || canonicalSignature in fn.signatures) {\n        // OK, we can check the internal signatures\n        var match = fn._typedFunctionData.signatureMap.get(canonicalSignature);\n        if (match) {\n          return match;\n        }\n      } // Oh well, we did not; so we have to go back and check the parameters\n      // one by one, in order to catch things like `any` and rest params.\n      // Note here we can assume there is at least one parameter, because\n      // the empty signature would have matched successfully above.\n\n      var nParams = params.length;\n      var remainingSignatures;\n      if (exact) {\n        remainingSignatures = [];\n        var name;\n        for (name in fn.signatures) {\n          remainingSignatures.push(fn._typedFunctionData.signatureMap.get(name));\n        }\n      } else {\n        remainingSignatures = fn._typedFunctionData.signatures;\n      }\n      for (var i = 0; i < nParams; ++i) {\n        var want = params[i];\n        var filteredSignatures = [];\n        var possibility = void 0;\n        var _iterator3 = _createForOfIteratorHelper(remainingSignatures),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            possibility = _step3.value;\n            var have = getParamAtIndex(possibility.params, i);\n            if (!have || want.restParam && !have.restParam) {\n              continue;\n            }\n            if (!have.hasAny) {\n              var _ret = function () {\n                // have to check all of the wanted types are available\n                var haveTypes = paramTypeSet(have);\n                if (want.types.some(function (wtype) {\n                  return !haveTypes.has(wtype.name);\n                })) {\n                  return \"continue\";\n                }\n              }();\n              if (_ret === \"continue\") continue;\n            } // OK, this looks good\n\n            filteredSignatures.push(possibility);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n        remainingSignatures = filteredSignatures;\n        if (remainingSignatures.length === 0) break;\n      } // Return the first remaining signature that was totally matched:\n\n      var candidate;\n      var _iterator4 = _createForOfIteratorHelper(remainingSignatures),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          candidate = _step4.value;\n          if (candidate.params.length <= nParams) {\n            return candidate;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + stringifyParams(params, ', ') + '))');\n    }\n    /**\n     * Find the proper function to call for a specific signature from\n     * a (composed) typed function, for example:\n     *\n     *   typed.find(fn, ['number', 'string'])\n     *   typed.find(fn, 'number, string')\n     *   typed.find(fn, 'number,string', {exact: true})\n     *\n     * This function find will by default return the best match to\n     * the given signature, possibly employing type conversions (and returning\n     * a function that will perform those conversions as needed). The\n     * (optional) third argument is a plain object giving options contolling\n     * the signature search. Currently only the option `exact` is implemented,\n     * which defaults to \"false\". If `exact` is specified as true, then only\n     * exact matches will be returned (i.e. signatures for which `fn` was\n     * directly defined). Uses of `any` and `...TYPE` are considered exact if\n     * no conversions are necessary to apply the corresponding function.\n     *\n     * @param {Function} fn                   A typed-function\n     * @param {string | string[]} signature\n     *     Signature to be found, can be an array or a comma separated string.\n     * @param {object} options  Controls the signature match as documented\n     * @return {function}\n     *     Returns the function to call for the given signature, or throws an\n     *     error if no match is found.\n     */\n\n    function find(fn, signature, options) {\n      return findSignature(fn, signature, options).implementation;\n    }\n    /**\n     * Convert a given value to another data type, specified by type name.\n     *\n     * @param {*} value\n     * @param {string} typeName\n     */\n\n    function convert(value, typeName) {\n      // check conversion is needed\n      var type = findType(typeName);\n      if (type.test(value)) {\n        return value;\n      }\n      var conversions = type.conversionsTo;\n      if (conversions.length === 0) {\n        throw new Error('There are no conversions to ' + typeName + ' defined.');\n      }\n      for (var i = 0; i < conversions.length; i++) {\n        var fromType = findType(conversions[i].from);\n        if (fromType.test(value)) {\n          return conversions[i].convert(value);\n        }\n      }\n      throw new Error('Cannot convert ' + value + ' to ' + typeName);\n    }\n    /**\n     * Stringify parameters in a normalized way\n     * @param {Param[]} params\n     * @param {string} [','] separator\n     * @return {string}\n     */\n\n    function stringifyParams(params) {\n      var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n      return params.map(function (p) {\n        return p.name;\n      }).join(separator);\n    }\n    /**\n     * Parse a parameter, like \"...number | boolean\"\n     * @param {string} param\n     * @return {Param} param\n     */\n\n    function parseParam(param) {\n      var restParam = param.indexOf('...') === 0;\n      var types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';\n      var typeDefs = types.split('|').map(function (s) {\n        return findType(s.trim());\n      });\n      var hasAny = false;\n      var paramName = restParam ? '...' : '';\n      var exactTypes = typeDefs.map(function (type) {\n        hasAny = type.isAny || hasAny;\n        paramName += type.name + '|';\n        return {\n          name: type.name,\n          typeIndex: type.index,\n          test: type.test,\n          isAny: type.isAny,\n          conversion: null,\n          conversionIndex: -1\n        };\n      });\n      return {\n        types: exactTypes,\n        name: paramName.slice(0, -1),\n        // remove trailing '|' from above\n        hasAny: hasAny,\n        hasConversion: false,\n        restParam: restParam\n      };\n    }\n    /**\n     * Expands a parsed parameter with the types available from currently\n     * defined conversions.\n     * @param {Param} param\n     * @return {Param} param\n     */\n\n    function expandParam(param) {\n      var typeNames = param.types.map(function (t) {\n        return t.name;\n      });\n      var matchingConversions = availableConversions(typeNames);\n      var hasAny = param.hasAny;\n      var newName = param.name;\n      var convertibleTypes = matchingConversions.map(function (conversion) {\n        var type = findType(conversion.from);\n        hasAny = type.isAny || hasAny;\n        newName += '|' + conversion.from;\n        return {\n          name: conversion.from,\n          typeIndex: type.index,\n          test: type.test,\n          isAny: type.isAny,\n          conversion: conversion,\n          conversionIndex: conversion.index\n        };\n      });\n      return {\n        types: param.types.concat(convertibleTypes),\n        name: newName,\n        hasAny: hasAny,\n        hasConversion: convertibleTypes.length > 0,\n        restParam: param.restParam\n      };\n    }\n    /**\n     * Return the set of type names in a parameter.\n     * Caches the result for efficiency\n     *\n     * @param {Param} param\n     * @return {Set<string>} typenames\n     */\n\n    function paramTypeSet(param) {\n      if (!param.typeSet) {\n        param.typeSet = new Set();\n        param.types.forEach(function (type) {\n          return param.typeSet.add(type.name);\n        });\n      }\n      return param.typeSet;\n    }\n    /**\n     * Parse a signature with comma separated parameters,\n     * like \"number | boolean, ...string\"\n     *\n     * @param {string} signature\n     * @return {Param[]} params\n     */\n\n    function parseSignature(rawSignature) {\n      var params = [];\n      if (typeof rawSignature !== 'string') {\n        throw new TypeError('Signatures must be strings');\n      }\n      var signature = rawSignature.trim();\n      if (signature === '') {\n        return params;\n      }\n      var rawParams = signature.split(',');\n      for (var i = 0; i < rawParams.length; ++i) {\n        var parsedParam = parseParam(rawParams[i].trim());\n        if (parsedParam.restParam && i !== rawParams.length - 1) {\n          throw new SyntaxError('Unexpected rest parameter \"' + rawParams[i] + '\": ' + 'only allowed for the last parameter');\n        } // if invalid, short-circuit (all the types may have been filtered)\n\n        if (parsedParam.types.length === 0) {\n          return null;\n        }\n        params.push(parsedParam);\n      }\n      return params;\n    }\n    /**\n     * Test whether a set of params contains a restParam\n     * @param {Param[]} params\n     * @return {boolean} Returns true when the last parameter is a restParam\n     */\n\n    function hasRestParam(params) {\n      var param = last(params);\n      return param ? param.restParam : false;\n    }\n    /**\n     * Create a type test for a single parameter, which can have one or multiple\n     * types.\n     * @param {Param} param\n     * @return {function(x: *) : boolean} Returns a test function\n     */\n\n    function compileTest(param) {\n      if (!param || param.types.length === 0) {\n        // nothing to do\n        return ok;\n      } else if (param.types.length === 1) {\n        return findType(param.types[0].name).test;\n      } else if (param.types.length === 2) {\n        var test0 = findType(param.types[0].name).test;\n        var test1 = findType(param.types[1].name).test;\n        return function or(x) {\n          return test0(x) || test1(x);\n        };\n      } else {\n        // param.types.length > 2\n        var tests = param.types.map(function (type) {\n          return findType(type.name).test;\n        });\n        return function or(x) {\n          for (var i = 0; i < tests.length; i++) {\n            if (tests[i](x)) {\n              return true;\n            }\n          }\n          return false;\n        };\n      }\n    }\n    /**\n     * Create a test for all parameters of a signature\n     * @param {Param[]} params\n     * @return {function(args: Array<*>) : boolean}\n     */\n\n    function compileTests(params) {\n      var tests, test0, test1;\n      if (hasRestParam(params)) {\n        // variable arguments like '...number'\n        tests = initial(params).map(compileTest);\n        var varIndex = tests.length;\n        var lastTest = compileTest(last(params));\n        var testRestParam = function testRestParam(args) {\n          for (var i = varIndex; i < args.length; i++) {\n            if (!lastTest(args[i])) {\n              return false;\n            }\n          }\n          return true;\n        };\n        return function testArgs(args) {\n          for (var i = 0; i < tests.length; i++) {\n            if (!tests[i](args[i])) {\n              return false;\n            }\n          }\n          return testRestParam(args) && args.length >= varIndex + 1;\n        };\n      } else {\n        // no variable arguments\n        if (params.length === 0) {\n          return function testArgs(args) {\n            return args.length === 0;\n          };\n        } else if (params.length === 1) {\n          test0 = compileTest(params[0]);\n          return function testArgs(args) {\n            return test0(args[0]) && args.length === 1;\n          };\n        } else if (params.length === 2) {\n          test0 = compileTest(params[0]);\n          test1 = compileTest(params[1]);\n          return function testArgs(args) {\n            return test0(args[0]) && test1(args[1]) && args.length === 2;\n          };\n        } else {\n          // arguments.length > 2\n          tests = params.map(compileTest);\n          return function testArgs(args) {\n            for (var i = 0; i < tests.length; i++) {\n              if (!tests[i](args[i])) {\n                return false;\n              }\n            }\n            return args.length === tests.length;\n          };\n        }\n      }\n    }\n    /**\n     * Find the parameter at a specific index of a Params list.\n     * Handles rest parameters.\n     * @param {Param[]} params\n     * @param {number} index\n     * @return {Param | null} Returns the matching parameter when found,\n     *                        null otherwise.\n     */\n\n    function getParamAtIndex(params, index) {\n      return index < params.length ? params[index] : hasRestParam(params) ? last(params) : null;\n    }\n    /**\n     * Get all type names of a parameter\n     * @param {Params[]} params\n     * @param {number} index\n     * @return {string[]} Returns an array with type names\n     */\n\n    function getTypeSetAtIndex(params, index) {\n      var param = getParamAtIndex(params, index);\n      if (!param) {\n        return new Set();\n      }\n      return paramTypeSet(param);\n    }\n    /**\n     * Test whether a type is an exact type or conversion\n     * @param {Type} type\n     * @return {boolean} Returns true when\n     */\n\n    function isExactType(type) {\n      return type.conversion === null || type.conversion === undefined;\n    }\n    /**\n     * Helper function for creating error messages: create an array with\n     * all available types on a specific argument index.\n     * @param {Signature[]} signatures\n     * @param {number} index\n     * @return {string[]} Returns an array with available types\n     */\n\n    function mergeExpectedParams(signatures, index) {\n      var typeSet = new Set();\n      signatures.forEach(function (signature) {\n        var paramSet = getTypeSetAtIndex(signature.params, index);\n        var name;\n        var _iterator5 = _createForOfIteratorHelper(paramSet),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            name = _step5.value;\n            typeSet.add(name);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      });\n      return typeSet.has('any') ? ['any'] : Array.from(typeSet);\n    }\n    /**\n     * Create\n     * @param {string} name             The name of the function\n     * @param {array.<*>} args          The actual arguments passed to the function\n     * @param {Signature[]} signatures  A list with available signatures\n     * @return {TypeError} Returns a type error with additional data\n     *                     attached to it in the property `data`\n     */\n\n    function createError(name, args, signatures) {\n      var err, expected;\n      var _name = name || 'unnamed'; // test for wrong type at some index\n\n      var matchingSignatures = signatures;\n      var index;\n      var _loop = function _loop() {\n        var nextMatchingDefs = [];\n        matchingSignatures.forEach(function (signature) {\n          var param = getParamAtIndex(signature.params, index);\n          var test = compileTest(param);\n          if ((index < signature.params.length || hasRestParam(signature.params)) && test(args[index])) {\n            nextMatchingDefs.push(signature);\n          }\n        });\n        if (nextMatchingDefs.length === 0) {\n          // no matching signatures anymore, throw error \"wrong type\"\n          expected = mergeExpectedParams(matchingSignatures, index);\n          if (expected.length > 0) {\n            var actualTypes = findTypeNames(args[index]);\n            err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualTypes.join(' | ') + ', index: ' + index + ')');\n            err.data = {\n              category: 'wrongType',\n              fn: _name,\n              index: index,\n              actual: actualTypes,\n              expected: expected\n            };\n            return {\n              v: err\n            };\n          }\n        } else {\n          matchingSignatures = nextMatchingDefs;\n        }\n      };\n      for (index = 0; index < args.length; index++) {\n        var _ret2 = _loop();\n        if (_typeof(_ret2) === \"object\") return _ret2.v;\n      } // test for too few arguments\n\n      var lengths = matchingSignatures.map(function (signature) {\n        return hasRestParam(signature.params) ? Infinity : signature.params.length;\n      });\n      if (args.length < Math.min.apply(null, lengths)) {\n        expected = mergeExpectedParams(matchingSignatures, index);\n        err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');\n        err.data = {\n          category: 'tooFewArgs',\n          fn: _name,\n          index: args.length,\n          expected: expected\n        };\n        return err;\n      } // test for too many arguments\n\n      var maxLength = Math.max.apply(null, lengths);\n      if (args.length > maxLength) {\n        err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');\n        err.data = {\n          category: 'tooManyArgs',\n          fn: _name,\n          index: args.length,\n          expectedLength: maxLength\n        };\n        return err;\n      } // Generic error\n\n      var argTypes = [];\n      for (var i = 0; i < args.length; ++i) {\n        argTypes.push(findTypeNames(args[i]).join('|'));\n      }\n      err = new TypeError('Arguments of type \"' + argTypes.join(', ') + '\" do not match any of the defined signatures of function ' + _name + '.');\n      err.data = {\n        category: 'mismatch',\n        actual: argTypes\n      };\n      return err;\n    }\n    /**\n     * Find the lowest index of all exact types of a parameter (no conversions)\n     * @param {Param} param\n     * @return {number} Returns the index of the lowest type in typed.types\n     */\n\n    function getLowestTypeIndex(param) {\n      var min = typeList.length + 1;\n      for (var i = 0; i < param.types.length; i++) {\n        if (isExactType(param.types[i])) {\n          min = Math.min(min, param.types[i].typeIndex);\n        }\n      }\n      return min;\n    }\n    /**\n     * Find the lowest index of the conversion of all types of the parameter\n     * having a conversion\n     * @param {Param} param\n     * @return {number} Returns the lowest index of the conversions of this type\n     */\n\n    function getLowestConversionIndex(param) {\n      var min = nConversions + 1;\n      for (var i = 0; i < param.types.length; i++) {\n        if (!isExactType(param.types[i])) {\n          min = Math.min(min, param.types[i].conversionIndex);\n        }\n      }\n      return min;\n    }\n    /**\n     * Compare two params\n     * @param {Param} param1\n     * @param {Param} param2\n     * @return {number} returns -1 when param1 must get a lower\n     *                  index than param2, 1 when the opposite,\n     *                  or zero when both are equal\n     */\n\n    function compareParams(param1, param2) {\n      // We compare a number of metrics on a param in turn:\n      // 1) 'any' parameters are the least preferred\n      if (param1.hasAny) {\n        if (!param2.hasAny) {\n          return 1;\n        }\n      } else if (param2.hasAny) {\n        return -1;\n      } // 2) Prefer non-rest to rest parameters\n\n      if (param1.restParam) {\n        if (!param2.restParam) {\n          return 1;\n        }\n      } else if (param2.restParam) {\n        return -1;\n      } // 3) Prefer exact type match to conversions\n\n      if (param1.hasConversion) {\n        if (!param2.hasConversion) {\n          return 1;\n        }\n      } else if (param2.hasConversion) {\n        return -1;\n      } // 4) Prefer lower type index:\n\n      var typeDiff = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);\n      if (typeDiff < 0) {\n        return -1;\n      }\n      if (typeDiff > 0) {\n        return 1;\n      } // 5) Prefer lower conversion index\n\n      var convDiff = getLowestConversionIndex(param1) - getLowestConversionIndex(param2);\n      if (convDiff < 0) {\n        return -1;\n      }\n      if (convDiff > 0) {\n        return 1;\n      } // Don't have a basis for preference\n\n      return 0;\n    }\n    /**\n     * Compare two signatures\n     * @param {Signature} signature1\n     * @param {Signature} signature2\n     * @return {number} returns a negative number when param1 must get a lower\n     *                  index than param2, a positive number when the opposite,\n     *                  or zero when both are equal\n     */\n\n    function compareSignatures(signature1, signature2) {\n      var pars1 = signature1.params;\n      var pars2 = signature2.params;\n      var last1 = last(pars1);\n      var last2 = last(pars2);\n      var hasRest1 = hasRestParam(pars1);\n      var hasRest2 = hasRestParam(pars2); // We compare a number of metrics on signatures in turn:\n      // 1) An \"any rest param\" is least preferred\n\n      if (hasRest1 && last1.hasAny) {\n        if (!hasRest2 || !last2.hasAny) {\n          return 1;\n        }\n      } else if (hasRest2 && last2.hasAny) {\n        return -1;\n      } // 2) Minimize the number of 'any' parameters\n\n      var any1 = 0;\n      var conv1 = 0;\n      var par;\n      var _iterator6 = _createForOfIteratorHelper(pars1),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          par = _step6.value;\n          if (par.hasAny) ++any1;\n          if (par.hasConversion) ++conv1;\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      var any2 = 0;\n      var conv2 = 0;\n      var _iterator7 = _createForOfIteratorHelper(pars2),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          par = _step7.value;\n          if (par.hasAny) ++any2;\n          if (par.hasConversion) ++conv2;\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      if (any1 !== any2) {\n        return any1 - any2;\n      } // 3) A conversion rest param is less preferred\n\n      if (hasRest1 && last1.hasConversion) {\n        if (!hasRest2 || !last2.hasConversion) {\n          return 1;\n        }\n      } else if (hasRest2 && last2.hasConversion) {\n        return -1;\n      } // 4) Minimize the number of conversions\n\n      if (conv1 !== conv2) {\n        return conv1 - conv2;\n      } // 5) Prefer no rest param\n\n      if (hasRest1) {\n        if (!hasRest2) {\n          return 1;\n        }\n      } else if (hasRest2) {\n        return -1;\n      } // 6) Prefer shorter with rest param, longer without\n\n      var lengthCriterion = (pars1.length - pars2.length) * (hasRest1 ? -1 : 1);\n      if (lengthCriterion !== 0) {\n        return lengthCriterion;\n      } // Signatures are identical in each of the above metrics.\n      // In particular, they are the same length.\n      // We can therefore compare the parameters one by one.\n      // First we count which signature has more preferred parameters.\n\n      var comparisons = [];\n      var tc = 0;\n      for (var i = 0; i < pars1.length; ++i) {\n        var thisComparison = compareParams(pars1[i], pars2[i]);\n        comparisons.push(thisComparison);\n        tc += thisComparison;\n      }\n      if (tc !== 0) {\n        return tc;\n      } // They have the same number of preferred parameters, so go by the\n      // earliest parameter in which we have a preference.\n      // In other words, dispatch is driven somewhat more by earlier\n      // parameters than later ones.\n\n      var c;\n      for (var _i2 = 0, _comparisons = comparisons; _i2 < _comparisons.length; _i2++) {\n        c = _comparisons[_i2];\n        if (c !== 0) {\n          return c;\n        }\n      } // It's a tossup:\n\n      return 0;\n    }\n    /**\n     * Produce a list of all conversions from distinct types to one of\n     * the given types.\n     *\n     * @param {string[]} typeNames\n     * @return {ConversionDef[]} Returns the conversions that are available\n     *                        resulting in any given type (if any)\n     */\n\n    function availableConversions(typeNames) {\n      if (typeNames.length === 0) {\n        return [];\n      }\n      var types = typeNames.map(findType);\n      if (typeNames.length > 1) {\n        types.sort(function (t1, t2) {\n          return t1.index - t2.index;\n        });\n      }\n      var matches = types[0].conversionsTo;\n      if (typeNames.length === 1) {\n        return matches;\n      }\n      matches = matches.concat([]); // shallow copy the matches\n      // Since the types are now in index order, we just want the first\n      // occurrence of any from type:\n\n      var knownTypes = new Set(typeNames);\n      for (var i = 1; i < types.length; ++i) {\n        var newMatch = void 0;\n        var _iterator8 = _createForOfIteratorHelper(types[i].conversionsTo),\n          _step8;\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            newMatch = _step8.value;\n            if (!knownTypes.has(newMatch.from)) {\n              matches.push(newMatch);\n              knownTypes.add(newMatch.from);\n            }\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n      }\n      return matches;\n    }\n    /**\n     * Preprocess arguments before calling the original function:\n     * - if needed convert the parameters\n     * - in case of rest parameters, move the rest parameters into an Array\n     * @param {Param[]} params\n     * @param {function} fn\n     * @return {function} Returns a wrapped function\n     */\n\n    function compileArgsPreprocessing(params, fn) {\n      var fnConvert = fn; // TODO: can we make this wrapper function smarter/simpler?\n\n      if (params.some(function (p) {\n        return p.hasConversion;\n      })) {\n        var restParam = hasRestParam(params);\n        var compiledConversions = params.map(compileArgConversion);\n        fnConvert = function convertArgs() {\n          var args = [];\n          var last = restParam ? arguments.length - 1 : arguments.length;\n          for (var i = 0; i < last; i++) {\n            args[i] = compiledConversions[i](arguments[i]);\n          }\n          if (restParam) {\n            args[last] = arguments[last].map(compiledConversions[last]);\n          }\n          return fn.apply(this, args);\n        };\n      }\n      var fnPreprocess = fnConvert;\n      if (hasRestParam(params)) {\n        var offset = params.length - 1;\n        fnPreprocess = function preprocessRestParams() {\n          return fnConvert.apply(this, slice(arguments, 0, offset).concat([slice(arguments, offset)]));\n        };\n      }\n      return fnPreprocess;\n    }\n    /**\n     * Compile conversion for a parameter to the right type\n     * @param {Param} param\n     * @return {function} Returns the wrapped function that will convert arguments\n     *\n     */\n\n    function compileArgConversion(param) {\n      var test0, test1, conversion0, conversion1;\n      var tests = [];\n      var conversions = [];\n      param.types.forEach(function (type) {\n        if (type.conversion) {\n          tests.push(findType(type.conversion.from).test);\n          conversions.push(type.conversion.convert);\n        }\n      }); // create optimized conversion functions depending on the number of conversions\n\n      switch (conversions.length) {\n        case 0:\n          return function convertArg(arg) {\n            return arg;\n          };\n        case 1:\n          test0 = tests[0];\n          conversion0 = conversions[0];\n          return function convertArg(arg) {\n            if (test0(arg)) {\n              return conversion0(arg);\n            }\n            return arg;\n          };\n        case 2:\n          test0 = tests[0];\n          test1 = tests[1];\n          conversion0 = conversions[0];\n          conversion1 = conversions[1];\n          return function convertArg(arg) {\n            if (test0(arg)) {\n              return conversion0(arg);\n            }\n            if (test1(arg)) {\n              return conversion1(arg);\n            }\n            return arg;\n          };\n        default:\n          return function convertArg(arg) {\n            for (var i = 0; i < conversions.length; i++) {\n              if (tests[i](arg)) {\n                return conversions[i](arg);\n              }\n            }\n            return arg;\n          };\n      }\n    }\n    /**\n     * Split params with union types in to separate params.\n     *\n     * For example:\n     *\n     *     splitParams([['Array', 'Object'], ['string', 'RegExp'])\n     *     // returns:\n     *     // [\n     *     //   ['Array', 'string'],\n     *     //   ['Array', 'RegExp'],\n     *     //   ['Object', 'string'],\n     *     //   ['Object', 'RegExp']\n     *     // ]\n     *\n     * @param {Param[]} params\n     * @return {Param[]}\n     */\n\n    function splitParams(params) {\n      function _splitParams(params, index, paramsSoFar) {\n        if (index < params.length) {\n          var param = params[index];\n          var resultingParams = [];\n          if (param.restParam) {\n            // split the types of a rest parameter in two:\n            // one with only exact types, and one with exact types and conversions\n            var exactTypes = param.types.filter(isExactType);\n            if (exactTypes.length < param.types.length) {\n              resultingParams.push({\n                types: exactTypes,\n                name: '...' + exactTypes.map(function (t) {\n                  return t.name;\n                }).join('|'),\n                hasAny: exactTypes.some(function (t) {\n                  return t.isAny;\n                }),\n                hasConversion: false,\n                restParam: true\n              });\n            }\n            resultingParams.push(param);\n          } else {\n            // split all the types of a regular parameter into one type per param\n            resultingParams = param.types.map(function (type) {\n              return {\n                types: [type],\n                name: type.name,\n                hasAny: type.isAny,\n                hasConversion: type.conversion,\n                restParam: false\n              };\n            });\n          } // recurse over the groups with types\n\n          return flatMap(resultingParams, function (nextParam) {\n            return _splitParams(params, index + 1, paramsSoFar.concat([nextParam]));\n          });\n        } else {\n          // we've reached the end of the parameters.\n          return [paramsSoFar];\n        }\n      }\n      return _splitParams(params, 0, []);\n    }\n    /**\n     * Test whether two param lists represent conflicting signatures\n     * @param {Param[]} params1\n     * @param {Param[]} params2\n     * @return {boolean} Returns true when the signatures conflict, false otherwise.\n     */\n\n    function conflicting(params1, params2) {\n      var ii = Math.max(params1.length, params2.length);\n      for (var i = 0; i < ii; i++) {\n        var typeSet1 = getTypeSetAtIndex(params1, i);\n        var typeSet2 = getTypeSetAtIndex(params2, i);\n        var overlap = false;\n        var name = void 0;\n        var _iterator9 = _createForOfIteratorHelper(typeSet2),\n          _step9;\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            name = _step9.value;\n            if (typeSet1.has(name)) {\n              overlap = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n        if (!overlap) {\n          return false;\n        }\n      }\n      var len1 = params1.length;\n      var len2 = params2.length;\n      var restParam1 = hasRestParam(params1);\n      var restParam2 = hasRestParam(params2);\n      return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;\n    }\n    /**\n     * Helper function for `resolveReferences` that returns a copy of\n     * functionList wihe any prior resolutions cleared out, in case we are\n     * recycling signatures from a prior typed function construction.\n     *\n     * @param {Array.<function|typed-reference>} functionList\n     * @return {Array.<function|typed-reference>}\n     */\n\n    function clearResolutions(functionList) {\n      return functionList.map(function (fn) {\n        if (isReferToSelf(fn)) {\n          return referToSelf(fn.referToSelf.callback);\n        }\n        if (isReferTo(fn)) {\n          return makeReferTo(fn.referTo.references, fn.referTo.callback);\n        }\n        return fn;\n      });\n    }\n    /**\n     * Take a list of references, a list of functions functionList, and a\n     * signatureMap indexing signatures into functionList, and return\n     * the list of resolutions, or a false-y value if they don't all\n     * resolve in a valid way (yet).\n     *\n     * @param {string[]} references\n     * @param {Array<function|typed-reference} functionList\n     * @param {Object.<string, integer>} signatureMap\n     * @return {function[] | false} resolutions\n     */\n\n    function collectResolutions(references, functionList, signatureMap) {\n      var resolvedReferences = [];\n      var reference;\n      var _iterator10 = _createForOfIteratorHelper(references),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          reference = _step10.value;\n          var resolution = signatureMap[reference];\n          if (typeof resolution !== 'number') {\n            throw new TypeError('No definition for referenced signature \"' + reference + '\"');\n          }\n          resolution = functionList[resolution];\n          if (typeof resolution !== 'function') {\n            return false;\n          }\n          resolvedReferences.push(resolution);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      return resolvedReferences;\n    }\n    /**\n     * Resolve any references in the functionList for the typed function\n     * itself. The signatureMap tells which index in the functionList a\n     * given signature should be mapped to (for use in resolving typed.referTo)\n     * and self provides the destions of a typed.referToSelf.\n     *\n     * @param {Array<function | typed-reference-object>} functionList\n     * @param {Object.<string, function>} signatureMap\n     * @param {function} self  The typed-function itself\n     * @return {Array<function>} The list of resolved functions\n     */\n\n    function resolveReferences(functionList, signatureMap, self) {\n      var resolvedFunctions = clearResolutions(functionList);\n      var isResolved = new Array(resolvedFunctions.length).fill(false);\n      var leftUnresolved = true;\n      while (leftUnresolved) {\n        leftUnresolved = false;\n        var nothingResolved = true;\n        for (var i = 0; i < resolvedFunctions.length; ++i) {\n          if (isResolved[i]) continue;\n          var fn = resolvedFunctions[i];\n          if (isReferToSelf(fn)) {\n            resolvedFunctions[i] = fn.referToSelf.callback(self); // Preserve reference in case signature is reused someday:\n\n            resolvedFunctions[i].referToSelf = fn.referToSelf;\n            isResolved[i] = true;\n            nothingResolved = false;\n          } else if (isReferTo(fn)) {\n            var resolvedReferences = collectResolutions(fn.referTo.references, resolvedFunctions, signatureMap);\n            if (resolvedReferences) {\n              resolvedFunctions[i] = fn.referTo.callback.apply(this, resolvedReferences); // Preserve reference in case signature is reused someday:\n\n              resolvedFunctions[i].referTo = fn.referTo;\n              isResolved[i] = true;\n              nothingResolved = false;\n            } else {\n              leftUnresolved = true;\n            }\n          }\n        }\n        if (nothingResolved && leftUnresolved) {\n          throw new SyntaxError('Circular reference detected in resolving typed.referTo');\n        }\n      }\n      return resolvedFunctions;\n    }\n    /**\n     * Validate whether any of the function bodies contains a self-reference\n     * usage like `this(...)` or `this.signatures`. This self-referencing is\n     * deprecated since typed-function v3. It has been replaced with\n     * the functions typed.referTo and typed.referToSelf.\n     * @param {Object.<string, function>} signaturesMap\n     */\n\n    function validateDeprecatedThis(signaturesMap) {\n      // TODO: remove this deprecation warning logic some day (it's introduced in v3)\n      // match occurrences like 'this(' and 'this.signatures'\n      var deprecatedThisRegex = /\\bthis(\\(|\\.signatures\\b)/;\n      Object.keys(signaturesMap).forEach(function (signature) {\n        var fn = signaturesMap[signature];\n        if (deprecatedThisRegex.test(fn.toString())) {\n          throw new SyntaxError('Using `this` to self-reference a function ' + 'is deprecated since typed-function@3. ' + 'Use typed.referTo and typed.referToSelf instead.');\n        }\n      });\n    }\n    /**\n     * Create a typed function\n     * @param {String} name               The name for the typed function\n     * @param {Object.<string, function>} rawSignaturesMap\n     *                                    An object with one or\n     *                                    multiple signatures as key, and the\n     *                                    function corresponding to the\n     *                                    signature as value.\n     * @return {function}  Returns the created typed function.\n     */\n\n    function createTypedFunction(name, rawSignaturesMap) {\n      typed.createCount++;\n      if (Object.keys(rawSignaturesMap).length === 0) {\n        throw new SyntaxError('No signatures provided');\n      }\n      if (typed.warnAgainstDeprecatedThis) {\n        validateDeprecatedThis(rawSignaturesMap);\n      } // Main processing loop for signatures\n\n      var parsedParams = [];\n      var originalFunctions = [];\n      var signaturesMap = {};\n      var preliminarySignatures = []; // may have duplicates from conversions\n\n      var signature;\n      var _loop2 = function _loop2() {\n        // A) Protect against polluted Object prototype:\n        if (!Object.prototype.hasOwnProperty.call(rawSignaturesMap, signature)) {\n          return \"continue\";\n        } // B) Parse the signature\n\n        var params = parseSignature(signature);\n        if (!params) return \"continue\"; // C) Check for conflicts\n\n        parsedParams.forEach(function (pp) {\n          if (conflicting(pp, params)) {\n            throw new TypeError('Conflicting signatures \"' + stringifyParams(pp) + '\" and \"' + stringifyParams(params) + '\".');\n          }\n        });\n        parsedParams.push(params); // D) Store the provided function and add conversions\n\n        var functionIndex = originalFunctions.length;\n        originalFunctions.push(rawSignaturesMap[signature]);\n        var conversionParams = params.map(expandParam); // E) Split the signatures and collect them up\n\n        var sp = void 0;\n        var _iterator11 = _createForOfIteratorHelper(splitParams(conversionParams)),\n          _step11;\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            sp = _step11.value;\n            var spName = stringifyParams(sp);\n            preliminarySignatures.push({\n              params: sp,\n              name: spName,\n              fn: functionIndex\n            });\n            if (sp.every(function (p) {\n              return !p.hasConversion;\n            })) {\n              signaturesMap[spName] = functionIndex;\n            }\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n      };\n      for (signature in rawSignaturesMap) {\n        var _ret3 = _loop2();\n        if (_ret3 === \"continue\") continue;\n      }\n      preliminarySignatures.sort(compareSignatures); // Note the forward reference to theTypedFn\n\n      var resolvedFunctions = resolveReferences(originalFunctions, signaturesMap, theTypedFn); // Fill in the proper function for each signature\n\n      var s;\n      for (s in signaturesMap) {\n        if (Object.prototype.hasOwnProperty.call(signaturesMap, s)) {\n          signaturesMap[s] = resolvedFunctions[signaturesMap[s]];\n        }\n      }\n      var signatures = [];\n      var internalSignatureMap = new Map(); // benchmarks faster than object\n\n      for (var _i3 = 0, _preliminarySignature = preliminarySignatures; _i3 < _preliminarySignature.length; _i3++) {\n        s = _preliminarySignature[_i3];\n\n        // Note it's only safe to eliminate duplicates like this\n        // _after_ the signature sorting step above; otherwise we might\n        // remove the wrong one.\n        if (!internalSignatureMap.has(s.name)) {\n          s.fn = resolvedFunctions[s.fn];\n          signatures.push(s);\n          internalSignatureMap.set(s.name, s);\n        }\n      } // we create a highly optimized checks for the first couple of signatures with max 2 arguments\n\n      var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);\n      var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);\n      var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);\n      var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);\n      var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);\n      var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);\n      var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5; // compile the tests\n\n      for (var i = 0; i < signatures.length; ++i) {\n        signatures[i].test = compileTests(signatures[i].params);\n      }\n      var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;\n      var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;\n      var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;\n      var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;\n      var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;\n      var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;\n      var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;\n      var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;\n      var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;\n      var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;\n      var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;\n      var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk; // compile the functions\n\n      for (var _i4 = 0; _i4 < signatures.length; ++_i4) {\n        signatures[_i4].implementation = compileArgsPreprocessing(signatures[_i4].params, signatures[_i4].fn);\n      }\n      var fn0 = ok0 ? signatures[0].implementation : undef;\n      var fn1 = ok1 ? signatures[1].implementation : undef;\n      var fn2 = ok2 ? signatures[2].implementation : undef;\n      var fn3 = ok3 ? signatures[3].implementation : undef;\n      var fn4 = ok4 ? signatures[4].implementation : undef;\n      var fn5 = ok5 ? signatures[5].implementation : undef;\n      var len0 = ok0 ? signatures[0].params.length : -1;\n      var len1 = ok1 ? signatures[1].params.length : -1;\n      var len2 = ok2 ? signatures[2].params.length : -1;\n      var len3 = ok3 ? signatures[3].params.length : -1;\n      var len4 = ok4 ? signatures[4].params.length : -1;\n      var len5 = ok5 ? signatures[5].params.length : -1; // simple and generic, but also slow\n\n      var iStart = allOk ? 6 : 0;\n      var iEnd = signatures.length; // de-reference ahead for execution speed:\n\n      var tests = signatures.map(function (s) {\n        return s.test;\n      });\n      var fns = signatures.map(function (s) {\n        return s.implementation;\n      });\n      var generic = function generic() {\n        for (var _i5 = iStart; _i5 < iEnd; _i5++) {\n          if (tests[_i5](arguments)) {\n            return fns[_i5].apply(this, arguments);\n          }\n        }\n        return typed.onMismatch(name, arguments, signatures);\n      }; // create the typed function\n      // fast, specialized version. Falls back to the slower, generic one if needed\n\n      function theTypedFn(arg0, arg1) {\n        if (arguments.length === len0 && test00(arg0) && test01(arg1)) {\n          return fn0.apply(this, arguments);\n        }\n        if (arguments.length === len1 && test10(arg0) && test11(arg1)) {\n          return fn1.apply(this, arguments);\n        }\n        if (arguments.length === len2 && test20(arg0) && test21(arg1)) {\n          return fn2.apply(this, arguments);\n        }\n        if (arguments.length === len3 && test30(arg0) && test31(arg1)) {\n          return fn3.apply(this, arguments);\n        }\n        if (arguments.length === len4 && test40(arg0) && test41(arg1)) {\n          return fn4.apply(this, arguments);\n        }\n        if (arguments.length === len5 && test50(arg0) && test51(arg1)) {\n          return fn5.apply(this, arguments);\n        }\n        return generic.apply(this, arguments);\n      } // attach name the typed function\n\n      try {\n        Object.defineProperty(theTypedFn, 'name', {\n          value: name\n        });\n      } catch (err) {// old browsers do not support Object.defineProperty and some don't support setting the name property\n        // the function name is not essential for the functioning, it's mostly useful for debugging,\n        // so it's fine to have unnamed functions.\n      } // attach signatures to the function.\n      // This property is close to the original collection of signatures\n      // used to create the typed-function, just with unions split:\n\n      theTypedFn.signatures = signaturesMap; // Store internal data for functions like resolve, find, etc.\n      // Also serves as the flag that this is a typed-function\n\n      theTypedFn._typedFunctionData = {\n        signatures: signatures,\n        signatureMap: internalSignatureMap\n      };\n      return theTypedFn;\n    }\n    /**\n     * Action to take on mismatch\n     * @param {string} name      Name of function that was attempted to be called\n     * @param {Array} args       Actual arguments to the call\n     * @param {Array} signatures Known signatures of the named typed-function\n     */\n\n    function _onMismatch(name, args, signatures) {\n      throw createError(name, args, signatures);\n    }\n    /**\n     * Return all but the last items of an array or function Arguments\n     * @param {Array | Arguments} arr\n     * @return {Array}\n     */\n\n    function initial(arr) {\n      return slice(arr, 0, arr.length - 1);\n    }\n    /**\n     * return the last item of an array or function Arguments\n     * @param {Array | Arguments} arr\n     * @return {*}\n     */\n\n    function last(arr) {\n      return arr[arr.length - 1];\n    }\n    /**\n     * Slice an array or function Arguments\n     * @param {Array | Arguments | IArguments} arr\n     * @param {number} start\n     * @param {number} [end]\n     * @return {Array}\n     */\n\n    function slice(arr, start, end) {\n      return Array.prototype.slice.call(arr, start, end);\n    }\n    /**\n     * Return the first item from an array for which test(arr[i]) returns true\n     * @param {Array} arr\n     * @param {function} test\n     * @return {* | undefined} Returns the first matching item\n     *                         or undefined when there is no match\n     */\n\n    function findInArray(arr, test) {\n      for (var i = 0; i < arr.length; i++) {\n        if (test(arr[i])) {\n          return arr[i];\n        }\n      }\n      return undefined;\n    }\n    /**\n     * Flat map the result invoking a callback for every item in an array.\n     * https://gist.github.com/samgiles/762ee337dff48623e729\n     * @param {Array} arr\n     * @param {function} callback\n     * @return {Array}\n     */\n\n    function flatMap(arr, callback) {\n      return Array.prototype.concat.apply([], arr.map(callback));\n    }\n    /**\n     * Create a reference callback to one or multiple signatures\n     *\n     * Syntax:\n     *\n     *     typed.referTo(signature1, signature2, ..., function callback(fn1, fn2, ...) {\n     *       // ...\n     *     })\n     *\n     * @returns {{referTo: {references: string[], callback}}}\n     */\n\n    function referTo() {\n      var references = initial(arguments).map(function (s) {\n        return stringifyParams(parseSignature(s));\n      });\n      var callback = last(arguments);\n      if (typeof callback !== 'function') {\n        throw new TypeError('Callback function expected as last argument');\n      }\n      return makeReferTo(references, callback);\n    }\n    function makeReferTo(references, callback) {\n      return {\n        referTo: {\n          references: references,\n          callback: callback\n        }\n      };\n    }\n    /**\n     * Create a reference callback to the typed-function itself\n     *\n     * @param {(self: function) => function} callback\n     * @returns {{referToSelf: { callback: function }}}\n     */\n\n    function referToSelf(callback) {\n      if (typeof callback !== 'function') {\n        throw new TypeError('Callback function expected as first argument');\n      }\n      return {\n        referToSelf: {\n          callback: callback\n        }\n      };\n    }\n    /**\n     * Test whether something is a referTo object, holding a list with reference\n     * signatures and a callback.\n     *\n     * @param {Object | function} objectOrFn\n     * @returns {boolean}\n     */\n\n    function isReferTo(objectOrFn) {\n      return objectOrFn && _typeof(objectOrFn.referTo) === 'object' && Array.isArray(objectOrFn.referTo.references) && typeof objectOrFn.referTo.callback === 'function';\n    }\n    /**\n     * Test whether something is a referToSelf object, holding a callback where\n     * to pass `self`.\n     *\n     * @param {Object | function} objectOrFn\n     * @returns {boolean}\n     */\n\n    function isReferToSelf(objectOrFn) {\n      return objectOrFn && _typeof(objectOrFn.referToSelf) === 'object' && typeof objectOrFn.referToSelf.callback === 'function';\n    }\n    /**\n     * Check if name is (A) new, (B) a match, or (C) a mismatch; and throw\n     * an error in case (C).\n     *\n     * @param { string | undefined } nameSoFar\n     * @param { string | undefined } newName\n     * @returns { string } updated name\n     */\n\n    function checkName(nameSoFar, newName) {\n      if (!nameSoFar) {\n        return newName;\n      }\n      if (newName && newName !== nameSoFar) {\n        var err = new Error('Function names do not match (expected: ' + nameSoFar + ', actual: ' + newName + ')');\n        err.data = {\n          actual: newName,\n          expected: nameSoFar\n        };\n        throw err;\n      }\n      return nameSoFar;\n    }\n    /**\n     * Retrieve the implied name from an object with signature keys\n     * and function values, checking whether all value names match\n     *\n     * @param { {string: function} } obj\n     */\n\n    function getObjectName(obj) {\n      var name;\n      for (var key in obj) {\n        // Only pay attention to own properties, and only if their values\n        // are typed functions or functions with a signature property\n        if (Object.prototype.hasOwnProperty.call(obj, key) && (isTypedFunction(obj[key]) || typeof obj[key].signature === 'string')) {\n          name = checkName(name, obj[key].name);\n        }\n      }\n      return name;\n    }\n    /**\n     * Copy all of the signatures from the second argument into the first,\n     * which is modified by side effect, checking for conflicts\n     *\n     * @param {Object.<string, function|typed-reference>} dest\n     * @param {Object.<string, function|typed-reference>} source\n     */\n\n    function mergeSignatures(dest, source) {\n      var key;\n      for (key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          if (key in dest) {\n            if (source[key] !== dest[key]) {\n              var err = new Error('Signature \"' + key + '\" is defined twice');\n              err.data = {\n                signature: key,\n                sourceFunction: source[key],\n                destFunction: dest[key]\n              };\n              throw err;\n            } // else: both signatures point to the same function, that's fine\n          }\n\n          dest[key] = source[key];\n        }\n      }\n    }\n    var saveTyped = typed;\n    /**\n     * Originally the main function was a typed function itself, but then\n     * it might not be able to generate error messages if the client\n     * replaced the type system with different names.\n     *\n     * Main entry: typed([name], functions/objects with signatures...)\n     *\n     * Assembles and returns a new typed-function from the given items\n     * that provide signatures and implementations, each of which may be\n     * * a plain object mapping (string) signatures to implementing functions,\n     * * a previously constructed typed function, or\n     * * any other single function with a string-valued property `signature`.\n      * The name of the resulting typed-function will be given by the\n     * string-valued name argument if present, or if not, by the name\n     * of any of the arguments that have one, as long as any that do are\n     * consistent with each other. If no name is specified, the name will be\n     * an empty string.\n     *\n     * @param {string} maybeName [optional]\n     * @param {(function|object)[]} signature providers\n     * @returns {typed-function}\n     */\n\n    typed = function typed(maybeName) {\n      var named = typeof maybeName === 'string';\n      var start = named ? 1 : 0;\n      var name = named ? maybeName : '';\n      var allSignatures = {};\n      for (var i = start; i < arguments.length; ++i) {\n        var item = arguments[i];\n        var theseSignatures = {};\n        var thisName = void 0;\n        if (typeof item === 'function') {\n          thisName = item.name;\n          if (typeof item.signature === 'string') {\n            // Case 1: Ordinary function with a string 'signature' property\n            theseSignatures[item.signature] = item;\n          } else if (isTypedFunction(item)) {\n            // Case 2: Existing typed function\n            theseSignatures = item.signatures;\n          }\n        } else if (isPlainObject(item)) {\n          // Case 3: Plain object, assume keys = signatures, values = functions\n          theseSignatures = item;\n          if (!named) {\n            thisName = getObjectName(item);\n          }\n        }\n        if (Object.keys(theseSignatures).length === 0) {\n          var err = new TypeError('Argument to \\'typed\\' at index ' + i + ' is not a (typed) function, ' + 'nor an object with signatures as keys and functions as values.');\n          err.data = {\n            index: i,\n            argument: item\n          };\n          throw err;\n        }\n        if (!named) {\n          name = checkName(name, thisName);\n        }\n        mergeSignatures(allSignatures, theseSignatures);\n      }\n      return createTypedFunction(name || '', allSignatures);\n    };\n    typed.create = create;\n    typed.createCount = saveTyped.createCount;\n    typed.onMismatch = _onMismatch;\n    typed.throwMismatchError = _onMismatch;\n    typed.createError = createError;\n    typed.clear = clear;\n    typed.clearConversions = clearConversions;\n    typed.addTypes = addTypes;\n    typed._findType = findType; // For unit testing only\n\n    typed.referTo = referTo;\n    typed.referToSelf = referToSelf;\n    typed.convert = convert;\n    typed.findSignature = findSignature;\n    typed.find = find;\n    typed.isTypedFunction = isTypedFunction;\n    typed.warnAgainstDeprecatedThis = true;\n    /**\n     * add a type (convenience wrapper for typed.addTypes)\n     * @param {{name: string, test: function}} type\n     * @param {boolean} [beforeObjectTest=true]\n     *                          If true, the new test will be inserted before\n     *                          the test with name 'Object' (if any), since\n     *                          tests for Object match Array and classes too.\n     */\n\n    typed.addType = function (type, beforeObjectTest) {\n      var before = 'any';\n      if (beforeObjectTest !== false && typeMap.has('Object')) {\n        before = 'Object';\n      }\n      typed.addTypes([type], before);\n    };\n    /**\n     * Verify that the ConversionDef conversion has a valid format.\n     *\n     * @param {conversionDef} conversion\n     * @return {void}\n     * @throws {TypeError|SyntaxError}\n     */\n\n    function _validateConversion(conversion) {\n      if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {\n        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n      }\n      if (conversion.to === conversion.from) {\n        throw new SyntaxError('Illegal to define conversion from \"' + conversion.from + '\" to itself.');\n      }\n    }\n    /**\n     * Add a conversion\n     *\n     * @param {ConversionDef} conversion\n     * @returns {void}\n     * @throws {TypeError}\n     */\n\n    typed.addConversion = function (conversion) {\n      _validateConversion(conversion);\n      var to = findType(conversion.to);\n      if (to.conversionsTo.every(function (other) {\n        return other.from !== conversion.from;\n      })) {\n        to.conversionsTo.push({\n          from: conversion.from,\n          convert: conversion.convert,\n          index: nConversions++\n        });\n      } else {\n        throw new Error('There is already a conversion from \"' + conversion.from + '\" to \"' + to.name + '\"');\n      }\n    };\n    /**\n     * Convenience wrapper to call addConversion on each conversion in a list.\n     *\n     @param {ConversionDef[]} conversions\n     @returns {void}\n     @throws {TypeError}\n     */\n\n    typed.addConversions = function (conversions) {\n      conversions.forEach(typed.addConversion);\n    };\n    /**\n     * Remove the specified conversion. The format is the same as for\n     * addConversion, and the convert function must match or an error\n     * is thrown.\n     *\n     * @param {{from: string, to: string, convert: function}} conversion\n     * @returns {void}\n     * @throws {TypeError|SyntaxError|Error}\n     */\n\n    typed.removeConversion = function (conversion) {\n      _validateConversion(conversion);\n      var to = findType(conversion.to);\n      var existingConversion = findInArray(to.conversionsTo, function (c) {\n        return c.from === conversion.from;\n      });\n      if (!existingConversion) {\n        throw new Error('Attempt to remove nonexistent conversion from ' + conversion.from + ' to ' + conversion.to);\n      }\n      if (existingConversion.convert !== conversion.convert) {\n        throw new Error('Conversion to remove does not match existing conversion');\n      }\n      var index = to.conversionsTo.indexOf(existingConversion);\n      to.conversionsTo.splice(index, 1);\n    };\n    /**\n     * Produce the specific signature that a typed function\n     * will execute on the given arguments. Here, a \"signature\" is an\n     * object with properties 'params', 'test', 'fn', and 'implementation'.\n     * This last property is a function that converts params as necessary\n     * and then calls 'fn'. Returns null if there is no matching signature.\n     * @param {typed-function} tf\n     * @param {any[]} argList\n     * @returns {{params: string, test: function, fn: function, implementation: function}}\n     */\n\n    typed.resolve = function (tf, argList) {\n      if (!isTypedFunction(tf)) {\n        throw new TypeError(NOT_TYPED_FUNCTION);\n      }\n      var sigs = tf._typedFunctionData.signatures;\n      for (var i = 0; i < sigs.length; ++i) {\n        if (sigs[i].test(argList)) {\n          return sigs[i];\n        }\n      }\n      return null;\n    };\n    return typed;\n  }\n  var typedFunction = create();\n  return typedFunction;\n});","map":{"version":3,"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","_typeof","obj","ok","notOk","undef","undefined","NOT_TYPED_FUNCTION","create","isPlainObject","x","_types","Date","RegExp","anyType","isAny","typeMap","typeList","nConversions","typed","createCount","findType","typeName","type","get","message","toLowerCase","otherName","_iterator","_step","addTypes","types","beforeSpec","arguments","beforeIndex","index","newTypes","has","push","set","conversionsTo","affectedTypes","concat","_i","clear","Map","clearConversions","_iterator2","_step2","findTypeNames","matches","filter","isTypedFunction","entity","findSignature","fn","signature","options","exact","stringSignature","join","params","parseSignature","canonicalSignature","stringifyParams","signatures","match","_typedFunctionData","signatureMap","nParams","remainingSignatures","want","filteredSignatures","possibility","_iterator3","_step3","have","getParamAtIndex","restParam","hasAny","_ret","haveTypes","paramTypeSet","some","wtype","candidate","_iterator4","_step4","find","implementation","convert","conversions","Error","fromType","separator","map","p","parseParam","param","indexOf","typeDefs","split","trim","paramName","exactTypes","typeIndex","conversion","conversionIndex","hasConversion","expandParam","typeNames","t","matchingConversions","availableConversions","newName","convertibleTypes","typeSet","Set","forEach","add","rawSignature","rawParams","parsedParam","SyntaxError","hasRestParam","last","compileTest","test0","test1","or","tests","compileTests","initial","varIndex","lastTest","testRestParam","args","testArgs","getTypeSetAtIndex","isExactType","mergeExpectedParams","paramSet","_iterator5","_step5","createError","expected","_name","matchingSignatures","_loop","nextMatchingDefs","actualTypes","data","category","actual","v","_ret2","lengths","Infinity","Math","min","apply","maxLength","max","expectedLength","argTypes","getLowestTypeIndex","getLowestConversionIndex","compareParams","param1","param2","typeDiff","convDiff","compareSignatures","signature1","signature2","pars1","pars2","last1","last2","hasRest1","hasRest2","any1","conv1","par","_iterator6","_step6","any2","conv2","_iterator7","_step7","lengthCriterion","comparisons","tc","thisComparison","c","_i2","_comparisons","sort","t1","t2","knownTypes","newMatch","_iterator8","_step8","compileArgsPreprocessing","fnConvert","compiledConversions","compileArgConversion","convertArgs","fnPreprocess","offset","preprocessRestParams","conversion0","conversion1","convertArg","arg","splitParams","_splitParams","paramsSoFar","resultingParams","flatMap","nextParam","conflicting","params1","params2","ii","typeSet1","typeSet2","overlap","_iterator9","_step9","len1","len2","restParam1","restParam2","clearResolutions","functionList","isReferToSelf","referToSelf","callback","isReferTo","makeReferTo","referTo","references","collectResolutions","resolvedReferences","reference","_iterator10","_step10","resolution","resolveReferences","self","resolvedFunctions","isResolved","fill","leftUnresolved","nothingResolved","validateDeprecatedThis","signaturesMap","deprecatedThisRegex","keys","createTypedFunction","rawSignaturesMap","warnAgainstDeprecatedThis","parsedParams","originalFunctions","preliminarySignatures","_loop2","hasOwnProperty","pp","functionIndex","conversionParams","sp","_iterator11","_step11","spName","every","_ret3","theTypedFn","internalSignatureMap","_i3","_preliminarySignature","ok0","ok1","ok2","ok3","ok4","ok5","allOk","test00","test10","test20","test30","test40","test50","test01","test11","test21","test31","test41","test51","_i4","fn0","fn1","fn2","fn3","fn4","fn5","len0","len3","len4","len5","iStart","iEnd","fns","generic","_i5","onMismatch","arg0","arg1","defineProperty","_onMismatch","start","end","findInArray","objectOrFn","checkName","nameSoFar","getObjectName","key","mergeSignatures","dest","source","sourceFunction","destFunction","saveTyped","maybeName","named","allSignatures","item","theseSignatures","thisName","argument","throwMismatchError","_findType","addType","beforeObjectTest","before","_validateConversion","to","addConversion","other","addConversions","removeConversion","existingConversion","splice","resolve","tf","argList","sigs","typedFunction"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/typed-function/lib/esm/typed-function.mjs"],"sourcesContent":["function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction ok() {\n  return true;\n}\n\nfunction notOk() {\n  return false;\n}\n\nfunction undef() {\n  return undefined;\n}\n\nvar NOT_TYPED_FUNCTION = 'Argument is not a typed-function.';\n/**\n * @typedef {{\n *   params: Param[],\n *   fn: function,\n *   test: function,\n *   implementation: function\n * }} Signature\n *\n * @typedef {{\n *   types: Type[],\n *   hasAny: boolean,\n *   hasConversion: boolean,\n *   restParam: boolean\n * }} Param\n *\n * @typedef {{\n *   name: string,\n *   typeIndex: number,\n *   test: function,\n *   isAny: boolean,\n *   conversion?: ConversionDef,\n *   conversionIndex: number,\n * }} Type\n *\n * @typedef {{\n *   from: string,\n *   to: string,\n *   convert: function (*) : *\n * }} ConversionDef\n *\n * @typedef {{\n *   name: string,\n *   test: function(*) : boolean,\n *   isAny?: boolean\n * }} TypeDef\n */\n\n/**\n * @returns {() => function}\n */\n\nfunction create() {\n  // data type tests\n\n  /**\n   * Returns true if the argument is a non-null \"plain\" object\n   */\n  function isPlainObject(x) {\n    return _typeof(x) === 'object' && x !== null && x.constructor === Object;\n  }\n\n  var _types = [{\n    name: 'number',\n    test: function test(x) {\n      return typeof x === 'number';\n    }\n  }, {\n    name: 'string',\n    test: function test(x) {\n      return typeof x === 'string';\n    }\n  }, {\n    name: 'boolean',\n    test: function test(x) {\n      return typeof x === 'boolean';\n    }\n  }, {\n    name: 'Function',\n    test: function test(x) {\n      return typeof x === 'function';\n    }\n  }, {\n    name: 'Array',\n    test: Array.isArray\n  }, {\n    name: 'Date',\n    test: function test(x) {\n      return x instanceof Date;\n    }\n  }, {\n    name: 'RegExp',\n    test: function test(x) {\n      return x instanceof RegExp;\n    }\n  }, {\n    name: 'Object',\n    test: isPlainObject\n  }, {\n    name: 'null',\n    test: function test(x) {\n      return x === null;\n    }\n  }, {\n    name: 'undefined',\n    test: function test(x) {\n      return x === undefined;\n    }\n  }];\n  var anyType = {\n    name: 'any',\n    test: ok,\n    isAny: true\n  }; // Data structures to track the types. As these are local variables in\n  // create(), each typed universe will get its own copy, but the variables\n  // will only be accessible through the (closures of the) functions supplied\n  // as properties of the typed object, not directly.\n  // These will be initialized in clear() below\n\n  var typeMap; // primary store of all types\n\n  var typeList; // Array of just type names, for the sake of ordering\n  // And similar data structures for the type conversions:\n\n  var nConversions = 0; // the actual conversions are stored on a property of the destination types\n  // This is a temporary object, will be replaced with a function at the end\n\n  var typed = {\n    createCount: 0\n  };\n  /**\n   * Takes a type name and returns the corresponding official type object\n   * for that type.\n   *\n   * @param {string} typeName\n   * @returns {TypeDef} type\n   */\n\n  function findType(typeName) {\n    var type = typeMap.get(typeName);\n\n    if (type) {\n      return type;\n    } // Remainder is error handling\n\n\n    var message = 'Unknown type \"' + typeName + '\"';\n    var name = typeName.toLowerCase();\n    var otherName;\n\n    var _iterator = _createForOfIteratorHelper(typeList),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        otherName = _step.value;\n\n        if (otherName.toLowerCase() === name) {\n          message += '. Did you mean \"' + otherName + '\" ?';\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    throw new TypeError(message);\n  }\n  /**\n   * Adds an array `types` of type definitions to this typed instance.\n   * Each type definition should be an object with properties:\n   * 'name' - a string giving the name of the type; 'test' - function\n   * returning a boolean that tests membership in the type; and optionally\n   * 'isAny' - true only for the 'any' type.\n   *\n   * The second optional argument, `before`, gives the name of a type that\n   * these types should be added before. The new types are added in the\n   * order specified.\n   * @param {TypeDef[]} types\n   * @param {string | boolean} [beforeSpec='any'] before\n   */\n\n\n  function addTypes(types) {\n    var beforeSpec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'any';\n    var beforeIndex = beforeSpec ? findType(beforeSpec).index : typeList.length;\n    var newTypes = [];\n\n    for (var i = 0; i < types.length; ++i) {\n      if (!types[i] || typeof types[i].name !== 'string' || typeof types[i].test !== 'function') {\n        throw new TypeError('Object with properties {name: string, test: function} expected');\n      }\n\n      var typeName = types[i].name;\n\n      if (typeMap.has(typeName)) {\n        throw new TypeError('Duplicate type name \"' + typeName + '\"');\n      }\n\n      newTypes.push(typeName);\n      typeMap.set(typeName, {\n        name: typeName,\n        test: types[i].test,\n        isAny: types[i].isAny,\n        index: beforeIndex + i,\n        conversionsTo: [] // Newly added type can't have any conversions to it\n\n      });\n    } // update the typeList\n\n\n    var affectedTypes = typeList.slice(beforeIndex);\n    typeList = typeList.slice(0, beforeIndex).concat(newTypes).concat(affectedTypes); // Fix the indices\n\n    for (var _i = beforeIndex + newTypes.length; _i < typeList.length; ++_i) {\n      typeMap.get(typeList[_i]).index = _i;\n    }\n  }\n  /**\n   * Removes all types and conversions from this typed instance.\n   * May cause previously constructed typed-functions to throw\n   * strange errors when they are called with types that do not\n   * match any of their signatures.\n   */\n\n\n  function clear() {\n    typeMap = new Map();\n    typeList = [];\n    nConversions = 0;\n    addTypes([anyType], false);\n  } // initialize the types to the default list\n\n\n  clear();\n  addTypes(_types);\n  /**\n   * Removes all conversions, leaving the types alone.\n   */\n\n  function clearConversions() {\n    var typeName;\n\n    var _iterator2 = _createForOfIteratorHelper(typeList),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        typeName = _step2.value;\n        typeMap.get(typeName).conversionsTo = [];\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    nConversions = 0;\n  }\n  /**\n   * Find the type names that match a value.\n   * @param {*} value\n   * @return {string[]} Array of names of types for which\n   *                  the type test matches the value.\n   */\n\n\n  function findTypeNames(value) {\n    var matches = typeList.filter(function (name) {\n      var type = typeMap.get(name);\n      return !type.isAny && type.test(value);\n    });\n\n    if (matches.length) {\n      return matches;\n    }\n\n    return ['any'];\n  }\n  /**\n   * Check if an entity is a typed function created by any instance\n   * @param {any} entity\n   * @returns {boolean}\n   */\n\n\n  function isTypedFunction(entity) {\n    return entity && typeof entity === 'function' && '_typedFunctionData' in entity;\n  }\n  /**\n   * Find a specific signature from a (composed) typed function, for example:\n   *\n   *   typed.findSignature(fn, ['number', 'string'])\n   *   typed.findSignature(fn, 'number, string')\n   *   typed.findSignature(fn, 'number,string', {exact: true})\n   *\n   * This function findSignature will by default return the best match to\n   * the given signature, possibly employing type conversions.\n   *\n   * The (optional) third argument is a plain object giving options\n   * controlling the signature search. Currently the only implemented\n   * option is `exact`: if specified as true (default is false), only\n   * exact matches will be returned (i.e. signatures for which `fn` was\n   * directly defined). Note that a (possibly different) type matching\n   * `any`, or one or more instances of TYPE matching `...TYPE` are\n   * considered exact matches in this regard, as no conversions are used.\n   *\n   * This function returns a \"signature\" object, as does `typed.resolve()`,\n   * which is a plain object with four keys: `params` (the array of parameters\n   * for this signature), `fn` (the originally supplied function for this\n   * signature), `test` (a generated function that determines if an argument\n   * list matches this signature, and `implementation` (the function to call\n   * on a matching argument list, that performs conversions if necessary and\n   * then calls the originally supplied function).\n   *\n   * @param {Function} fn                   A typed-function\n   * @param {string | string[]} signature\n   *     Signature to be found, can be an array or a comma separated string.\n   * @param {object} options  Controls the signature search as documented\n   * @return {{ params: Param[], fn: function, test: function, implementation: function }}\n   *     Returns the matching signature, or throws an error when no signature\n   *     is found.\n   */\n\n\n  function findSignature(fn, signature, options) {\n    if (!isTypedFunction(fn)) {\n      throw new TypeError(NOT_TYPED_FUNCTION);\n    } // Canonicalize input\n\n\n    var exact = options && options.exact;\n    var stringSignature = Array.isArray(signature) ? signature.join(',') : signature;\n    var params = parseSignature(stringSignature);\n    var canonicalSignature = stringifyParams(params); // First hope we get lucky and exactly match a signature\n\n    if (!exact || canonicalSignature in fn.signatures) {\n      // OK, we can check the internal signatures\n      var match = fn._typedFunctionData.signatureMap.get(canonicalSignature);\n\n      if (match) {\n        return match;\n      }\n    } // Oh well, we did not; so we have to go back and check the parameters\n    // one by one, in order to catch things like `any` and rest params.\n    // Note here we can assume there is at least one parameter, because\n    // the empty signature would have matched successfully above.\n\n\n    var nParams = params.length;\n    var remainingSignatures;\n\n    if (exact) {\n      remainingSignatures = [];\n      var name;\n\n      for (name in fn.signatures) {\n        remainingSignatures.push(fn._typedFunctionData.signatureMap.get(name));\n      }\n    } else {\n      remainingSignatures = fn._typedFunctionData.signatures;\n    }\n\n    for (var i = 0; i < nParams; ++i) {\n      var want = params[i];\n      var filteredSignatures = [];\n      var possibility = void 0;\n\n      var _iterator3 = _createForOfIteratorHelper(remainingSignatures),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          possibility = _step3.value;\n          var have = getParamAtIndex(possibility.params, i);\n\n          if (!have || want.restParam && !have.restParam) {\n            continue;\n          }\n\n          if (!have.hasAny) {\n            var _ret = function () {\n              // have to check all of the wanted types are available\n              var haveTypes = paramTypeSet(have);\n\n              if (want.types.some(function (wtype) {\n                return !haveTypes.has(wtype.name);\n              })) {\n                return \"continue\";\n              }\n            }();\n\n            if (_ret === \"continue\") continue;\n          } // OK, this looks good\n\n\n          filteredSignatures.push(possibility);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      remainingSignatures = filteredSignatures;\n      if (remainingSignatures.length === 0) break;\n    } // Return the first remaining signature that was totally matched:\n\n\n    var candidate;\n\n    var _iterator4 = _createForOfIteratorHelper(remainingSignatures),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        candidate = _step4.value;\n\n        if (candidate.params.length <= nParams) {\n          return candidate;\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + stringifyParams(params, ', ') + '))');\n  }\n  /**\n   * Find the proper function to call for a specific signature from\n   * a (composed) typed function, for example:\n   *\n   *   typed.find(fn, ['number', 'string'])\n   *   typed.find(fn, 'number, string')\n   *   typed.find(fn, 'number,string', {exact: true})\n   *\n   * This function find will by default return the best match to\n   * the given signature, possibly employing type conversions (and returning\n   * a function that will perform those conversions as needed). The\n   * (optional) third argument is a plain object giving options contolling\n   * the signature search. Currently only the option `exact` is implemented,\n   * which defaults to \"false\". If `exact` is specified as true, then only\n   * exact matches will be returned (i.e. signatures for which `fn` was\n   * directly defined). Uses of `any` and `...TYPE` are considered exact if\n   * no conversions are necessary to apply the corresponding function.\n   *\n   * @param {Function} fn                   A typed-function\n   * @param {string | string[]} signature\n   *     Signature to be found, can be an array or a comma separated string.\n   * @param {object} options  Controls the signature match as documented\n   * @return {function}\n   *     Returns the function to call for the given signature, or throws an\n   *     error if no match is found.\n   */\n\n\n  function find(fn, signature, options) {\n    return findSignature(fn, signature, options).implementation;\n  }\n  /**\n   * Convert a given value to another data type, specified by type name.\n   *\n   * @param {*} value\n   * @param {string} typeName\n   */\n\n\n  function convert(value, typeName) {\n    // check conversion is needed\n    var type = findType(typeName);\n\n    if (type.test(value)) {\n      return value;\n    }\n\n    var conversions = type.conversionsTo;\n\n    if (conversions.length === 0) {\n      throw new Error('There are no conversions to ' + typeName + ' defined.');\n    }\n\n    for (var i = 0; i < conversions.length; i++) {\n      var fromType = findType(conversions[i].from);\n\n      if (fromType.test(value)) {\n        return conversions[i].convert(value);\n      }\n    }\n\n    throw new Error('Cannot convert ' + value + ' to ' + typeName);\n  }\n  /**\n   * Stringify parameters in a normalized way\n   * @param {Param[]} params\n   * @param {string} [','] separator\n   * @return {string}\n   */\n\n\n  function stringifyParams(params) {\n    var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n    return params.map(function (p) {\n      return p.name;\n    }).join(separator);\n  }\n  /**\n   * Parse a parameter, like \"...number | boolean\"\n   * @param {string} param\n   * @return {Param} param\n   */\n\n\n  function parseParam(param) {\n    var restParam = param.indexOf('...') === 0;\n    var types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';\n    var typeDefs = types.split('|').map(function (s) {\n      return findType(s.trim());\n    });\n    var hasAny = false;\n    var paramName = restParam ? '...' : '';\n    var exactTypes = typeDefs.map(function (type) {\n      hasAny = type.isAny || hasAny;\n      paramName += type.name + '|';\n      return {\n        name: type.name,\n        typeIndex: type.index,\n        test: type.test,\n        isAny: type.isAny,\n        conversion: null,\n        conversionIndex: -1\n      };\n    });\n    return {\n      types: exactTypes,\n      name: paramName.slice(0, -1),\n      // remove trailing '|' from above\n      hasAny: hasAny,\n      hasConversion: false,\n      restParam: restParam\n    };\n  }\n  /**\n   * Expands a parsed parameter with the types available from currently\n   * defined conversions.\n   * @param {Param} param\n   * @return {Param} param\n   */\n\n\n  function expandParam(param) {\n    var typeNames = param.types.map(function (t) {\n      return t.name;\n    });\n    var matchingConversions = availableConversions(typeNames);\n    var hasAny = param.hasAny;\n    var newName = param.name;\n    var convertibleTypes = matchingConversions.map(function (conversion) {\n      var type = findType(conversion.from);\n      hasAny = type.isAny || hasAny;\n      newName += '|' + conversion.from;\n      return {\n        name: conversion.from,\n        typeIndex: type.index,\n        test: type.test,\n        isAny: type.isAny,\n        conversion: conversion,\n        conversionIndex: conversion.index\n      };\n    });\n    return {\n      types: param.types.concat(convertibleTypes),\n      name: newName,\n      hasAny: hasAny,\n      hasConversion: convertibleTypes.length > 0,\n      restParam: param.restParam\n    };\n  }\n  /**\n   * Return the set of type names in a parameter.\n   * Caches the result for efficiency\n   *\n   * @param {Param} param\n   * @return {Set<string>} typenames\n   */\n\n\n  function paramTypeSet(param) {\n    if (!param.typeSet) {\n      param.typeSet = new Set();\n      param.types.forEach(function (type) {\n        return param.typeSet.add(type.name);\n      });\n    }\n\n    return param.typeSet;\n  }\n  /**\n   * Parse a signature with comma separated parameters,\n   * like \"number | boolean, ...string\"\n   *\n   * @param {string} signature\n   * @return {Param[]} params\n   */\n\n\n  function parseSignature(rawSignature) {\n    var params = [];\n\n    if (typeof rawSignature !== 'string') {\n      throw new TypeError('Signatures must be strings');\n    }\n\n    var signature = rawSignature.trim();\n\n    if (signature === '') {\n      return params;\n    }\n\n    var rawParams = signature.split(',');\n\n    for (var i = 0; i < rawParams.length; ++i) {\n      var parsedParam = parseParam(rawParams[i].trim());\n\n      if (parsedParam.restParam && i !== rawParams.length - 1) {\n        throw new SyntaxError('Unexpected rest parameter \"' + rawParams[i] + '\": ' + 'only allowed for the last parameter');\n      } // if invalid, short-circuit (all the types may have been filtered)\n\n\n      if (parsedParam.types.length === 0) {\n        return null;\n      }\n\n      params.push(parsedParam);\n    }\n\n    return params;\n  }\n  /**\n   * Test whether a set of params contains a restParam\n   * @param {Param[]} params\n   * @return {boolean} Returns true when the last parameter is a restParam\n   */\n\n\n  function hasRestParam(params) {\n    var param = last(params);\n    return param ? param.restParam : false;\n  }\n  /**\n   * Create a type test for a single parameter, which can have one or multiple\n   * types.\n   * @param {Param} param\n   * @return {function(x: *) : boolean} Returns a test function\n   */\n\n\n  function compileTest(param) {\n    if (!param || param.types.length === 0) {\n      // nothing to do\n      return ok;\n    } else if (param.types.length === 1) {\n      return findType(param.types[0].name).test;\n    } else if (param.types.length === 2) {\n      var test0 = findType(param.types[0].name).test;\n      var test1 = findType(param.types[1].name).test;\n      return function or(x) {\n        return test0(x) || test1(x);\n      };\n    } else {\n      // param.types.length > 2\n      var tests = param.types.map(function (type) {\n        return findType(type.name).test;\n      });\n      return function or(x) {\n        for (var i = 0; i < tests.length; i++) {\n          if (tests[i](x)) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n    }\n  }\n  /**\n   * Create a test for all parameters of a signature\n   * @param {Param[]} params\n   * @return {function(args: Array<*>) : boolean}\n   */\n\n\n  function compileTests(params) {\n    var tests, test0, test1;\n\n    if (hasRestParam(params)) {\n      // variable arguments like '...number'\n      tests = initial(params).map(compileTest);\n      var varIndex = tests.length;\n      var lastTest = compileTest(last(params));\n\n      var testRestParam = function testRestParam(args) {\n        for (var i = varIndex; i < args.length; i++) {\n          if (!lastTest(args[i])) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n\n      return function testArgs(args) {\n        for (var i = 0; i < tests.length; i++) {\n          if (!tests[i](args[i])) {\n            return false;\n          }\n        }\n\n        return testRestParam(args) && args.length >= varIndex + 1;\n      };\n    } else {\n      // no variable arguments\n      if (params.length === 0) {\n        return function testArgs(args) {\n          return args.length === 0;\n        };\n      } else if (params.length === 1) {\n        test0 = compileTest(params[0]);\n        return function testArgs(args) {\n          return test0(args[0]) && args.length === 1;\n        };\n      } else if (params.length === 2) {\n        test0 = compileTest(params[0]);\n        test1 = compileTest(params[1]);\n        return function testArgs(args) {\n          return test0(args[0]) && test1(args[1]) && args.length === 2;\n        };\n      } else {\n        // arguments.length > 2\n        tests = params.map(compileTest);\n        return function testArgs(args) {\n          for (var i = 0; i < tests.length; i++) {\n            if (!tests[i](args[i])) {\n              return false;\n            }\n          }\n\n          return args.length === tests.length;\n        };\n      }\n    }\n  }\n  /**\n   * Find the parameter at a specific index of a Params list.\n   * Handles rest parameters.\n   * @param {Param[]} params\n   * @param {number} index\n   * @return {Param | null} Returns the matching parameter when found,\n   *                        null otherwise.\n   */\n\n\n  function getParamAtIndex(params, index) {\n    return index < params.length ? params[index] : hasRestParam(params) ? last(params) : null;\n  }\n  /**\n   * Get all type names of a parameter\n   * @param {Params[]} params\n   * @param {number} index\n   * @return {string[]} Returns an array with type names\n   */\n\n\n  function getTypeSetAtIndex(params, index) {\n    var param = getParamAtIndex(params, index);\n\n    if (!param) {\n      return new Set();\n    }\n\n    return paramTypeSet(param);\n  }\n  /**\n   * Test whether a type is an exact type or conversion\n   * @param {Type} type\n   * @return {boolean} Returns true when\n   */\n\n\n  function isExactType(type) {\n    return type.conversion === null || type.conversion === undefined;\n  }\n  /**\n   * Helper function for creating error messages: create an array with\n   * all available types on a specific argument index.\n   * @param {Signature[]} signatures\n   * @param {number} index\n   * @return {string[]} Returns an array with available types\n   */\n\n\n  function mergeExpectedParams(signatures, index) {\n    var typeSet = new Set();\n    signatures.forEach(function (signature) {\n      var paramSet = getTypeSetAtIndex(signature.params, index);\n      var name;\n\n      var _iterator5 = _createForOfIteratorHelper(paramSet),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          name = _step5.value;\n          typeSet.add(name);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    });\n    return typeSet.has('any') ? ['any'] : Array.from(typeSet);\n  }\n  /**\n   * Create\n   * @param {string} name             The name of the function\n   * @param {array.<*>} args          The actual arguments passed to the function\n   * @param {Signature[]} signatures  A list with available signatures\n   * @return {TypeError} Returns a type error with additional data\n   *                     attached to it in the property `data`\n   */\n\n\n  function createError(name, args, signatures) {\n    var err, expected;\n\n    var _name = name || 'unnamed'; // test for wrong type at some index\n\n\n    var matchingSignatures = signatures;\n    var index;\n\n    var _loop = function _loop() {\n      var nextMatchingDefs = [];\n      matchingSignatures.forEach(function (signature) {\n        var param = getParamAtIndex(signature.params, index);\n        var test = compileTest(param);\n\n        if ((index < signature.params.length || hasRestParam(signature.params)) && test(args[index])) {\n          nextMatchingDefs.push(signature);\n        }\n      });\n\n      if (nextMatchingDefs.length === 0) {\n        // no matching signatures anymore, throw error \"wrong type\"\n        expected = mergeExpectedParams(matchingSignatures, index);\n\n        if (expected.length > 0) {\n          var actualTypes = findTypeNames(args[index]);\n          err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualTypes.join(' | ') + ', index: ' + index + ')');\n          err.data = {\n            category: 'wrongType',\n            fn: _name,\n            index: index,\n            actual: actualTypes,\n            expected: expected\n          };\n          return {\n            v: err\n          };\n        }\n      } else {\n        matchingSignatures = nextMatchingDefs;\n      }\n    };\n\n    for (index = 0; index < args.length; index++) {\n      var _ret2 = _loop();\n\n      if (_typeof(_ret2) === \"object\") return _ret2.v;\n    } // test for too few arguments\n\n\n    var lengths = matchingSignatures.map(function (signature) {\n      return hasRestParam(signature.params) ? Infinity : signature.params.length;\n    });\n\n    if (args.length < Math.min.apply(null, lengths)) {\n      expected = mergeExpectedParams(matchingSignatures, index);\n      err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');\n      err.data = {\n        category: 'tooFewArgs',\n        fn: _name,\n        index: args.length,\n        expected: expected\n      };\n      return err;\n    } // test for too many arguments\n\n\n    var maxLength = Math.max.apply(null, lengths);\n\n    if (args.length > maxLength) {\n      err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');\n      err.data = {\n        category: 'tooManyArgs',\n        fn: _name,\n        index: args.length,\n        expectedLength: maxLength\n      };\n      return err;\n    } // Generic error\n\n\n    var argTypes = [];\n\n    for (var i = 0; i < args.length; ++i) {\n      argTypes.push(findTypeNames(args[i]).join('|'));\n    }\n\n    err = new TypeError('Arguments of type \"' + argTypes.join(', ') + '\" do not match any of the defined signatures of function ' + _name + '.');\n    err.data = {\n      category: 'mismatch',\n      actual: argTypes\n    };\n    return err;\n  }\n  /**\n   * Find the lowest index of all exact types of a parameter (no conversions)\n   * @param {Param} param\n   * @return {number} Returns the index of the lowest type in typed.types\n   */\n\n\n  function getLowestTypeIndex(param) {\n    var min = typeList.length + 1;\n\n    for (var i = 0; i < param.types.length; i++) {\n      if (isExactType(param.types[i])) {\n        min = Math.min(min, param.types[i].typeIndex);\n      }\n    }\n\n    return min;\n  }\n  /**\n   * Find the lowest index of the conversion of all types of the parameter\n   * having a conversion\n   * @param {Param} param\n   * @return {number} Returns the lowest index of the conversions of this type\n   */\n\n\n  function getLowestConversionIndex(param) {\n    var min = nConversions + 1;\n\n    for (var i = 0; i < param.types.length; i++) {\n      if (!isExactType(param.types[i])) {\n        min = Math.min(min, param.types[i].conversionIndex);\n      }\n    }\n\n    return min;\n  }\n  /**\n   * Compare two params\n   * @param {Param} param1\n   * @param {Param} param2\n   * @return {number} returns -1 when param1 must get a lower\n   *                  index than param2, 1 when the opposite,\n   *                  or zero when both are equal\n   */\n\n\n  function compareParams(param1, param2) {\n    // We compare a number of metrics on a param in turn:\n    // 1) 'any' parameters are the least preferred\n    if (param1.hasAny) {\n      if (!param2.hasAny) {\n        return 1;\n      }\n    } else if (param2.hasAny) {\n      return -1;\n    } // 2) Prefer non-rest to rest parameters\n\n\n    if (param1.restParam) {\n      if (!param2.restParam) {\n        return 1;\n      }\n    } else if (param2.restParam) {\n      return -1;\n    } // 3) Prefer exact type match to conversions\n\n\n    if (param1.hasConversion) {\n      if (!param2.hasConversion) {\n        return 1;\n      }\n    } else if (param2.hasConversion) {\n      return -1;\n    } // 4) Prefer lower type index:\n\n\n    var typeDiff = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);\n\n    if (typeDiff < 0) {\n      return -1;\n    }\n\n    if (typeDiff > 0) {\n      return 1;\n    } // 5) Prefer lower conversion index\n\n\n    var convDiff = getLowestConversionIndex(param1) - getLowestConversionIndex(param2);\n\n    if (convDiff < 0) {\n      return -1;\n    }\n\n    if (convDiff > 0) {\n      return 1;\n    } // Don't have a basis for preference\n\n\n    return 0;\n  }\n  /**\n   * Compare two signatures\n   * @param {Signature} signature1\n   * @param {Signature} signature2\n   * @return {number} returns a negative number when param1 must get a lower\n   *                  index than param2, a positive number when the opposite,\n   *                  or zero when both are equal\n   */\n\n\n  function compareSignatures(signature1, signature2) {\n    var pars1 = signature1.params;\n    var pars2 = signature2.params;\n    var last1 = last(pars1);\n    var last2 = last(pars2);\n    var hasRest1 = hasRestParam(pars1);\n    var hasRest2 = hasRestParam(pars2); // We compare a number of metrics on signatures in turn:\n    // 1) An \"any rest param\" is least preferred\n\n    if (hasRest1 && last1.hasAny) {\n      if (!hasRest2 || !last2.hasAny) {\n        return 1;\n      }\n    } else if (hasRest2 && last2.hasAny) {\n      return -1;\n    } // 2) Minimize the number of 'any' parameters\n\n\n    var any1 = 0;\n    var conv1 = 0;\n    var par;\n\n    var _iterator6 = _createForOfIteratorHelper(pars1),\n        _step6;\n\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        par = _step6.value;\n        if (par.hasAny) ++any1;\n        if (par.hasConversion) ++conv1;\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n\n    var any2 = 0;\n    var conv2 = 0;\n\n    var _iterator7 = _createForOfIteratorHelper(pars2),\n        _step7;\n\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        par = _step7.value;\n        if (par.hasAny) ++any2;\n        if (par.hasConversion) ++conv2;\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n\n    if (any1 !== any2) {\n      return any1 - any2;\n    } // 3) A conversion rest param is less preferred\n\n\n    if (hasRest1 && last1.hasConversion) {\n      if (!hasRest2 || !last2.hasConversion) {\n        return 1;\n      }\n    } else if (hasRest2 && last2.hasConversion) {\n      return -1;\n    } // 4) Minimize the number of conversions\n\n\n    if (conv1 !== conv2) {\n      return conv1 - conv2;\n    } // 5) Prefer no rest param\n\n\n    if (hasRest1) {\n      if (!hasRest2) {\n        return 1;\n      }\n    } else if (hasRest2) {\n      return -1;\n    } // 6) Prefer shorter with rest param, longer without\n\n\n    var lengthCriterion = (pars1.length - pars2.length) * (hasRest1 ? -1 : 1);\n\n    if (lengthCriterion !== 0) {\n      return lengthCriterion;\n    } // Signatures are identical in each of the above metrics.\n    // In particular, they are the same length.\n    // We can therefore compare the parameters one by one.\n    // First we count which signature has more preferred parameters.\n\n\n    var comparisons = [];\n    var tc = 0;\n\n    for (var i = 0; i < pars1.length; ++i) {\n      var thisComparison = compareParams(pars1[i], pars2[i]);\n      comparisons.push(thisComparison);\n      tc += thisComparison;\n    }\n\n    if (tc !== 0) {\n      return tc;\n    } // They have the same number of preferred parameters, so go by the\n    // earliest parameter in which we have a preference.\n    // In other words, dispatch is driven somewhat more by earlier\n    // parameters than later ones.\n\n\n    var c;\n\n    for (var _i2 = 0, _comparisons = comparisons; _i2 < _comparisons.length; _i2++) {\n      c = _comparisons[_i2];\n\n      if (c !== 0) {\n        return c;\n      }\n    } // It's a tossup:\n\n\n    return 0;\n  }\n  /**\n   * Produce a list of all conversions from distinct types to one of\n   * the given types.\n   *\n   * @param {string[]} typeNames\n   * @return {ConversionDef[]} Returns the conversions that are available\n   *                        resulting in any given type (if any)\n   */\n\n\n  function availableConversions(typeNames) {\n    if (typeNames.length === 0) {\n      return [];\n    }\n\n    var types = typeNames.map(findType);\n\n    if (typeNames.length > 1) {\n      types.sort(function (t1, t2) {\n        return t1.index - t2.index;\n      });\n    }\n\n    var matches = types[0].conversionsTo;\n\n    if (typeNames.length === 1) {\n      return matches;\n    }\n\n    matches = matches.concat([]); // shallow copy the matches\n    // Since the types are now in index order, we just want the first\n    // occurrence of any from type:\n\n    var knownTypes = new Set(typeNames);\n\n    for (var i = 1; i < types.length; ++i) {\n      var newMatch = void 0;\n\n      var _iterator8 = _createForOfIteratorHelper(types[i].conversionsTo),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          newMatch = _step8.value;\n\n          if (!knownTypes.has(newMatch.from)) {\n            matches.push(newMatch);\n            knownTypes.add(newMatch.from);\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n\n    return matches;\n  }\n  /**\n   * Preprocess arguments before calling the original function:\n   * - if needed convert the parameters\n   * - in case of rest parameters, move the rest parameters into an Array\n   * @param {Param[]} params\n   * @param {function} fn\n   * @return {function} Returns a wrapped function\n   */\n\n\n  function compileArgsPreprocessing(params, fn) {\n    var fnConvert = fn; // TODO: can we make this wrapper function smarter/simpler?\n\n    if (params.some(function (p) {\n      return p.hasConversion;\n    })) {\n      var restParam = hasRestParam(params);\n      var compiledConversions = params.map(compileArgConversion);\n\n      fnConvert = function convertArgs() {\n        var args = [];\n        var last = restParam ? arguments.length - 1 : arguments.length;\n\n        for (var i = 0; i < last; i++) {\n          args[i] = compiledConversions[i](arguments[i]);\n        }\n\n        if (restParam) {\n          args[last] = arguments[last].map(compiledConversions[last]);\n        }\n\n        return fn.apply(this, args);\n      };\n    }\n\n    var fnPreprocess = fnConvert;\n\n    if (hasRestParam(params)) {\n      var offset = params.length - 1;\n\n      fnPreprocess = function preprocessRestParams() {\n        return fnConvert.apply(this, slice(arguments, 0, offset).concat([slice(arguments, offset)]));\n      };\n    }\n\n    return fnPreprocess;\n  }\n  /**\n   * Compile conversion for a parameter to the right type\n   * @param {Param} param\n   * @return {function} Returns the wrapped function that will convert arguments\n   *\n   */\n\n\n  function compileArgConversion(param) {\n    var test0, test1, conversion0, conversion1;\n    var tests = [];\n    var conversions = [];\n    param.types.forEach(function (type) {\n      if (type.conversion) {\n        tests.push(findType(type.conversion.from).test);\n        conversions.push(type.conversion.convert);\n      }\n    }); // create optimized conversion functions depending on the number of conversions\n\n    switch (conversions.length) {\n      case 0:\n        return function convertArg(arg) {\n          return arg;\n        };\n\n      case 1:\n        test0 = tests[0];\n        conversion0 = conversions[0];\n        return function convertArg(arg) {\n          if (test0(arg)) {\n            return conversion0(arg);\n          }\n\n          return arg;\n        };\n\n      case 2:\n        test0 = tests[0];\n        test1 = tests[1];\n        conversion0 = conversions[0];\n        conversion1 = conversions[1];\n        return function convertArg(arg) {\n          if (test0(arg)) {\n            return conversion0(arg);\n          }\n\n          if (test1(arg)) {\n            return conversion1(arg);\n          }\n\n          return arg;\n        };\n\n      default:\n        return function convertArg(arg) {\n          for (var i = 0; i < conversions.length; i++) {\n            if (tests[i](arg)) {\n              return conversions[i](arg);\n            }\n          }\n\n          return arg;\n        };\n    }\n  }\n  /**\n   * Split params with union types in to separate params.\n   *\n   * For example:\n   *\n   *     splitParams([['Array', 'Object'], ['string', 'RegExp'])\n   *     // returns:\n   *     // [\n   *     //   ['Array', 'string'],\n   *     //   ['Array', 'RegExp'],\n   *     //   ['Object', 'string'],\n   *     //   ['Object', 'RegExp']\n   *     // ]\n   *\n   * @param {Param[]} params\n   * @return {Param[]}\n   */\n\n\n  function splitParams(params) {\n    function _splitParams(params, index, paramsSoFar) {\n      if (index < params.length) {\n        var param = params[index];\n        var resultingParams = [];\n\n        if (param.restParam) {\n          // split the types of a rest parameter in two:\n          // one with only exact types, and one with exact types and conversions\n          var exactTypes = param.types.filter(isExactType);\n\n          if (exactTypes.length < param.types.length) {\n            resultingParams.push({\n              types: exactTypes,\n              name: '...' + exactTypes.map(function (t) {\n                return t.name;\n              }).join('|'),\n              hasAny: exactTypes.some(function (t) {\n                return t.isAny;\n              }),\n              hasConversion: false,\n              restParam: true\n            });\n          }\n\n          resultingParams.push(param);\n        } else {\n          // split all the types of a regular parameter into one type per param\n          resultingParams = param.types.map(function (type) {\n            return {\n              types: [type],\n              name: type.name,\n              hasAny: type.isAny,\n              hasConversion: type.conversion,\n              restParam: false\n            };\n          });\n        } // recurse over the groups with types\n\n\n        return flatMap(resultingParams, function (nextParam) {\n          return _splitParams(params, index + 1, paramsSoFar.concat([nextParam]));\n        });\n      } else {\n        // we've reached the end of the parameters.\n        return [paramsSoFar];\n      }\n    }\n\n    return _splitParams(params, 0, []);\n  }\n  /**\n   * Test whether two param lists represent conflicting signatures\n   * @param {Param[]} params1\n   * @param {Param[]} params2\n   * @return {boolean} Returns true when the signatures conflict, false otherwise.\n   */\n\n\n  function conflicting(params1, params2) {\n    var ii = Math.max(params1.length, params2.length);\n\n    for (var i = 0; i < ii; i++) {\n      var typeSet1 = getTypeSetAtIndex(params1, i);\n      var typeSet2 = getTypeSetAtIndex(params2, i);\n      var overlap = false;\n      var name = void 0;\n\n      var _iterator9 = _createForOfIteratorHelper(typeSet2),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          name = _step9.value;\n\n          if (typeSet1.has(name)) {\n            overlap = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      if (!overlap) {\n        return false;\n      }\n    }\n\n    var len1 = params1.length;\n    var len2 = params2.length;\n    var restParam1 = hasRestParam(params1);\n    var restParam2 = hasRestParam(params2);\n    return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;\n  }\n  /**\n   * Helper function for `resolveReferences` that returns a copy of\n   * functionList wihe any prior resolutions cleared out, in case we are\n   * recycling signatures from a prior typed function construction.\n   *\n   * @param {Array.<function|typed-reference>} functionList\n   * @return {Array.<function|typed-reference>}\n   */\n\n\n  function clearResolutions(functionList) {\n    return functionList.map(function (fn) {\n      if (isReferToSelf(fn)) {\n        return referToSelf(fn.referToSelf.callback);\n      }\n\n      if (isReferTo(fn)) {\n        return makeReferTo(fn.referTo.references, fn.referTo.callback);\n      }\n\n      return fn;\n    });\n  }\n  /**\n   * Take a list of references, a list of functions functionList, and a\n   * signatureMap indexing signatures into functionList, and return\n   * the list of resolutions, or a false-y value if they don't all\n   * resolve in a valid way (yet).\n   *\n   * @param {string[]} references\n   * @param {Array<function|typed-reference} functionList\n   * @param {Object.<string, integer>} signatureMap\n   * @return {function[] | false} resolutions\n   */\n\n\n  function collectResolutions(references, functionList, signatureMap) {\n    var resolvedReferences = [];\n    var reference;\n\n    var _iterator10 = _createForOfIteratorHelper(references),\n        _step10;\n\n    try {\n      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n        reference = _step10.value;\n        var resolution = signatureMap[reference];\n\n        if (typeof resolution !== 'number') {\n          throw new TypeError('No definition for referenced signature \"' + reference + '\"');\n        }\n\n        resolution = functionList[resolution];\n\n        if (typeof resolution !== 'function') {\n          return false;\n        }\n\n        resolvedReferences.push(resolution);\n      }\n    } catch (err) {\n      _iterator10.e(err);\n    } finally {\n      _iterator10.f();\n    }\n\n    return resolvedReferences;\n  }\n  /**\n   * Resolve any references in the functionList for the typed function\n   * itself. The signatureMap tells which index in the functionList a\n   * given signature should be mapped to (for use in resolving typed.referTo)\n   * and self provides the destions of a typed.referToSelf.\n   *\n   * @param {Array<function | typed-reference-object>} functionList\n   * @param {Object.<string, function>} signatureMap\n   * @param {function} self  The typed-function itself\n   * @return {Array<function>} The list of resolved functions\n   */\n\n\n  function resolveReferences(functionList, signatureMap, self) {\n    var resolvedFunctions = clearResolutions(functionList);\n    var isResolved = new Array(resolvedFunctions.length).fill(false);\n    var leftUnresolved = true;\n\n    while (leftUnresolved) {\n      leftUnresolved = false;\n      var nothingResolved = true;\n\n      for (var i = 0; i < resolvedFunctions.length; ++i) {\n        if (isResolved[i]) continue;\n        var fn = resolvedFunctions[i];\n\n        if (isReferToSelf(fn)) {\n          resolvedFunctions[i] = fn.referToSelf.callback(self); // Preserve reference in case signature is reused someday:\n\n          resolvedFunctions[i].referToSelf = fn.referToSelf;\n          isResolved[i] = true;\n          nothingResolved = false;\n        } else if (isReferTo(fn)) {\n          var resolvedReferences = collectResolutions(fn.referTo.references, resolvedFunctions, signatureMap);\n\n          if (resolvedReferences) {\n            resolvedFunctions[i] = fn.referTo.callback.apply(this, resolvedReferences); // Preserve reference in case signature is reused someday:\n\n            resolvedFunctions[i].referTo = fn.referTo;\n            isResolved[i] = true;\n            nothingResolved = false;\n          } else {\n            leftUnresolved = true;\n          }\n        }\n      }\n\n      if (nothingResolved && leftUnresolved) {\n        throw new SyntaxError('Circular reference detected in resolving typed.referTo');\n      }\n    }\n\n    return resolvedFunctions;\n  }\n  /**\n   * Validate whether any of the function bodies contains a self-reference\n   * usage like `this(...)` or `this.signatures`. This self-referencing is\n   * deprecated since typed-function v3. It has been replaced with\n   * the functions typed.referTo and typed.referToSelf.\n   * @param {Object.<string, function>} signaturesMap\n   */\n\n\n  function validateDeprecatedThis(signaturesMap) {\n    // TODO: remove this deprecation warning logic some day (it's introduced in v3)\n    // match occurrences like 'this(' and 'this.signatures'\n    var deprecatedThisRegex = /\\bthis(\\(|\\.signatures\\b)/;\n    Object.keys(signaturesMap).forEach(function (signature) {\n      var fn = signaturesMap[signature];\n\n      if (deprecatedThisRegex.test(fn.toString())) {\n        throw new SyntaxError('Using `this` to self-reference a function ' + 'is deprecated since typed-function@3. ' + 'Use typed.referTo and typed.referToSelf instead.');\n      }\n    });\n  }\n  /**\n   * Create a typed function\n   * @param {String} name               The name for the typed function\n   * @param {Object.<string, function>} rawSignaturesMap\n   *                                    An object with one or\n   *                                    multiple signatures as key, and the\n   *                                    function corresponding to the\n   *                                    signature as value.\n   * @return {function}  Returns the created typed function.\n   */\n\n\n  function createTypedFunction(name, rawSignaturesMap) {\n    typed.createCount++;\n\n    if (Object.keys(rawSignaturesMap).length === 0) {\n      throw new SyntaxError('No signatures provided');\n    }\n\n    if (typed.warnAgainstDeprecatedThis) {\n      validateDeprecatedThis(rawSignaturesMap);\n    } // Main processing loop for signatures\n\n\n    var parsedParams = [];\n    var originalFunctions = [];\n    var signaturesMap = {};\n    var preliminarySignatures = []; // may have duplicates from conversions\n\n    var signature;\n\n    var _loop2 = function _loop2() {\n      // A) Protect against polluted Object prototype:\n      if (!Object.prototype.hasOwnProperty.call(rawSignaturesMap, signature)) {\n        return \"continue\";\n      } // B) Parse the signature\n\n\n      var params = parseSignature(signature);\n      if (!params) return \"continue\"; // C) Check for conflicts\n\n      parsedParams.forEach(function (pp) {\n        if (conflicting(pp, params)) {\n          throw new TypeError('Conflicting signatures \"' + stringifyParams(pp) + '\" and \"' + stringifyParams(params) + '\".');\n        }\n      });\n      parsedParams.push(params); // D) Store the provided function and add conversions\n\n      var functionIndex = originalFunctions.length;\n      originalFunctions.push(rawSignaturesMap[signature]);\n      var conversionParams = params.map(expandParam); // E) Split the signatures and collect them up\n\n      var sp = void 0;\n\n      var _iterator11 = _createForOfIteratorHelper(splitParams(conversionParams)),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          sp = _step11.value;\n          var spName = stringifyParams(sp);\n          preliminarySignatures.push({\n            params: sp,\n            name: spName,\n            fn: functionIndex\n          });\n\n          if (sp.every(function (p) {\n            return !p.hasConversion;\n          })) {\n            signaturesMap[spName] = functionIndex;\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n    };\n\n    for (signature in rawSignaturesMap) {\n      var _ret3 = _loop2();\n\n      if (_ret3 === \"continue\") continue;\n    }\n\n    preliminarySignatures.sort(compareSignatures); // Note the forward reference to theTypedFn\n\n    var resolvedFunctions = resolveReferences(originalFunctions, signaturesMap, theTypedFn); // Fill in the proper function for each signature\n\n    var s;\n\n    for (s in signaturesMap) {\n      if (Object.prototype.hasOwnProperty.call(signaturesMap, s)) {\n        signaturesMap[s] = resolvedFunctions[signaturesMap[s]];\n      }\n    }\n\n    var signatures = [];\n    var internalSignatureMap = new Map(); // benchmarks faster than object\n\n    for (var _i3 = 0, _preliminarySignature = preliminarySignatures; _i3 < _preliminarySignature.length; _i3++) {\n      s = _preliminarySignature[_i3];\n\n      // Note it's only safe to eliminate duplicates like this\n      // _after_ the signature sorting step above; otherwise we might\n      // remove the wrong one.\n      if (!internalSignatureMap.has(s.name)) {\n        s.fn = resolvedFunctions[s.fn];\n        signatures.push(s);\n        internalSignatureMap.set(s.name, s);\n      }\n    } // we create a highly optimized checks for the first couple of signatures with max 2 arguments\n\n\n    var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);\n    var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);\n    var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);\n    var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);\n    var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);\n    var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);\n    var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5; // compile the tests\n\n    for (var i = 0; i < signatures.length; ++i) {\n      signatures[i].test = compileTests(signatures[i].params);\n    }\n\n    var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;\n    var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;\n    var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;\n    var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;\n    var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;\n    var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;\n    var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;\n    var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;\n    var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;\n    var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;\n    var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;\n    var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk; // compile the functions\n\n    for (var _i4 = 0; _i4 < signatures.length; ++_i4) {\n      signatures[_i4].implementation = compileArgsPreprocessing(signatures[_i4].params, signatures[_i4].fn);\n    }\n\n    var fn0 = ok0 ? signatures[0].implementation : undef;\n    var fn1 = ok1 ? signatures[1].implementation : undef;\n    var fn2 = ok2 ? signatures[2].implementation : undef;\n    var fn3 = ok3 ? signatures[3].implementation : undef;\n    var fn4 = ok4 ? signatures[4].implementation : undef;\n    var fn5 = ok5 ? signatures[5].implementation : undef;\n    var len0 = ok0 ? signatures[0].params.length : -1;\n    var len1 = ok1 ? signatures[1].params.length : -1;\n    var len2 = ok2 ? signatures[2].params.length : -1;\n    var len3 = ok3 ? signatures[3].params.length : -1;\n    var len4 = ok4 ? signatures[4].params.length : -1;\n    var len5 = ok5 ? signatures[5].params.length : -1; // simple and generic, but also slow\n\n    var iStart = allOk ? 6 : 0;\n    var iEnd = signatures.length; // de-reference ahead for execution speed:\n\n    var tests = signatures.map(function (s) {\n      return s.test;\n    });\n    var fns = signatures.map(function (s) {\n      return s.implementation;\n    });\n\n    var generic = function generic() {\n      'use strict';\n\n      for (var _i5 = iStart; _i5 < iEnd; _i5++) {\n        if (tests[_i5](arguments)) {\n          return fns[_i5].apply(this, arguments);\n        }\n      }\n\n      return typed.onMismatch(name, arguments, signatures);\n    }; // create the typed function\n    // fast, specialized version. Falls back to the slower, generic one if needed\n\n\n    function theTypedFn(arg0, arg1) {\n      'use strict';\n\n      if (arguments.length === len0 && test00(arg0) && test01(arg1)) {\n        return fn0.apply(this, arguments);\n      }\n\n      if (arguments.length === len1 && test10(arg0) && test11(arg1)) {\n        return fn1.apply(this, arguments);\n      }\n\n      if (arguments.length === len2 && test20(arg0) && test21(arg1)) {\n        return fn2.apply(this, arguments);\n      }\n\n      if (arguments.length === len3 && test30(arg0) && test31(arg1)) {\n        return fn3.apply(this, arguments);\n      }\n\n      if (arguments.length === len4 && test40(arg0) && test41(arg1)) {\n        return fn4.apply(this, arguments);\n      }\n\n      if (arguments.length === len5 && test50(arg0) && test51(arg1)) {\n        return fn5.apply(this, arguments);\n      }\n\n      return generic.apply(this, arguments);\n    } // attach name the typed function\n\n\n    try {\n      Object.defineProperty(theTypedFn, 'name', {\n        value: name\n      });\n    } catch (err) {// old browsers do not support Object.defineProperty and some don't support setting the name property\n      // the function name is not essential for the functioning, it's mostly useful for debugging,\n      // so it's fine to have unnamed functions.\n    } // attach signatures to the function.\n    // This property is close to the original collection of signatures\n    // used to create the typed-function, just with unions split:\n\n\n    theTypedFn.signatures = signaturesMap; // Store internal data for functions like resolve, find, etc.\n    // Also serves as the flag that this is a typed-function\n\n    theTypedFn._typedFunctionData = {\n      signatures: signatures,\n      signatureMap: internalSignatureMap\n    };\n    return theTypedFn;\n  }\n  /**\n   * Action to take on mismatch\n   * @param {string} name      Name of function that was attempted to be called\n   * @param {Array} args       Actual arguments to the call\n   * @param {Array} signatures Known signatures of the named typed-function\n   */\n\n\n  function _onMismatch(name, args, signatures) {\n    throw createError(name, args, signatures);\n  }\n  /**\n   * Return all but the last items of an array or function Arguments\n   * @param {Array | Arguments} arr\n   * @return {Array}\n   */\n\n\n  function initial(arr) {\n    return slice(arr, 0, arr.length - 1);\n  }\n  /**\n   * return the last item of an array or function Arguments\n   * @param {Array | Arguments} arr\n   * @return {*}\n   */\n\n\n  function last(arr) {\n    return arr[arr.length - 1];\n  }\n  /**\n   * Slice an array or function Arguments\n   * @param {Array | Arguments | IArguments} arr\n   * @param {number} start\n   * @param {number} [end]\n   * @return {Array}\n   */\n\n\n  function slice(arr, start, end) {\n    return Array.prototype.slice.call(arr, start, end);\n  }\n  /**\n   * Return the first item from an array for which test(arr[i]) returns true\n   * @param {Array} arr\n   * @param {function} test\n   * @return {* | undefined} Returns the first matching item\n   *                         or undefined when there is no match\n   */\n\n\n  function findInArray(arr, test) {\n    for (var i = 0; i < arr.length; i++) {\n      if (test(arr[i])) {\n        return arr[i];\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * Flat map the result invoking a callback for every item in an array.\n   * https://gist.github.com/samgiles/762ee337dff48623e729\n   * @param {Array} arr\n   * @param {function} callback\n   * @return {Array}\n   */\n\n\n  function flatMap(arr, callback) {\n    return Array.prototype.concat.apply([], arr.map(callback));\n  }\n  /**\n   * Create a reference callback to one or multiple signatures\n   *\n   * Syntax:\n   *\n   *     typed.referTo(signature1, signature2, ..., function callback(fn1, fn2, ...) {\n   *       // ...\n   *     })\n   *\n   * @returns {{referTo: {references: string[], callback}}}\n   */\n\n\n  function referTo() {\n    var references = initial(arguments).map(function (s) {\n      return stringifyParams(parseSignature(s));\n    });\n    var callback = last(arguments);\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback function expected as last argument');\n    }\n\n    return makeReferTo(references, callback);\n  }\n\n  function makeReferTo(references, callback) {\n    return {\n      referTo: {\n        references: references,\n        callback: callback\n      }\n    };\n  }\n  /**\n   * Create a reference callback to the typed-function itself\n   *\n   * @param {(self: function) => function} callback\n   * @returns {{referToSelf: { callback: function }}}\n   */\n\n\n  function referToSelf(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback function expected as first argument');\n    }\n\n    return {\n      referToSelf: {\n        callback: callback\n      }\n    };\n  }\n  /**\n   * Test whether something is a referTo object, holding a list with reference\n   * signatures and a callback.\n   *\n   * @param {Object | function} objectOrFn\n   * @returns {boolean}\n   */\n\n\n  function isReferTo(objectOrFn) {\n    return objectOrFn && _typeof(objectOrFn.referTo) === 'object' && Array.isArray(objectOrFn.referTo.references) && typeof objectOrFn.referTo.callback === 'function';\n  }\n  /**\n   * Test whether something is a referToSelf object, holding a callback where\n   * to pass `self`.\n   *\n   * @param {Object | function} objectOrFn\n   * @returns {boolean}\n   */\n\n\n  function isReferToSelf(objectOrFn) {\n    return objectOrFn && _typeof(objectOrFn.referToSelf) === 'object' && typeof objectOrFn.referToSelf.callback === 'function';\n  }\n  /**\n   * Check if name is (A) new, (B) a match, or (C) a mismatch; and throw\n   * an error in case (C).\n   *\n   * @param { string | undefined } nameSoFar\n   * @param { string | undefined } newName\n   * @returns { string } updated name\n   */\n\n\n  function checkName(nameSoFar, newName) {\n    if (!nameSoFar) {\n      return newName;\n    }\n\n    if (newName && newName !== nameSoFar) {\n      var err = new Error('Function names do not match (expected: ' + nameSoFar + ', actual: ' + newName + ')');\n      err.data = {\n        actual: newName,\n        expected: nameSoFar\n      };\n      throw err;\n    }\n\n    return nameSoFar;\n  }\n  /**\n   * Retrieve the implied name from an object with signature keys\n   * and function values, checking whether all value names match\n   *\n   * @param { {string: function} } obj\n   */\n\n\n  function getObjectName(obj) {\n    var name;\n\n    for (var key in obj) {\n      // Only pay attention to own properties, and only if their values\n      // are typed functions or functions with a signature property\n      if (Object.prototype.hasOwnProperty.call(obj, key) && (isTypedFunction(obj[key]) || typeof obj[key].signature === 'string')) {\n        name = checkName(name, obj[key].name);\n      }\n    }\n\n    return name;\n  }\n  /**\n   * Copy all of the signatures from the second argument into the first,\n   * which is modified by side effect, checking for conflicts\n   *\n   * @param {Object.<string, function|typed-reference>} dest\n   * @param {Object.<string, function|typed-reference>} source\n   */\n\n\n  function mergeSignatures(dest, source) {\n    var key;\n\n    for (key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        if (key in dest) {\n          if (source[key] !== dest[key]) {\n            var err = new Error('Signature \"' + key + '\" is defined twice');\n            err.data = {\n              signature: key,\n              sourceFunction: source[key],\n              destFunction: dest[key]\n            };\n            throw err;\n          } // else: both signatures point to the same function, that's fine\n\n        }\n\n        dest[key] = source[key];\n      }\n    }\n  }\n\n  var saveTyped = typed;\n  /**\n   * Originally the main function was a typed function itself, but then\n   * it might not be able to generate error messages if the client\n   * replaced the type system with different names.\n   *\n   * Main entry: typed([name], functions/objects with signatures...)\n   *\n   * Assembles and returns a new typed-function from the given items\n   * that provide signatures and implementations, each of which may be\n   * * a plain object mapping (string) signatures to implementing functions,\n   * * a previously constructed typed function, or\n   * * any other single function with a string-valued property `signature`.\n    * The name of the resulting typed-function will be given by the\n   * string-valued name argument if present, or if not, by the name\n   * of any of the arguments that have one, as long as any that do are\n   * consistent with each other. If no name is specified, the name will be\n   * an empty string.\n   *\n   * @param {string} maybeName [optional]\n   * @param {(function|object)[]} signature providers\n   * @returns {typed-function}\n   */\n\n  typed = function typed(maybeName) {\n    var named = typeof maybeName === 'string';\n    var start = named ? 1 : 0;\n    var name = named ? maybeName : '';\n    var allSignatures = {};\n\n    for (var i = start; i < arguments.length; ++i) {\n      var item = arguments[i];\n      var theseSignatures = {};\n      var thisName = void 0;\n\n      if (typeof item === 'function') {\n        thisName = item.name;\n\n        if (typeof item.signature === 'string') {\n          // Case 1: Ordinary function with a string 'signature' property\n          theseSignatures[item.signature] = item;\n        } else if (isTypedFunction(item)) {\n          // Case 2: Existing typed function\n          theseSignatures = item.signatures;\n        }\n      } else if (isPlainObject(item)) {\n        // Case 3: Plain object, assume keys = signatures, values = functions\n        theseSignatures = item;\n\n        if (!named) {\n          thisName = getObjectName(item);\n        }\n      }\n\n      if (Object.keys(theseSignatures).length === 0) {\n        var err = new TypeError('Argument to \\'typed\\' at index ' + i + ' is not a (typed) function, ' + 'nor an object with signatures as keys and functions as values.');\n        err.data = {\n          index: i,\n          argument: item\n        };\n        throw err;\n      }\n\n      if (!named) {\n        name = checkName(name, thisName);\n      }\n\n      mergeSignatures(allSignatures, theseSignatures);\n    }\n\n    return createTypedFunction(name || '', allSignatures);\n  };\n\n  typed.create = create;\n  typed.createCount = saveTyped.createCount;\n  typed.onMismatch = _onMismatch;\n  typed.throwMismatchError = _onMismatch;\n  typed.createError = createError;\n  typed.clear = clear;\n  typed.clearConversions = clearConversions;\n  typed.addTypes = addTypes;\n  typed._findType = findType; // For unit testing only\n\n  typed.referTo = referTo;\n  typed.referToSelf = referToSelf;\n  typed.convert = convert;\n  typed.findSignature = findSignature;\n  typed.find = find;\n  typed.isTypedFunction = isTypedFunction;\n  typed.warnAgainstDeprecatedThis = true;\n  /**\n   * add a type (convenience wrapper for typed.addTypes)\n   * @param {{name: string, test: function}} type\n   * @param {boolean} [beforeObjectTest=true]\n   *                          If true, the new test will be inserted before\n   *                          the test with name 'Object' (if any), since\n   *                          tests for Object match Array and classes too.\n   */\n\n  typed.addType = function (type, beforeObjectTest) {\n    var before = 'any';\n\n    if (beforeObjectTest !== false && typeMap.has('Object')) {\n      before = 'Object';\n    }\n\n    typed.addTypes([type], before);\n  };\n  /**\n   * Verify that the ConversionDef conversion has a valid format.\n   *\n   * @param {conversionDef} conversion\n   * @return {void}\n   * @throws {TypeError|SyntaxError}\n   */\n\n\n  function _validateConversion(conversion) {\n    if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {\n      throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n    }\n\n    if (conversion.to === conversion.from) {\n      throw new SyntaxError('Illegal to define conversion from \"' + conversion.from + '\" to itself.');\n    }\n  }\n  /**\n   * Add a conversion\n   *\n   * @param {ConversionDef} conversion\n   * @returns {void}\n   * @throws {TypeError}\n   */\n\n\n  typed.addConversion = function (conversion) {\n    _validateConversion(conversion);\n\n    var to = findType(conversion.to);\n\n    if (to.conversionsTo.every(function (other) {\n      return other.from !== conversion.from;\n    })) {\n      to.conversionsTo.push({\n        from: conversion.from,\n        convert: conversion.convert,\n        index: nConversions++\n      });\n    } else {\n      throw new Error('There is already a conversion from \"' + conversion.from + '\" to \"' + to.name + '\"');\n    }\n  };\n  /**\n   * Convenience wrapper to call addConversion on each conversion in a list.\n   *\n   @param {ConversionDef[]} conversions\n   @returns {void}\n   @throws {TypeError}\n   */\n\n\n  typed.addConversions = function (conversions) {\n    conversions.forEach(typed.addConversion);\n  };\n  /**\n   * Remove the specified conversion. The format is the same as for\n   * addConversion, and the convert function must match or an error\n   * is thrown.\n   *\n   * @param {{from: string, to: string, convert: function}} conversion\n   * @returns {void}\n   * @throws {TypeError|SyntaxError|Error}\n   */\n\n\n  typed.removeConversion = function (conversion) {\n    _validateConversion(conversion);\n\n    var to = findType(conversion.to);\n    var existingConversion = findInArray(to.conversionsTo, function (c) {\n      return c.from === conversion.from;\n    });\n\n    if (!existingConversion) {\n      throw new Error('Attempt to remove nonexistent conversion from ' + conversion.from + ' to ' + conversion.to);\n    }\n\n    if (existingConversion.convert !== conversion.convert) {\n      throw new Error('Conversion to remove does not match existing conversion');\n    }\n\n    var index = to.conversionsTo.indexOf(existingConversion);\n    to.conversionsTo.splice(index, 1);\n  };\n  /**\n   * Produce the specific signature that a typed function\n   * will execute on the given arguments. Here, a \"signature\" is an\n   * object with properties 'params', 'test', 'fn', and 'implementation'.\n   * This last property is a function that converts params as necessary\n   * and then calls 'fn'. Returns null if there is no matching signature.\n   * @param {typed-function} tf\n   * @param {any[]} argList\n   * @returns {{params: string, test: function, fn: function, implementation: function}}\n   */\n\n\n  typed.resolve = function (tf, argList) {\n    if (!isTypedFunction(tf)) {\n      throw new TypeError(NOT_TYPED_FUNCTION);\n    }\n\n    var sigs = tf._typedFunctionData.signatures;\n\n    for (var i = 0; i < sigs.length; ++i) {\n      if (sigs[i].test(argList)) {\n        return sigs[i];\n      }\n    }\n\n    return null;\n  };\n\n  return typed;\n}\n\nexport default create();\n//# sourceMappingURL=typed-function.mjs.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}