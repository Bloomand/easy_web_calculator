{"ast":null,"code":"import { isMatrix, isRange } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Index';\nvar dependencies = ['ImmutableDenseMatrix'];\nexport var createIndexClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    ImmutableDenseMatrix\n  } = _ref;\n  /**\n   * Create an index. An Index can store ranges and sets for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Usage:\n   *     const index = new Index(range1, range2, matrix1, array1, ...)\n   *\n   * Where each parameter can be any of:\n   *     A number\n   *     A string (containing a name of an object property)\n   *     An instance of Range\n   *     An Array with the Set values\n   *     A Matrix with the Set values\n   *\n   * The parameters start, end, and step must be integer numbers.\n   *\n   * @class Index\n   * @Constructor Index\n   * @param {...*} ranges\n   */\n  function Index(ranges) {\n    if (!(this instanceof Index)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    this._dimensions = [];\n    this._isScalar = true;\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n      if (isRange(arg)) {\n        this._dimensions.push(arg);\n        this._isScalar = false;\n      } else if (Array.isArray(arg) || isMatrix(arg)) {\n        // create matrix\n        var m = _createImmutableMatrix(arg.valueOf());\n        this._dimensions.push(m);\n        // size\n        var size = m.size();\n        // scalar\n        if (size.length !== 1 || size[0] !== 1) {\n          this._isScalar = false;\n        }\n      } else if (typeof arg === 'number') {\n        this._dimensions.push(_createImmutableMatrix([arg]));\n      } else if (typeof arg === 'string') {\n        // object property (arguments.count should be 1)\n        this._dimensions.push(arg);\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n      // TODO: implement support for wildcard '*'\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Index.prototype.type = 'Index';\n  Index.prototype.isIndex = true;\n  function _createImmutableMatrix(arg) {\n    // loop array elements\n    for (var i = 0, l = arg.length; i < l; i++) {\n      if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {\n        throw new TypeError('Index parameters must be positive integer numbers');\n      }\n    }\n    // create matrix\n    return new ImmutableDenseMatrix(arg);\n  }\n\n  /**\n   * Create a clone of the index\n   * @memberof Index\n   * @return {Index} clone\n   */\n  Index.prototype.clone = function () {\n    var index = new Index();\n    index._dimensions = clone(this._dimensions);\n    index._isScalar = this._isScalar;\n    return index;\n  };\n\n  /**\n   * Create an index from an array with ranges/numbers\n   * @memberof Index\n   * @param {Array.<Array | number>} ranges\n   * @return {Index} index\n   * @private\n   */\n  Index.create = function (ranges) {\n    var index = new Index();\n    Index.apply(index, ranges);\n    return index;\n  };\n\n  /**\n   * Retrieve the size of the index, the number of elements for each dimension.\n   * @memberof Index\n   * @returns {number[]} size\n   */\n  Index.prototype.size = function () {\n    var size = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var d = this._dimensions[i];\n      size[i] = typeof d === 'string' ? 1 : d.size()[0];\n    }\n    return size;\n  };\n\n  /**\n   * Get the maximum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} max\n   */\n  Index.prototype.max = function () {\n    var values = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.max();\n    }\n    return values;\n  };\n\n  /**\n   * Get the minimum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} min\n   */\n  Index.prototype.min = function () {\n    var values = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.min();\n    }\n    return values;\n  };\n\n  /**\n   * Loop over each of the ranges of the index\n   * @memberof Index\n   * @param {Function} callback   Called for each range with a Range as first\n   *                              argument, the dimension as second, and the\n   *                              index object as third.\n   */\n  Index.prototype.forEach = function (callback) {\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      callback(this._dimensions[i], i, this);\n    }\n  };\n\n  /**\n   * Retrieve the dimension for the given index\n   * @memberof Index\n   * @param {Number} dim                  Number of the dimension\n   * @returns {Range | null} range\n   */\n  Index.prototype.dimension = function (dim) {\n    return this._dimensions[dim] || null;\n  };\n\n  /**\n   * Test whether this index contains an object property\n   * @returns {boolean} Returns true if the index is an object property\n   */\n  Index.prototype.isObjectProperty = function () {\n    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';\n  };\n\n  /**\n   * Returns the object property name when the Index holds a single object property,\n   * else returns null\n   * @returns {string | null}\n   */\n  Index.prototype.getObjectProperty = function () {\n    return this.isObjectProperty() ? this._dimensions[0] : null;\n  };\n\n  /**\n   * Test whether this index contains only a single value.\n   *\n   * This is the case when the index is created with only scalar values as ranges,\n   * not for ranges resolving into a single value.\n   * @memberof Index\n   * @return {boolean} isScalar\n   */\n  Index.prototype.isScalar = function () {\n    return this._isScalar;\n  };\n\n  /**\n   * Expand the Index into an array.\n   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]\n   * @memberof Index\n   * @returns {Array} array\n   */\n  Index.prototype.toArray = function () {\n    var array = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());\n    }\n    return array;\n  };\n\n  /**\n   * Get the primitive value of the Index, a two dimensional array.\n   * Equivalent to Index.toArray().\n   * @memberof Index\n   * @returns {Array} array\n   */\n  Index.prototype.valueOf = Index.prototype.toArray;\n\n  /**\n   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'\n   * @memberof Index\n   * @returns {String} str\n   */\n  Index.prototype.toString = function () {\n    var strings = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      if (typeof dimension === 'string') {\n        strings.push(JSON.stringify(dimension));\n      } else {\n        strings.push(dimension.toString());\n      }\n    }\n    return '[' + strings.join(', ') + ']';\n  };\n\n  /**\n   * Get a JSON representation of the Index\n   * @memberof Index\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Index\", \"ranges\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   */\n  Index.prototype.toJSON = function () {\n    return {\n      mathjs: 'Index',\n      dimensions: this._dimensions\n    };\n  };\n\n  /**\n   * Instantiate an Index from a JSON object\n   * @memberof Index\n   * @param {Object} json A JSON object structured as:\n   *                     `{\"mathjs\": \"Index\", \"dimensions\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   * @return {Index}\n   */\n  Index.fromJSON = function (json) {\n    return Index.create(json.dimensions);\n  };\n  return Index;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["isMatrix","isRange","clone","isInteger","factory","name","dependencies","createIndexClass","_ref","ImmutableDenseMatrix","Index","ranges","SyntaxError","_dimensions","_isScalar","i","ii","arguments","length","arg","push","Array","isArray","m","_createImmutableMatrix","valueOf","size","TypeError","prototype","type","isIndex","l","index","create","apply","d","max","values","range","min","forEach","callback","dimension","dim","isObjectProperty","getObjectProperty","isScalar","toArray","array","toString","strings","JSON","stringify","join","toJSON","mathjs","dimensions","fromJSON","json","isClass"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/type/matrix/MatrixIndex.js"],"sourcesContent":["import { isMatrix, isRange } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Index';\nvar dependencies = ['ImmutableDenseMatrix'];\nexport var createIndexClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    ImmutableDenseMatrix\n  } = _ref;\n  /**\n   * Create an index. An Index can store ranges and sets for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Usage:\n   *     const index = new Index(range1, range2, matrix1, array1, ...)\n   *\n   * Where each parameter can be any of:\n   *     A number\n   *     A string (containing a name of an object property)\n   *     An instance of Range\n   *     An Array with the Set values\n   *     A Matrix with the Set values\n   *\n   * The parameters start, end, and step must be integer numbers.\n   *\n   * @class Index\n   * @Constructor Index\n   * @param {...*} ranges\n   */\n  function Index(ranges) {\n    if (!(this instanceof Index)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    this._dimensions = [];\n    this._isScalar = true;\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n      if (isRange(arg)) {\n        this._dimensions.push(arg);\n        this._isScalar = false;\n      } else if (Array.isArray(arg) || isMatrix(arg)) {\n        // create matrix\n        var m = _createImmutableMatrix(arg.valueOf());\n        this._dimensions.push(m);\n        // size\n        var size = m.size();\n        // scalar\n        if (size.length !== 1 || size[0] !== 1) {\n          this._isScalar = false;\n        }\n      } else if (typeof arg === 'number') {\n        this._dimensions.push(_createImmutableMatrix([arg]));\n      } else if (typeof arg === 'string') {\n        // object property (arguments.count should be 1)\n        this._dimensions.push(arg);\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n      // TODO: implement support for wildcard '*'\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Index.prototype.type = 'Index';\n  Index.prototype.isIndex = true;\n  function _createImmutableMatrix(arg) {\n    // loop array elements\n    for (var i = 0, l = arg.length; i < l; i++) {\n      if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {\n        throw new TypeError('Index parameters must be positive integer numbers');\n      }\n    }\n    // create matrix\n    return new ImmutableDenseMatrix(arg);\n  }\n\n  /**\n   * Create a clone of the index\n   * @memberof Index\n   * @return {Index} clone\n   */\n  Index.prototype.clone = function () {\n    var index = new Index();\n    index._dimensions = clone(this._dimensions);\n    index._isScalar = this._isScalar;\n    return index;\n  };\n\n  /**\n   * Create an index from an array with ranges/numbers\n   * @memberof Index\n   * @param {Array.<Array | number>} ranges\n   * @return {Index} index\n   * @private\n   */\n  Index.create = function (ranges) {\n    var index = new Index();\n    Index.apply(index, ranges);\n    return index;\n  };\n\n  /**\n   * Retrieve the size of the index, the number of elements for each dimension.\n   * @memberof Index\n   * @returns {number[]} size\n   */\n  Index.prototype.size = function () {\n    var size = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var d = this._dimensions[i];\n      size[i] = typeof d === 'string' ? 1 : d.size()[0];\n    }\n    return size;\n  };\n\n  /**\n   * Get the maximum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} max\n   */\n  Index.prototype.max = function () {\n    var values = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.max();\n    }\n    return values;\n  };\n\n  /**\n   * Get the minimum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} min\n   */\n  Index.prototype.min = function () {\n    var values = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.min();\n    }\n    return values;\n  };\n\n  /**\n   * Loop over each of the ranges of the index\n   * @memberof Index\n   * @param {Function} callback   Called for each range with a Range as first\n   *                              argument, the dimension as second, and the\n   *                              index object as third.\n   */\n  Index.prototype.forEach = function (callback) {\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      callback(this._dimensions[i], i, this);\n    }\n  };\n\n  /**\n   * Retrieve the dimension for the given index\n   * @memberof Index\n   * @param {Number} dim                  Number of the dimension\n   * @returns {Range | null} range\n   */\n  Index.prototype.dimension = function (dim) {\n    return this._dimensions[dim] || null;\n  };\n\n  /**\n   * Test whether this index contains an object property\n   * @returns {boolean} Returns true if the index is an object property\n   */\n  Index.prototype.isObjectProperty = function () {\n    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';\n  };\n\n  /**\n   * Returns the object property name when the Index holds a single object property,\n   * else returns null\n   * @returns {string | null}\n   */\n  Index.prototype.getObjectProperty = function () {\n    return this.isObjectProperty() ? this._dimensions[0] : null;\n  };\n\n  /**\n   * Test whether this index contains only a single value.\n   *\n   * This is the case when the index is created with only scalar values as ranges,\n   * not for ranges resolving into a single value.\n   * @memberof Index\n   * @return {boolean} isScalar\n   */\n  Index.prototype.isScalar = function () {\n    return this._isScalar;\n  };\n\n  /**\n   * Expand the Index into an array.\n   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]\n   * @memberof Index\n   * @returns {Array} array\n   */\n  Index.prototype.toArray = function () {\n    var array = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());\n    }\n    return array;\n  };\n\n  /**\n   * Get the primitive value of the Index, a two dimensional array.\n   * Equivalent to Index.toArray().\n   * @memberof Index\n   * @returns {Array} array\n   */\n  Index.prototype.valueOf = Index.prototype.toArray;\n\n  /**\n   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'\n   * @memberof Index\n   * @returns {String} str\n   */\n  Index.prototype.toString = function () {\n    var strings = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      if (typeof dimension === 'string') {\n        strings.push(JSON.stringify(dimension));\n      } else {\n        strings.push(dimension.toString());\n      }\n    }\n    return '[' + strings.join(', ') + ']';\n  };\n\n  /**\n   * Get a JSON representation of the Index\n   * @memberof Index\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Index\", \"ranges\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   */\n  Index.prototype.toJSON = function () {\n    return {\n      mathjs: 'Index',\n      dimensions: this._dimensions\n    };\n  };\n\n  /**\n   * Instantiate an Index from a JSON object\n   * @memberof Index\n   * @param {Object} json A JSON object structured as:\n   *                     `{\"mathjs\": \"Index\", \"dimensions\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   * @return {Index}\n   */\n  Index.fromJSON = function (json) {\n    return Index.create(json.dimensions);\n  };\n  return Index;\n}, {\n  isClass: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}