{"ast":null,"code":"import { isMatrix } from '../../utils/is.js';\nimport { format } from '../../utils/string.js';\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'sqrtm';\nvar dependencies = ['typed', 'abs', 'add', 'multiply', 'map', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];\nexport var createSqrtm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    multiply,\n    map,\n    sqrt,\n    subtract,\n    inv,\n    size,\n    max,\n    identity\n  } = _ref;\n  var _maxIterations = 1e3;\n  var _tolerance = 1e-6;\n\n  /**\n   * Calculate the principal square root matrix using the Denman–Beavers iterative method\n   *\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration\n   *\n   * @param  {Array | Matrix} A   The square matrix `A`\n   * @return {Array | Matrix}     The principal square root of matrix `A`\n   * @private\n   */\n  function _denmanBeavers(A) {\n    var error;\n    var iterations = 0;\n    var Y = A;\n    var Z = identity(size(A));\n    do {\n      var Yk = Y;\n      Y = multiply(0.5, add(Yk, inv(Z)));\n      Z = multiply(0.5, add(Z, inv(Yk)));\n      error = max(abs(subtract(Y, Yk)));\n      if (error > _tolerance && ++iterations > _maxIterations) {\n        throw new Error('computing square root of matrix: iterative method could not converge');\n      }\n    } while (error > _tolerance);\n    return Y;\n  }\n\n  /**\n   * Calculate the principal square root of a square matrix.\n   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.\n   *\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix\n   *\n   * Syntax:\n   *\n   *     X = math.sqrtm(A)\n   *\n   * Examples:\n   *\n   *     math.sqrtm([[33, 24], [48, 57]]) // returns [[5, 2], [4, 7]]\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param  {Array | Matrix} A   The square matrix `A`\n   * @return {Array | Matrix}     The principal square root of matrix `A`\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(A) {\n      var size = isMatrix(A) ? A.size() : arraySize(A);\n      switch (size.length) {\n        case 1:\n          // Single element Array | Matrix\n          if (size[0] === 1) {\n            return map(A, sqrt);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n          }\n        case 2:\n          {\n            // Two-dimensional Array | Matrix\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              return _denmanBeavers(A);\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n            }\n          }\n        default:\n          // Multi dimensional array\n          throw new RangeError('Matrix must be at most two dimensional ' + '(size: ' + format(size) + ')');\n      }\n    }\n  });\n});","map":{"version":3,"names":["isMatrix","format","arraySize","factory","name","dependencies","createSqrtm","_ref","typed","abs","add","multiply","map","sqrt","subtract","inv","size","max","identity","_maxIterations","_tolerance","_denmanBeavers","A","error","iterations","Y","Z","Yk","Error","ArrayMatrix","length","RangeError","rows","cols"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/matrix/sqrtm.js"],"sourcesContent":["import { isMatrix } from '../../utils/is.js';\nimport { format } from '../../utils/string.js';\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'sqrtm';\nvar dependencies = ['typed', 'abs', 'add', 'multiply', 'map', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];\nexport var createSqrtm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    multiply,\n    map,\n    sqrt,\n    subtract,\n    inv,\n    size,\n    max,\n    identity\n  } = _ref;\n  var _maxIterations = 1e3;\n  var _tolerance = 1e-6;\n\n  /**\n   * Calculate the principal square root matrix using the Denman–Beavers iterative method\n   *\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration\n   *\n   * @param  {Array | Matrix} A   The square matrix `A`\n   * @return {Array | Matrix}     The principal square root of matrix `A`\n   * @private\n   */\n  function _denmanBeavers(A) {\n    var error;\n    var iterations = 0;\n    var Y = A;\n    var Z = identity(size(A));\n    do {\n      var Yk = Y;\n      Y = multiply(0.5, add(Yk, inv(Z)));\n      Z = multiply(0.5, add(Z, inv(Yk)));\n      error = max(abs(subtract(Y, Yk)));\n      if (error > _tolerance && ++iterations > _maxIterations) {\n        throw new Error('computing square root of matrix: iterative method could not converge');\n      }\n    } while (error > _tolerance);\n    return Y;\n  }\n\n  /**\n   * Calculate the principal square root of a square matrix.\n   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.\n   *\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix\n   *\n   * Syntax:\n   *\n   *     X = math.sqrtm(A)\n   *\n   * Examples:\n   *\n   *     math.sqrtm([[33, 24], [48, 57]]) // returns [[5, 2], [4, 7]]\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param  {Array | Matrix} A   The square matrix `A`\n   * @return {Array | Matrix}     The principal square root of matrix `A`\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(A) {\n      var size = isMatrix(A) ? A.size() : arraySize(A);\n      switch (size.length) {\n        case 1:\n          // Single element Array | Matrix\n          if (size[0] === 1) {\n            return map(A, sqrt);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n          }\n        case 2:\n          {\n            // Two-dimensional Array | Matrix\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              return _denmanBeavers(A);\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n            }\n          }\n        default:\n          // Multi dimensional array\n          throw new RangeError('Matrix must be at most two dimensional ' + '(size: ' + format(size) + ')');\n      }\n    }\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}