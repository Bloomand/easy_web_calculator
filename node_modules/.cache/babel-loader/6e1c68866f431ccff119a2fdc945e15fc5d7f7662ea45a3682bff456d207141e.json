{"ast":null,"code":"import { isBigNumber, isCollection, isNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createCumSum } from '../../function/statistics/cumsum.js';\n\n/**\n * Attach a transform function to math.sum\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function sum\n * from one-based to zero based\n */\nvar name = 'cumsum';\nvar dependencies = ['typed', 'add', 'unaryPlus'];\nexport var createCumSumTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    unaryPlus\n  } = _ref;\n  var cumsum = createCumSum({\n    typed,\n    add,\n    unaryPlus\n  });\n  return typed(name, {\n    '...any': function any(args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length === 2 && isCollection(args[0])) {\n        var dim = args[1];\n        if (isNumber(dim)) {\n          args[1] = dim - 1;\n        } else if (isBigNumber(dim)) {\n          args[1] = dim.minus(1);\n        }\n      }\n      try {\n        return cumsum.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"names":["isBigNumber","isCollection","isNumber","factory","errorTransform","createCumSum","name","dependencies","createCumSumTransform","_ref","typed","add","unaryPlus","cumsum","any","args","length","dim","minus","apply","err","isTransformFunction"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/expression/transform/cumsum.transform.js"],"sourcesContent":["import { isBigNumber, isCollection, isNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createCumSum } from '../../function/statistics/cumsum.js';\n\n/**\n * Attach a transform function to math.sum\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function sum\n * from one-based to zero based\n */\nvar name = 'cumsum';\nvar dependencies = ['typed', 'add', 'unaryPlus'];\nexport var createCumSumTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    unaryPlus\n  } = _ref;\n  var cumsum = createCumSum({\n    typed,\n    add,\n    unaryPlus\n  });\n  return typed(name, {\n    '...any': function any(args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length === 2 && isCollection(args[0])) {\n        var dim = args[1];\n        if (isNumber(dim)) {\n          args[1] = dim - 1;\n        } else if (isBigNumber(dim)) {\n          args[1] = dim.minus(1);\n        }\n      }\n      try {\n        return cumsum.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});"],"mappings":"AAAA,SAASA,WAAW,EAAEC,YAAY,EAAEC,QAAQ,QAAQ,mBAAmB;AACvE,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,YAAY,QAAQ,qCAAqC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,WAAW,CAAC;AAChD,OAAO,IAAIC,qBAAqB,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACpF,IAAI;IACFC,KAAK;IACLC,GAAG;IACHC;EACF,CAAC,GAAGH,IAAI;EACR,IAAII,MAAM,GAAGR,YAAY,CAAC;IACxBK,KAAK;IACLC,GAAG;IACHC;EACF,CAAC,CAAC;EACF,OAAOF,KAAK,CAACJ,IAAI,EAAE;IACjB,QAAQ,EAAE,SAASQ,GAAGA,CAACC,IAAI,EAAE;MAC3B;MACA,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,IAAIf,YAAY,CAACc,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;QAC9C,IAAIE,GAAG,GAAGF,IAAI,CAAC,CAAC,CAAC;QACjB,IAAIb,QAAQ,CAACe,GAAG,CAAC,EAAE;UACjBF,IAAI,CAAC,CAAC,CAAC,GAAGE,GAAG,GAAG,CAAC;QACnB,CAAC,MAAM,IAAIjB,WAAW,CAACiB,GAAG,CAAC,EAAE;UAC3BF,IAAI,CAAC,CAAC,CAAC,GAAGE,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC;QACxB;MACF;MACA,IAAI;QACF,OAAOL,MAAM,CAACM,KAAK,CAAC,IAAI,EAAEJ,IAAI,CAAC;MACjC,CAAC,CAAC,OAAOK,GAAG,EAAE;QACZ,MAAMhB,cAAc,CAACgB,GAAG,CAAC;MAC3B;IACF;EACF,CAAC,CAAC;AACJ,CAAC,EAAE;EACDC,mBAAmB,EAAE;AACvB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}