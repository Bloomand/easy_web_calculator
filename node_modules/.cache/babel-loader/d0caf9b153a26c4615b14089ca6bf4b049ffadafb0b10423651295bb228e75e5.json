{"ast":null,"code":"import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nvar name = 'number';\nvar dependencies = ['typed'];\n\n/**\n * Separates the radix, integer part, and fractional part of a non decimal number string\n * @param {string} input string to parse\n * @returns {object} the parts of the string or null if not a valid input\n */\nfunction getNonDecimalNumberParts(input) {\n  var nonDecimalWithRadixMatch = input.match(/(0[box])([0-9a-fA-F]*)\\.([0-9a-fA-F]*)/);\n  if (nonDecimalWithRadixMatch) {\n    var radix = {\n      '0b': 2,\n      '0o': 8,\n      '0x': 16\n    }[nonDecimalWithRadixMatch[1]];\n    var integerPart = nonDecimalWithRadixMatch[2];\n    var fractionalPart = nonDecimalWithRadixMatch[3];\n    return {\n      input,\n      radix,\n      integerPart,\n      fractionalPart\n    };\n  } else {\n    return null;\n  }\n}\n\n/**\n * Makes a number from a radix, and integer part, and a fractional part\n * @param {parts} [x] parts of the number string (from getNonDecimalNumberParts)\n * @returns {number} the number\n */\nfunction makeNumberFromNonDecimalParts(parts) {\n  var n = parseInt(parts.integerPart, parts.radix);\n  var f = 0;\n  for (var i = 0; i < parts.fractionalPart.length; i++) {\n    var digitValue = parseInt(parts.fractionalPart[i], parts.radix);\n    f += digitValue / Math.pow(parts.radix, i + 1);\n  }\n  var result = n + f;\n  if (isNaN(result)) {\n    throw new SyntaxError('String \"' + parts.input + '\" is no valid number');\n  }\n  return result;\n}\nexport var createNumber = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    number: function number(x) {\n      return x;\n    },\n    string: function string(x) {\n      if (x === 'NaN') return NaN;\n      var nonDecimalNumberParts = getNonDecimalNumberParts(x);\n      if (nonDecimalNumberParts) {\n        return makeNumberFromNonDecimalParts(nonDecimalNumberParts);\n      }\n      var size = 0;\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n      if (wordSizeSuffixMatch) {\n        // x includes a size suffix like 0xffffi32, so we extract\n        // the suffix and remove it from x\n        size = Number(wordSizeSuffixMatch[2]);\n        x = wordSizeSuffixMatch[1];\n      }\n      var num = Number(x);\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n      if (wordSizeSuffixMatch) {\n        // x is a signed bin, oct, or hex literal\n        // num is the value of string x if x is interpreted as unsigned\n        if (num > 2 ** size - 1) {\n          // literal is too large for size suffix\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n        // check if the bit at index size - 1 is set and if so do the twos complement\n        if (num >= 2 ** (size - 1)) {\n          num = num - 2 ** size;\n        }\n      }\n      return num;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toNumber();\n    },\n    Fraction: function Fraction(x) {\n      return x.valueOf();\n    },\n    Unit: function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    null: function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n\n  // reviver function to parse a JSON object like:\n  //\n  //     {\"mathjs\":\"number\",\"value\":\"2.3\"}\n  //\n  // into a number 2.3\n  number.fromJSON = function (json) {\n    return parseFloat(json.value);\n  };\n  return number;\n});","map":{"version":3,"names":["factory","deepMap","name","dependencies","getNonDecimalNumberParts","input","nonDecimalWithRadixMatch","match","radix","integerPart","fractionalPart","makeNumberFromNonDecimalParts","parts","n","parseInt","f","i","length","digitValue","Math","pow","result","isNaN","SyntaxError","createNumber","_ref","typed","number","_","x","string","NaN","nonDecimalNumberParts","size","wordSizeSuffixMatch","Number","num","concat","BigNumber","toNumber","Fraction","valueOf","Unit","Error","null","_null","UnitStringUnit","unit","valuelessUnit","referToSelf","self","fromJSON","json","parseFloat","value"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/type/number.js"],"sourcesContent":["import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nvar name = 'number';\nvar dependencies = ['typed'];\n\n/**\n * Separates the radix, integer part, and fractional part of a non decimal number string\n * @param {string} input string to parse\n * @returns {object} the parts of the string or null if not a valid input\n */\nfunction getNonDecimalNumberParts(input) {\n  var nonDecimalWithRadixMatch = input.match(/(0[box])([0-9a-fA-F]*)\\.([0-9a-fA-F]*)/);\n  if (nonDecimalWithRadixMatch) {\n    var radix = {\n      '0b': 2,\n      '0o': 8,\n      '0x': 16\n    }[nonDecimalWithRadixMatch[1]];\n    var integerPart = nonDecimalWithRadixMatch[2];\n    var fractionalPart = nonDecimalWithRadixMatch[3];\n    return {\n      input,\n      radix,\n      integerPart,\n      fractionalPart\n    };\n  } else {\n    return null;\n  }\n}\n\n/**\n * Makes a number from a radix, and integer part, and a fractional part\n * @param {parts} [x] parts of the number string (from getNonDecimalNumberParts)\n * @returns {number} the number\n */\nfunction makeNumberFromNonDecimalParts(parts) {\n  var n = parseInt(parts.integerPart, parts.radix);\n  var f = 0;\n  for (var i = 0; i < parts.fractionalPart.length; i++) {\n    var digitValue = parseInt(parts.fractionalPart[i], parts.radix);\n    f += digitValue / Math.pow(parts.radix, i + 1);\n  }\n  var result = n + f;\n  if (isNaN(result)) {\n    throw new SyntaxError('String \"' + parts.input + '\" is no valid number');\n  }\n  return result;\n}\nexport var createNumber = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    number: function number(x) {\n      return x;\n    },\n    string: function string(x) {\n      if (x === 'NaN') return NaN;\n      var nonDecimalNumberParts = getNonDecimalNumberParts(x);\n      if (nonDecimalNumberParts) {\n        return makeNumberFromNonDecimalParts(nonDecimalNumberParts);\n      }\n      var size = 0;\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n      if (wordSizeSuffixMatch) {\n        // x includes a size suffix like 0xffffi32, so we extract\n        // the suffix and remove it from x\n        size = Number(wordSizeSuffixMatch[2]);\n        x = wordSizeSuffixMatch[1];\n      }\n      var num = Number(x);\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n      if (wordSizeSuffixMatch) {\n        // x is a signed bin, oct, or hex literal\n        // num is the value of string x if x is interpreted as unsigned\n        if (num > 2 ** size - 1) {\n          // literal is too large for size suffix\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n        // check if the bit at index size - 1 is set and if so do the twos complement\n        if (num >= 2 ** (size - 1)) {\n          num = num - 2 ** size;\n        }\n      }\n      return num;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toNumber();\n    },\n    Fraction: function Fraction(x) {\n      return x.valueOf();\n    },\n    Unit: function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    null: function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n\n  // reviver function to parse a JSON object like:\n  //\n  //     {\"mathjs\":\"number\",\"value\":\"2.3\"}\n  //\n  // into a number 2.3\n  number.fromJSON = function (json) {\n    return parseFloat(json.value);\n  };\n  return number;\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA,SAASC,wBAAwBA,CAACC,KAAK,EAAE;EACvC,IAAIC,wBAAwB,GAAGD,KAAK,CAACE,KAAK,CAAC,wCAAwC,CAAC;EACpF,IAAID,wBAAwB,EAAE;IAC5B,IAAIE,KAAK,GAAG;MACV,IAAI,EAAE,CAAC;MACP,IAAI,EAAE,CAAC;MACP,IAAI,EAAE;IACR,CAAC,CAACF,wBAAwB,CAAC,CAAC,CAAC,CAAC;IAC9B,IAAIG,WAAW,GAAGH,wBAAwB,CAAC,CAAC,CAAC;IAC7C,IAAII,cAAc,GAAGJ,wBAAwB,CAAC,CAAC,CAAC;IAChD,OAAO;MACLD,KAAK;MACLG,KAAK;MACLC,WAAW;MACXC;IACF,CAAC;EACH,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,6BAA6BA,CAACC,KAAK,EAAE;EAC5C,IAAIC,CAAC,GAAGC,QAAQ,CAACF,KAAK,CAACH,WAAW,EAAEG,KAAK,CAACJ,KAAK,CAAC;EAChD,IAAIO,CAAC,GAAG,CAAC;EACT,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,CAACF,cAAc,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;IACpD,IAAIE,UAAU,GAAGJ,QAAQ,CAACF,KAAK,CAACF,cAAc,CAACM,CAAC,CAAC,EAAEJ,KAAK,CAACJ,KAAK,CAAC;IAC/DO,CAAC,IAAIG,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACR,KAAK,CAACJ,KAAK,EAAEQ,CAAC,GAAG,CAAC,CAAC;EAChD;EACA,IAAIK,MAAM,GAAGR,CAAC,GAAGE,CAAC;EAClB,IAAIO,KAAK,CAACD,MAAM,CAAC,EAAE;IACjB,MAAM,IAAIE,WAAW,CAAC,UAAU,GAAGX,KAAK,CAACP,KAAK,GAAG,sBAAsB,CAAC;EAC1E;EACA,OAAOgB,MAAM;AACf;AACA,OAAO,IAAIG,YAAY,GAAG,eAAexB,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEsB,IAAI,IAAI;EAC3E,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIE,MAAM,GAAGD,KAAK,CAAC,QAAQ,EAAE;IAC3B,EAAE,EAAE,SAASE,CAACA,CAAA,EAAG;MACf,OAAO,CAAC;IACV,CAAC;IACDD,MAAM,EAAE,SAASA,MAAMA,CAACE,CAAC,EAAE;MACzB,OAAOA,CAAC;IACV,CAAC;IACDC,MAAM,EAAE,SAASA,MAAMA,CAACD,CAAC,EAAE;MACzB,IAAIA,CAAC,KAAK,KAAK,EAAE,OAAOE,GAAG;MAC3B,IAAIC,qBAAqB,GAAG5B,wBAAwB,CAACyB,CAAC,CAAC;MACvD,IAAIG,qBAAqB,EAAE;QACzB,OAAOrB,6BAA6B,CAACqB,qBAAqB,CAAC;MAC7D;MACA,IAAIC,IAAI,GAAG,CAAC;MACZ,IAAIC,mBAAmB,GAAGL,CAAC,CAACtB,KAAK,CAAC,+BAA+B,CAAC;MAClE,IAAI2B,mBAAmB,EAAE;QACvB;QACA;QACAD,IAAI,GAAGE,MAAM,CAACD,mBAAmB,CAAC,CAAC,CAAC,CAAC;QACrCL,CAAC,GAAGK,mBAAmB,CAAC,CAAC,CAAC;MAC5B;MACA,IAAIE,GAAG,GAAGD,MAAM,CAACN,CAAC,CAAC;MACnB,IAAIP,KAAK,CAACc,GAAG,CAAC,EAAE;QACd,MAAM,IAAIb,WAAW,CAAC,UAAU,GAAGM,CAAC,GAAG,sBAAsB,CAAC;MAChE;MACA,IAAIK,mBAAmB,EAAE;QACvB;QACA;QACA,IAAIE,GAAG,GAAG,CAAC,IAAIH,IAAI,GAAG,CAAC,EAAE;UACvB;UACA,MAAM,IAAIV,WAAW,CAAC,WAAW,CAACc,MAAM,CAACR,CAAC,EAAE,oBAAoB,CAAC,CAAC;QACpE;QACA;QACA,IAAIO,GAAG,IAAI,CAAC,KAAKH,IAAI,GAAG,CAAC,CAAC,EAAE;UAC1BG,GAAG,GAAGA,GAAG,GAAG,CAAC,IAAIH,IAAI;QACvB;MACF;MACA,OAAOG,GAAG;IACZ,CAAC;IACDE,SAAS,EAAE,SAASA,SAASA,CAACT,CAAC,EAAE;MAC/B,OAAOA,CAAC,CAACU,QAAQ,EAAE;IACrB,CAAC;IACDC,QAAQ,EAAE,SAASA,QAAQA,CAACX,CAAC,EAAE;MAC7B,OAAOA,CAAC,CAACY,OAAO,EAAE;IACpB,CAAC;IACDC,IAAI,EAAE,SAASA,IAAIA,CAACb,CAAC,EAAE;MACrB,MAAM,IAAIc,KAAK,CAAC,8CAA8C,CAAC;IACjE,CAAC;IACDC,IAAI,EAAE,SAASC,KAAKA,CAAChB,CAAC,EAAE;MACtB,OAAO,CAAC;IACV,CAAC;IACD,qBAAqB,EAAE,SAASiB,cAAcA,CAACC,IAAI,EAAEC,aAAa,EAAE;MAClE,OAAOD,IAAI,CAACR,QAAQ,CAACS,aAAa,CAAC;IACrC,CAAC;IACD,gBAAgB,EAAEtB,KAAK,CAACuB,WAAW,CAACC,IAAI,IAAIrB,CAAC,IAAI5B,OAAO,CAAC4B,CAAC,EAAEqB,IAAI,CAAC;EACnE,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACAvB,MAAM,CAACwB,QAAQ,GAAG,UAAUC,IAAI,EAAE;IAChC,OAAOC,UAAU,CAACD,IAAI,CAACE,KAAK,CAAC;EAC/B,CAAC;EACD,OAAO3B,MAAM;AACf,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}