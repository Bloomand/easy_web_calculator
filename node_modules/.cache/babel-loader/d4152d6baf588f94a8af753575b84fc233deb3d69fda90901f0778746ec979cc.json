{"ast":null,"code":"import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setSize';\nvar dependencies = ['typed', 'compareNatural'];\nexport var createSetSize = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    compareNatural\n  } = _ref;\n  /**\n   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setSize(set)\n   *    math.setSize(set, unique)\n   *\n   * Examples:\n   *\n   *    math.setSize([1, 2, 2, 4])          // returns 4\n   *    math.setSize([1, 2, 2, 4], true)    // returns 3\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix} a  A multiset\n   * @param {boolean} [unique]  If true, only the unique values are counted. False by default\n   * @return {number}           The number of elements of the (multi)set\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;\n    },\n    'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {\n      if (unique === false || a.length === 0) {\n        return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;\n      } else {\n        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        var count = 1;\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            count++;\n          }\n        }\n        return count;\n      }\n    }\n  });\n});","map":{"version":3,"names":["flatten","factory","name","dependencies","createSetSize","_ref","typed","compareNatural","ArrayMatrix","a","Array","isArray","length","toArray","ArrayMatrixBoolean","unique","b","sort","count","i"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/set/setSize.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setSize';\nvar dependencies = ['typed', 'compareNatural'];\nexport var createSetSize = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    compareNatural\n  } = _ref;\n  /**\n   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setSize(set)\n   *    math.setSize(set, unique)\n   *\n   * Examples:\n   *\n   *    math.setSize([1, 2, 2, 4])          // returns 4\n   *    math.setSize([1, 2, 2, 4], true)    // returns 3\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix} a  A multiset\n   * @param {boolean} [unique]  If true, only the unique values are counted. False by default\n   * @return {number}           The number of elements of the (multi)set\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;\n    },\n    'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {\n      if (unique === false || a.length === 0) {\n        return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;\n      } else {\n        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        var count = 1;\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            count++;\n          }\n        }\n        return count;\n      }\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,gBAAgB,CAAC;AAC9C,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC5E,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAE,SAASM,WAAWA,CAACC,CAAC,EAAE;MACxC,OAAOC,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,GAAGT,OAAO,CAACS,CAAC,CAAC,CAACG,MAAM,GAAGZ,OAAO,CAACS,CAAC,CAACI,OAAO,EAAE,CAAC,CAACD,MAAM;IAC3E,CAAC;IACD,yBAAyB,EAAE,SAASE,kBAAkBA,CAACL,CAAC,EAAEM,MAAM,EAAE;MAChE,IAAIA,MAAM,KAAK,KAAK,IAAIN,CAAC,CAACG,MAAM,KAAK,CAAC,EAAE;QACtC,OAAOF,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,GAAGT,OAAO,CAACS,CAAC,CAAC,CAACG,MAAM,GAAGZ,OAAO,CAACS,CAAC,CAACI,OAAO,EAAE,CAAC,CAACD,MAAM;MAC3E,CAAC,MAAM;QACL,IAAII,CAAC,GAAGhB,OAAO,CAACU,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,GAAGA,CAAC,GAAGA,CAAC,CAACI,OAAO,EAAE,CAAC,CAACI,IAAI,CAACV,cAAc,CAAC;QACxE,IAAIW,KAAK,GAAG,CAAC;QACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,CAACJ,MAAM,EAAEO,CAAC,EAAE,EAAE;UACjC,IAAIZ,cAAc,CAACS,CAAC,CAACG,CAAC,CAAC,EAAEH,CAAC,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;YACxCD,KAAK,EAAE;UACT;QACF;QACA,OAAOA,KAAK;MACd;IACF;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}