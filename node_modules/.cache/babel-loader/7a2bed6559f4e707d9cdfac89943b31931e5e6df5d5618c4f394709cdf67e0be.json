{"ast":null,"code":"import { isBigNumber } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { resize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'zeros';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nexport var createZeros = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    BigNumber\n  } = _ref;\n  /**\n   * Create a matrix filled with zeros. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.zeros(m)\n   *    math.zeros(m, format)\n   *    math.zeros(m, n)\n   *    math.zeros(m, n, format)\n   *    math.zeros([m, n])\n   *    math.zeros([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.zeros()                   // returns []\n   *    math.zeros(3)                  // returns [0, 0, 0]\n   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]\n   *    math.zeros(3, 'dense')         // returns [0, 0, 0]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]\n   *\n   * See also:\n   *\n   *    ones, identity, size, range\n   *\n   * @param {...(number|BigNumber) | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix}           A matrix filled with zeros\n   */\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');\n    },\n    // math.zeros(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _zeros(size, format);\n      } else if (config.matrix === 'Array') {\n        return _zeros(size);\n      } else {\n        return _zeros(size, 'default');\n      }\n    },\n    Array: _zeros,\n    Matrix: function Matrix(size) {\n      var format = size.storage();\n      return _zeros(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _zeros(size.valueOf(), format);\n    }\n  });\n\n  /**\n   * Create an Array or Matrix with zeros\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n  function _zeros(size, format) {\n    var hasBigNumbers = _normalize(size);\n    var defaultValue = hasBigNumbers ? new BigNumber(0) : 0;\n    _validate(size);\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n      return arr;\n    }\n  }\n\n  // replace BigNumbers with numbers, returns true if size contained BigNumbers\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (isBigNumber(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  }\n\n  // validate arguments\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function zeros must be positive integers');\n      }\n    });\n  }\n});\n\n// TODO: zeros contains almost the same code as ones. Reuse this?","map":{"version":3,"names":["isBigNumber","isInteger","resize","factory","name","dependencies","createZeros","_ref","typed","config","matrix","BigNumber","_","_zeros","numberBigNumberString","size","last","length","format","pop","Array","Matrix","storage","valueOf","ArrayMatrixString","hasBigNumbers","_normalize","defaultValue","_validate","m","arr","forEach","value","index","toNumber","Error"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/matrix/zeros.js"],"sourcesContent":["import { isBigNumber } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { resize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'zeros';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nexport var createZeros = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    BigNumber\n  } = _ref;\n  /**\n   * Create a matrix filled with zeros. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.zeros(m)\n   *    math.zeros(m, format)\n   *    math.zeros(m, n)\n   *    math.zeros(m, n, format)\n   *    math.zeros([m, n])\n   *    math.zeros([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.zeros()                   // returns []\n   *    math.zeros(3)                  // returns [0, 0, 0]\n   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]\n   *    math.zeros(3, 'dense')         // returns [0, 0, 0]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]\n   *\n   * See also:\n   *\n   *    ones, identity, size, range\n   *\n   * @param {...(number|BigNumber) | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix}           A matrix filled with zeros\n   */\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');\n    },\n    // math.zeros(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _zeros(size, format);\n      } else if (config.matrix === 'Array') {\n        return _zeros(size);\n      } else {\n        return _zeros(size, 'default');\n      }\n    },\n    Array: _zeros,\n    Matrix: function Matrix(size) {\n      var format = size.storage();\n      return _zeros(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _zeros(size.valueOf(), format);\n    }\n  });\n\n  /**\n   * Create an Array or Matrix with zeros\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n  function _zeros(size, format) {\n    var hasBigNumbers = _normalize(size);\n    var defaultValue = hasBigNumbers ? new BigNumber(0) : 0;\n    _validate(size);\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n      return arr;\n    }\n  }\n\n  // replace BigNumbers with numbers, returns true if size contained BigNumbers\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (isBigNumber(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  }\n\n  // validate arguments\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function zeros must be positive integers');\n      }\n    });\n  }\n});\n\n// TODO: zeros contains almost the same code as ones. Reuse this?"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}