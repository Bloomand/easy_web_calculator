{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { keywords } from '../keywords.js';\nimport { escape } from '../../utils/string.js';\nimport { forEach, join } from '../../utils/array.js';\nimport { toSymbol } from '../../utils/latex.js';\nimport { getPrecedence } from '../operators.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'FunctionAssignmentNode';\nvar dependencies = ['typed', 'Node'];\nexport var createFunctionAssignmentNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Node\n  } = _ref;\n  /**\n   * Is parenthesis needed?\n   * @param {Node} node\n   * @param {Object} parenthesis\n   * @param {string} implicit\n   * @private\n   */\n  function needParenthesis(node, parenthesis, implicit) {\n    var precedence = getPrecedence(node, parenthesis, implicit);\n    var exprPrecedence = getPrecedence(node.expr, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  class FunctionAssignmentNode extends Node {\n    /**\n     * @constructor FunctionAssignmentNode\n     * @extends {Node}\n     * Function assignment\n     *\n     * @param {string} name           Function name\n     * @param {string[] | Array.<{name: string, type: string}>} params\n     *                                Array with function parameter names, or an\n     *                                array with objects containing the name\n     *                                and type of the parameter\n     * @param {Node} expr             The function expression\n     */\n    constructor(name, params, expr) {\n      super();\n      // validate input\n      if (typeof name !== 'string') {\n        throw new TypeError('String expected for parameter \"name\"');\n      }\n      if (!Array.isArray(params)) {\n        throw new TypeError('Array containing strings or objects expected for parameter \"params\"');\n      }\n      if (!isNode(expr)) {\n        throw new TypeError('Node expected for parameter \"expr\"');\n      }\n      if (keywords.has(name)) {\n        throw new Error('Illegal function name, \"' + name + '\" is a reserved keyword');\n      }\n      var paramNames = new Set();\n      for (var param of params) {\n        var _name = typeof param === 'string' ? param : param.name;\n        if (paramNames.has(_name)) {\n          throw new Error(\"Duplicate parameter name \\\"\".concat(_name, \"\\\"\"));\n        } else {\n          paramNames.add(_name);\n        }\n      }\n      this.name = name;\n      this.params = params.map(function (param) {\n        return param && param.name || param;\n      });\n      this.types = params.map(function (param) {\n        return param && param.type || 'any';\n      });\n      this.expr = expr;\n    }\n    get type() {\n      return name;\n    }\n    get isFunctionAssignmentNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var childArgNames = Object.create(argNames);\n      forEach(this.params, function (param) {\n        childArgNames[param] = true;\n      });\n\n      // compile the function expression with the child args\n      var evalExpr = this.expr._compile(math, childArgNames);\n      var name = this.name;\n      var params = this.params;\n      var signature = join(this.types, ',');\n      var syntax = name + '(' + join(this.params, ', ') + ')';\n      return function evalFunctionAssignmentNode(scope, args, context) {\n        var signatures = {};\n        signatures[signature] = function () {\n          var childArgs = Object.create(args);\n          for (var i = 0; i < params.length; i++) {\n            childArgs[params[i]] = arguments[i];\n          }\n          return evalExpr(scope, childArgs, context);\n        };\n        var fn = typed(name, signatures);\n        fn.syntax = syntax;\n        scope.set(name, fn);\n        return fn;\n      };\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.expr, 'expr', this);\n    }\n\n    /**\n     * Create a new FunctionAssignmentNode whose children are the results of\n     * calling the provided callback function for each child of the original\n     * node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {FunctionAssignmentNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var expr = this._ifNode(callback(this.expr, 'expr', this));\n      return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {FunctionAssignmentNode}\n     */\n    clone() {\n      return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);\n    }\n\n    /**\n     * get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toString(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var expr = this.expr.toString(options);\n      if (needParenthesis(this, parenthesis, options && options.implicit)) {\n        expr = '(' + expr + ')';\n      }\n      return this.name + '(' + this.params.join(', ') + ') = ' + expr;\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      var types = this.types;\n      return {\n        mathjs: name,\n        name: this.name,\n        params: this.params.map(function (param, index) {\n          return {\n            name: param,\n            type: types[index]\n          };\n        }),\n        expr: this.expr\n      };\n    }\n\n    /**\n     * Instantiate an FunctionAssignmentNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     ```\n     *     {\"mathjs\": \"FunctionAssignmentNode\",\n     *      name: ..., params: ..., expr: ...}\n     *     ```\n     *     where mathjs is optional\n     * @returns {FunctionAssignmentNode}\n     */\n    static fromJSON(json) {\n      return new FunctionAssignmentNode(json.name, json.params, json.expr);\n    }\n\n    /**\n     * get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    toHTML(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var params = [];\n      for (var i = 0; i < this.params.length; i++) {\n        params.push('<span class=\"math-symbol math-parameter\">' + escape(this.params[i]) + '</span>');\n      }\n      var expr = this.expr.toHTML(options);\n      if (needParenthesis(this, parenthesis, options && options.implicit)) {\n        expr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + expr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      return '<span class=\"math-function\">' + escape(this.name) + '</span>' + '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + params.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>' + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + expr;\n    }\n\n    /**\n     * get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var expr = this.expr.toTex(options);\n      if (needParenthesis(this, parenthesis, options && options.implicit)) {\n        expr = \"\\\\left(\".concat(expr, \"\\\\right)\");\n      }\n      return '\\\\mathrm{' + this.name + '}\\\\left(' + this.params.map(toSymbol).join(',') + '\\\\right):=' + expr;\n    }\n  }\n  _defineProperty(FunctionAssignmentNode, \"name\", name);\n  return FunctionAssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isNode","keywords","escape","forEach","join","toSymbol","getPrecedence","factory","name","dependencies","createFunctionAssignmentNode","_ref","typed","Node","needParenthesis","node","parenthesis","implicit","precedence","exprPrecedence","expr","FunctionAssignmentNode","constructor","params","TypeError","Array","isArray","has","Error","paramNames","Set","param","_name","concat","add","map","types","type","isFunctionAssignmentNode","_compile","math","argNames","childArgNames","Object","create","evalExpr","signature","syntax","evalFunctionAssignmentNode","scope","args","context","signatures","childArgs","i","length","arguments","fn","set","callback","_ifNode","slice","clone","_toString","options","toString","toJSON","mathjs","index","fromJSON","json","toHTML","push","_toTex","toTex","isClass"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/expression/node/FunctionAssignmentNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { keywords } from '../keywords.js';\nimport { escape } from '../../utils/string.js';\nimport { forEach, join } from '../../utils/array.js';\nimport { toSymbol } from '../../utils/latex.js';\nimport { getPrecedence } from '../operators.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'FunctionAssignmentNode';\nvar dependencies = ['typed', 'Node'];\nexport var createFunctionAssignmentNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Node\n  } = _ref;\n  /**\n   * Is parenthesis needed?\n   * @param {Node} node\n   * @param {Object} parenthesis\n   * @param {string} implicit\n   * @private\n   */\n  function needParenthesis(node, parenthesis, implicit) {\n    var precedence = getPrecedence(node, parenthesis, implicit);\n    var exprPrecedence = getPrecedence(node.expr, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  class FunctionAssignmentNode extends Node {\n    /**\n     * @constructor FunctionAssignmentNode\n     * @extends {Node}\n     * Function assignment\n     *\n     * @param {string} name           Function name\n     * @param {string[] | Array.<{name: string, type: string}>} params\n     *                                Array with function parameter names, or an\n     *                                array with objects containing the name\n     *                                and type of the parameter\n     * @param {Node} expr             The function expression\n     */\n    constructor(name, params, expr) {\n      super();\n      // validate input\n      if (typeof name !== 'string') {\n        throw new TypeError('String expected for parameter \"name\"');\n      }\n      if (!Array.isArray(params)) {\n        throw new TypeError('Array containing strings or objects expected for parameter \"params\"');\n      }\n      if (!isNode(expr)) {\n        throw new TypeError('Node expected for parameter \"expr\"');\n      }\n      if (keywords.has(name)) {\n        throw new Error('Illegal function name, \"' + name + '\" is a reserved keyword');\n      }\n      var paramNames = new Set();\n      for (var param of params) {\n        var _name = typeof param === 'string' ? param : param.name;\n        if (paramNames.has(_name)) {\n          throw new Error(\"Duplicate parameter name \\\"\".concat(_name, \"\\\"\"));\n        } else {\n          paramNames.add(_name);\n        }\n      }\n      this.name = name;\n      this.params = params.map(function (param) {\n        return param && param.name || param;\n      });\n      this.types = params.map(function (param) {\n        return param && param.type || 'any';\n      });\n      this.expr = expr;\n    }\n    get type() {\n      return name;\n    }\n    get isFunctionAssignmentNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var childArgNames = Object.create(argNames);\n      forEach(this.params, function (param) {\n        childArgNames[param] = true;\n      });\n\n      // compile the function expression with the child args\n      var evalExpr = this.expr._compile(math, childArgNames);\n      var name = this.name;\n      var params = this.params;\n      var signature = join(this.types, ',');\n      var syntax = name + '(' + join(this.params, ', ') + ')';\n      return function evalFunctionAssignmentNode(scope, args, context) {\n        var signatures = {};\n        signatures[signature] = function () {\n          var childArgs = Object.create(args);\n          for (var i = 0; i < params.length; i++) {\n            childArgs[params[i]] = arguments[i];\n          }\n          return evalExpr(scope, childArgs, context);\n        };\n        var fn = typed(name, signatures);\n        fn.syntax = syntax;\n        scope.set(name, fn);\n        return fn;\n      };\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.expr, 'expr', this);\n    }\n\n    /**\n     * Create a new FunctionAssignmentNode whose children are the results of\n     * calling the provided callback function for each child of the original\n     * node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {FunctionAssignmentNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var expr = this._ifNode(callback(this.expr, 'expr', this));\n      return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {FunctionAssignmentNode}\n     */\n    clone() {\n      return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);\n    }\n\n    /**\n     * get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toString(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var expr = this.expr.toString(options);\n      if (needParenthesis(this, parenthesis, options && options.implicit)) {\n        expr = '(' + expr + ')';\n      }\n      return this.name + '(' + this.params.join(', ') + ') = ' + expr;\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      var types = this.types;\n      return {\n        mathjs: name,\n        name: this.name,\n        params: this.params.map(function (param, index) {\n          return {\n            name: param,\n            type: types[index]\n          };\n        }),\n        expr: this.expr\n      };\n    }\n\n    /**\n     * Instantiate an FunctionAssignmentNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     ```\n     *     {\"mathjs\": \"FunctionAssignmentNode\",\n     *      name: ..., params: ..., expr: ...}\n     *     ```\n     *     where mathjs is optional\n     * @returns {FunctionAssignmentNode}\n     */\n    static fromJSON(json) {\n      return new FunctionAssignmentNode(json.name, json.params, json.expr);\n    }\n\n    /**\n     * get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    toHTML(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var params = [];\n      for (var i = 0; i < this.params.length; i++) {\n        params.push('<span class=\"math-symbol math-parameter\">' + escape(this.params[i]) + '</span>');\n      }\n      var expr = this.expr.toHTML(options);\n      if (needParenthesis(this, parenthesis, options && options.implicit)) {\n        expr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + expr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      return '<span class=\"math-function\">' + escape(this.name) + '</span>' + '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + params.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>' + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + expr;\n    }\n\n    /**\n     * get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var expr = this.expr.toTex(options);\n      if (needParenthesis(this, parenthesis, options && options.implicit)) {\n        expr = \"\\\\left(\".concat(expr, \"\\\\right)\");\n      }\n      return '\\\\mathrm{' + this.name + '}\\\\left(' + this.params.map(toSymbol).join(',') + '\\\\right):=' + expr;\n    }\n  }\n  _defineProperty(FunctionAssignmentNode, \"name\", name);\n  return FunctionAssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}