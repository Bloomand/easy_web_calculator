{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { nthRootNumber } from '../../plain/number/index.js';\nvar name = 'nthRoot';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'concat'];\nexport var createNthRoot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber: _BigNumber,\n    concat\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2)    // returns 3 (since 3^2 == 9)\n   *     math.sqrt(9)          // returns 3 (since 3^2 == 9)\n   *     math.nthRoot(64, 3)   // returns 4 (since 4^3 == 64)\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n  function complexErr() {\n    throw new Error('Complex number not supported in function nthRoot. Use nthRoots instead.');\n  }\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber,\n    BigNumber: x => _bigNthRoot(x, new _BigNumber(2)),\n    'BigNumber, BigNumber': _bigNthRoot,\n    Complex: complexErr,\n    'Complex, number': complexErr,\n    Array: typed.referTo('DenseMatrix,number', selfDn => x => selfDn(matrix(x), 2).valueOf()),\n    DenseMatrix: typed.referTo('DenseMatrix,number', selfDn => x => selfDn(x, 2)),\n    SparseMatrix: typed.referTo('SparseMatrix,number', selfSn => x => selfSn(x, 2)),\n    'SparseMatrix, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse + sparse\n        return matAlgo06xS0S0(x, y, self);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    }),\n    'DenseMatrix, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // dense + sparse\n        return matAlgo01xDSid(x, y, self, false);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    }),\n    'Array, SparseMatrix': typed.referTo('DenseMatrix,SparseMatrix', selfDS => (x, y) => selfDS(matrix(x), y)),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse - scalar\n        return matAlgo11xS0s(y, x, self, true);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    })\n  }, matrixAlgorithmSuite({\n    scalar: 'number | BigNumber',\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: false\n  }));\n\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * https://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n  function _bigNthRoot(a, root) {\n    var precision = _BigNumber.precision;\n    var Big = _BigNumber.clone({\n      precision: precision + 2\n    });\n    var zero = new _BigNumber(0);\n    var one = new Big(1);\n    var inv = root.isNegative();\n    if (inv) {\n      root = root.neg();\n    }\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    }\n\n    // edge cases zero and infinity\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n    var x = a.abs().pow(one.div(root));\n    // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n    x = a.isNeg() ? x.neg() : x;\n    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n});\nexport var createNthRootNumber = /* #__PURE__ */factory(name, ['typed'], _ref2 => {\n  var {\n    typed\n  } = _ref2;\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber\n  });\n});","map":{"version":3,"names":["factory","createMatAlgo01xDSid","createMatAlgo02xDS0","createMatAlgo06xS0S0","createMatAlgo11xS0s","createMatrixAlgorithmSuite","nthRootNumber","name","dependencies","createNthRoot","_ref","typed","matrix","equalScalar","BigNumber","_BigNumber","concat","matAlgo01xDSid","matAlgo02xDS0","matAlgo06xS0S0","matAlgo11xS0s","matrixAlgorithmSuite","complexErr","Error","number","x","_bigNthRoot","Complex","Array","referTo","selfDn","valueOf","DenseMatrix","SparseMatrix","selfSn","referToSelf","self","y","density","selfDS","scalar","SD","Ss","sS","a","root","precision","Big","clone","zero","one","inv","isNegative","neg","isZero","abs","mod","equals","Infinity","isFinite","pow","div","isNeg","toPrecision","createNthRootNumber","_ref2"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/arithmetic/nthRoot.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { nthRootNumber } from '../../plain/number/index.js';\nvar name = 'nthRoot';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'concat'];\nexport var createNthRoot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber: _BigNumber,\n    concat\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2)    // returns 3 (since 3^2 == 9)\n   *     math.sqrt(9)          // returns 3 (since 3^2 == 9)\n   *     math.nthRoot(64, 3)   // returns 4 (since 4^3 == 64)\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n  function complexErr() {\n    throw new Error('Complex number not supported in function nthRoot. Use nthRoots instead.');\n  }\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber,\n    BigNumber: x => _bigNthRoot(x, new _BigNumber(2)),\n    'BigNumber, BigNumber': _bigNthRoot,\n    Complex: complexErr,\n    'Complex, number': complexErr,\n    Array: typed.referTo('DenseMatrix,number', selfDn => x => selfDn(matrix(x), 2).valueOf()),\n    DenseMatrix: typed.referTo('DenseMatrix,number', selfDn => x => selfDn(x, 2)),\n    SparseMatrix: typed.referTo('SparseMatrix,number', selfSn => x => selfSn(x, 2)),\n    'SparseMatrix, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse + sparse\n        return matAlgo06xS0S0(x, y, self);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    }),\n    'DenseMatrix, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // dense + sparse\n        return matAlgo01xDSid(x, y, self, false);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    }),\n    'Array, SparseMatrix': typed.referTo('DenseMatrix,SparseMatrix', selfDS => (x, y) => selfDS(matrix(x), y)),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse - scalar\n        return matAlgo11xS0s(y, x, self, true);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    })\n  }, matrixAlgorithmSuite({\n    scalar: 'number | BigNumber',\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: false\n  }));\n\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * https://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n  function _bigNthRoot(a, root) {\n    var precision = _BigNumber.precision;\n    var Big = _BigNumber.clone({\n      precision: precision + 2\n    });\n    var zero = new _BigNumber(0);\n    var one = new Big(1);\n    var inv = root.isNegative();\n    if (inv) {\n      root = root.neg();\n    }\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    }\n\n    // edge cases zero and infinity\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n    var x = a.abs().pow(one.div(root));\n    // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n    x = a.isNeg() ? x.neg() : x;\n    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n});\nexport var createNthRootNumber = /* #__PURE__ */factory(name, ['typed'], _ref2 => {\n  var {\n    typed\n  } = _ref2;\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}