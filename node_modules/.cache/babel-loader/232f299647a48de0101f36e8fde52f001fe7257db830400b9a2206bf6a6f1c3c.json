{"ast":null,"code":"var _jsxFileName = \"/Users/alexgeldash/Projects/js-easy-windows-calculator/src/components/pages/MainPage/MainPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { create, all } from 'mathjs';\n\n//Позволяет использовать библиотеку через префикс math.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = {};\nconst math = create(all, config);\n\n//Клавиши на клавиатуре\n//  Вид: [\"клавиша\",переменная типа клавиши(0/1)]\n//    1 - цифра, 0 - арифметическое действие\nconst numKeys = [[\"%\", 0], [\"CE\", 0], [\"C\", 0], [\"←\", 0], [\"1/x\", 0], [\"x²\", 0], [\"√x\", 0], [\"÷\", 0], [\"7\", 1], [\"8\", 1], [\"9\", 1], [\"×\", 0], [\"4\", 1], [\"5\", 1], [\"6\", 1], [\"-\", 0], [\"1\", 1], [\"2\", 1], [\"3\", 1], [\"+\", 0], [\"+/-\", 0], [\"0\", 1], [\".\", 0], [\"=\", 0]];\nexport const MainPage = () => {\n  _s();\n  const [flag, setFlag] = useState(0); //Флаг последнего элемента\n\n  //Фраза - общее выражение, которое будет вычисляться\n  //  Отображается маленьким шрифтом\n  const [phrase, setPhrase] = useState(\"\");\n\n  //Число - последнее введенное число, добавляется к \"фразе\"\n  //  Отображается большим шрифтом\n  const [currentNum, setNum] = useState(\"\");\n  let listBut = []; //Позволит вывести все кнопки в виде div-массива, упростит отображение\n  for (let i = 0; i < numKeys.length; i++) {\n    let styleN = ''; //Переменнная стиля, определяет какой стиль будем использовать для кнопки\n\n    if (numKeys[i][0] == \"=\") {\n      //Обрабатываем \"=\" сразу, добавляя событие evaluatePhrase()\n      listBut.push( /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttonKey\",\n        value: numKeys[i][0],\n        onClick: () => evaluatePhrase(),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"textButton\",\n          children: numKeys[i][0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 105\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 20\n      }, this));\n    } else {\n      if (i < 7 || i % 4 == 3) {\n        //Меняем стиль в зависимотси от расположения кнопки\n        styleN = 'buttonElse';\n      }\n      //На данном этапе кнопки делятся на два вида \n      //  Числовые и арифметические\n      //События:\n      //    Числовые - addNumber(значение клавиши), Арифметические - choiceArif(значение клавиши)\n      if (numKeys[i][1] == \"1\") {\n        listBut.push( /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styleN,\n          value: numKeys[i][0],\n          onClick: () => addNumber(numKeys[i][0]),\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"textButton\",\n            children: numKeys[i][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 113\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 23\n        }, this));\n      } else {\n        listBut.push( /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styleN,\n          value: numKeys[i][0],\n          onClick: () => choiceArif(numKeys[i][0]),\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"textButton\",\n            children: numKeys[i][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 114\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 23\n        }, this));\n      }\n    }\n  }\n\n  //----------- Этап всего функционала преобразования ----------------\n\n  //Обработка нажатия на \"=\"\n  const evaluatePhrase = () => {\n    setPhrase(phrase => phrase + currentNum);\n    setNum(\"\");\n    setFlag(0);\n    if (phrase != \"\") {\n      //Проверяем не пустая ли строка для избежания вывода результата \"undefined\"\n      if (flag == 0) {\n        setPhrase(phrase => String(math.evaluate(phrase)));\n      }\n    }\n  };\n\n  //Добавление цифры\n  const addNumber = num => {\n    setNum(currentNum => currentNum + num);\n    setFlag(0); //Сбрасываем флаг\n  };\n\n  //\n  const choiceArif = num => {\n    if (num == \"C\") {\n      //Очистка теквщего числа\n      setNum(\"\");\n    } else if (num == \"CE\") {\n      //Очистка всей фразы\n      setPhrase(\"\");\n    } else if (num == \"+/-\") {\n      //ПОложительное/Отрицательное число\n      if (currentNum[0] == \"-\") {\n        setNum(currentNum => \"+\" + currentNum.slice(1)); //Обрезаем первый элемент (знак)\n      } else if (currentNum[0] == \"+\") {\n        setNum(currentNum => \"-\" + currentNum.slice(1));\n      } else if (currentNum == \"\") {\n        setNum(currentNum => \"-1\");\n      } else {\n        setNum(currentNum => \"-\" + currentNum);\n      }\n    } else if (num == \"←\") {\n      //Удаление последнего элемента из фразы\n      setPhrase(phrase => phrase.slice(0, -1));\n    } else if (num == \"1/x\") {\n      //Дробь\n      if (flag == 1 || phrase == \"\") {\n        //Проверяем оканчивается ли на число\n        if (currentNum == \"\") {\n          //Защита от пустого числа\n          setPhrase(phrase => phrase + \"(1/1)\");\n        } else {\n          setPhrase(phrase => phrase + \"(1/\" + currentNum + \")\");\n        }\n        setNum(\"\");\n      }\n    } else if (num == \"x²\") {\n      //Возведение в квадрат\n      if (currentNum == \"\") {\n        //Защита от пустого числа\n        setPhrase(phrase => phrase + \"(1*1)\");\n      } else {\n        setPhrase(phrase => phrase + \"(\" + currentNum + \"*\" + currentNum + \")\");\n      }\n      setNum(\"\");\n    } else if (num == \"%\") {\n      //Процент\n      if (flag == 0 || phrase == \"\") {\n        if (currentNum == \"\") {\n          //Защита от пустого числа\n          setPhrase(phrase => phrase + \"100%\");\n        } else {\n          setPhrase(phrase => phrase + currentNum + \"%\");\n        }\n        setNum(\"\");\n      }\n    } else if (num == \"√x\") {\n      //Корень из числа\n      if (flag == 1 || phrase == \"\") {\n        if (currentNum == \"\") {\n          //Защита от пустого числа\n          setPhrase(phrase => phrase + \"sqrt(1)\");\n        } else {\n          setPhrase(phrase => phrase + \"sqrt(\" + currentNum + \")\");\n        }\n        setNum(\"\");\n      }\n    } else if (num == \"+\") {\n      //Сложение\n      if (flag == 0) {\n        setPhrase(phrase => phrase + currentNum + num);\n        setFlag(1);\n        setNum(\"\");\n      } else if (flag == 1) {\n        setPhrase(phrase => phrase.slice(0, -1) + currentNum + num);\n        setNum(\"\");\n      }\n    } else if (num == \"-\") {\n      //Вычитание\n      if (flag == 0) {\n        setPhrase(phrase => phrase + currentNum + num);\n        setFlag(1);\n        setNum(\"\");\n      } else if (flag == 1) {\n        setPhrase(phrase.slice(0, -1) + currentNum + num);\n        setNum(\"\");\n      }\n    } else if (num == \"×\") {\n      //Умножение\n      if (flag == 0) {\n        setPhrase(phrase => phrase + currentNum + \"*\");\n        setFlag(1);\n        setNum(\"\");\n      } else if (flag == 1) {\n        setPhrase(phrase => phrase.slice(0, -1) + currentNum + num);\n        setNum(\"\");\n      }\n    } else if (num == \"÷\") {\n      //Деление\n      if (flag == 0) {\n        setPhrase(phrase => phrase + currentNum + \"/\");\n        setFlag(1);\n        setNum(\"\");\n      } else if (flag == 1) {\n        setPhrase(phrase => phrase.slice(0, -1) + currentNum + num);\n        setNum(\"\");\n      }\n    }\n  };\n\n  //Скелет программы\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"Title\",\n      children: \"Standart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"viewPhr\",\n      children: phrase\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Screen\",\n      children: currentNum\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Item\",\n      children: listBut\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n_s(MainPage, \"WNv0LpqGkX3RPuS9jjvguJzN2Yo=\");\n_c = MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","create","all","jsxDEV","_jsxDEV","config","math","numKeys","MainPage","_s","flag","setFlag","phrase","setPhrase","currentNum","setNum","listBut","i","length","styleN","push","className","value","onClick","evaluatePhrase","children","fileName","_jsxFileName","lineNumber","columnNumber","addNumber","choiceArif","String","evaluate","num","slice","_c","$RefreshReg$"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/src/components/pages/MainPage/MainPage.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { create, all} from 'mathjs'\r\n\r\n//Позволяет использовать библиотеку через префикс math.\r\nconst config = { }\r\nconst math = create(all, config)\r\n\r\n//Клавиши на клавиатуре\r\n//  Вид: [\"клавиша\",переменная типа клавиши(0/1)]\r\n//    1 - цифра, 0 - арифметическое действие\r\nconst numKeys = [[\"%\",0], [\"CE\",0], [\"C\",0], [\"←\",0], [\"1/x\",0], [\"x²\",0], [\"√x\",0], [\"÷\",0], [\"7\",1], [\"8\",1], [\"9\",1], [\"×\",0], [\"4\",1], [\"5\",1], [\"6\",1], [\"-\",0], [\"1\",1], [\"2\",1], [\"3\",1], [\"+\",0], [\"+/-\",0], [\"0\",1], [\".\",0], [\"=\",0]];\r\n\r\n\r\n\r\nexport const MainPage = () => {\r\n  const [flag, setFlag] = useState(0);//Флаг последнего элемента\r\n\r\n  //Фраза - общее выражение, которое будет вычисляться\r\n  //  Отображается маленьким шрифтом\r\n  const [phrase, setPhrase] = useState(\"\");\r\n\r\n  //Число - последнее введенное число, добавляется к \"фразе\"\r\n  //  Отображается большим шрифтом\r\n  const [currentNum, setNum] = useState(\"\");\r\n\r\n  let listBut = [];//Позволит вывести все кнопки в виде div-массива, упростит отображение\r\n  for(let i =0;i<numKeys.length;i++){\r\n    let styleN = ''//Переменнная стиля, определяет какой стиль будем использовать для кнопки\r\n\r\n    if(numKeys[i][0] == \"=\"){//Обрабатываем \"=\" сразу, добавляя событие evaluatePhrase()\r\n     listBut.push( <button className=\"buttonKey\" value={numKeys[i][0]} onClick={() => evaluatePhrase()}><p className='textButton'>{numKeys[i][0]}</p></button>);\r\n    }else{\r\n      if(i<7 || i%4==3){//Меняем стиль в зависимотси от расположения кнопки\r\n        styleN='buttonElse';\r\n      }\r\n      //На данном этапе кнопки делятся на два вида \r\n      //  Числовые и арифметические\r\n      //События:\r\n      //    Числовые - addNumber(значение клавиши), Арифметические - choiceArif(значение клавиши)\r\n      if(numKeys[i][1] == \"1\"){\r\n        listBut.push( <button className={styleN} value={numKeys[i][0]} onClick={() => addNumber(numKeys[i][0])}><p className='textButton'>{numKeys[i][0]}</p></button>);\r\n      }else{\r\n        listBut.push( <button className={styleN} value={numKeys[i][0]} onClick={() => choiceArif(numKeys[i][0])}><p className='textButton'>{numKeys[i][0]}</p></button>);\r\n      }\r\n    }\r\n  }\r\n\r\n  //----------- Этап всего функционала преобразования ----------------\r\n\r\n  //Обработка нажатия на \"=\"\r\n  const evaluatePhrase = () => {\r\n    setPhrase(phrase => phrase+currentNum);\r\n    setNum(\"\");\r\n    setFlag(0);\r\n    if(phrase!=\"\"){//Проверяем не пустая ли строка для избежания вывода результата \"undefined\"\r\n      if(flag==0){\r\n        setPhrase(phrase => String(math.evaluate(phrase)));\r\n      }\r\n    }\r\n  }\r\n\r\n  //Добавление цифры\r\n  const addNumber = (num) => {\r\n    setNum(currentNum => currentNum+num);\r\n    setFlag(0);//Сбрасываем флаг\r\n  }\r\n\r\n  //\r\n  const choiceArif = (num) => {\r\n    if(num==\"C\"){//Очистка теквщего числа\r\n      setNum(\"\");\r\n    }else if(num==\"CE\"){//Очистка всей фразы\r\n      setPhrase(\"\");\r\n    }else if(num==\"+/-\"){//ПОложительное/Отрицательное число\r\n      if(currentNum[0]==\"-\"){\r\n        setNum(currentNum => \"+\"+currentNum.slice(1));//Обрезаем первый элемент (знак)\r\n      }else if(currentNum[0]==\"+\"){\r\n        setNum(currentNum => \"-\"+currentNum.slice(1));\r\n      }else if(currentNum==\"\"){\r\n        setNum(currentNum => \"-1\");\r\n      }else{\r\n        setNum(currentNum => \"-\"+currentNum);\r\n      }\r\n    }else if(num==\"←\"){//Удаление последнего элемента из фразы\r\n      setPhrase(phrase => phrase.slice(0, -1));\r\n    }else if(num==\"1/x\"){//Дробь\r\n      if(flag==1 || phrase==\"\"){//Проверяем оканчивается ли на число\r\n        if(currentNum==\"\"){//Защита от пустого числа\r\n          setPhrase(phrase => phrase+\"(1/1)\");\r\n        }else{\r\n          setPhrase(phrase => phrase+\"(1/\"+currentNum+\")\");\r\n        }\r\n        setNum(\"\");\r\n      }\r\n    }else if(num==\"x²\"){//Возведение в квадрат\r\n      if(currentNum==\"\"){//Защита от пустого числа\r\n        setPhrase(phrase => phrase+\"(1*1)\");\r\n      }else{\r\n        setPhrase(phrase => phrase+\"(\"+currentNum+\"*\"+currentNum+\")\");\r\n      }\r\n      setNum(\"\");\r\n    }else if(num==\"%\"){//Процент\r\n      if(flag==0 || phrase==\"\"){\r\n        if(currentNum==\"\"){//Защита от пустого числа\r\n          setPhrase(phrase => phrase+\"100%\");\r\n        }else{\r\n          setPhrase(phrase => phrase+currentNum+\"%\");\r\n        }\r\n        setNum(\"\");\r\n      }\r\n    }else if(num==\"√x\"){//Корень из числа\r\n      if(flag==1|| phrase==\"\"){\r\n        if(currentNum==\"\"){//Защита от пустого числа\r\n          setPhrase(phrase => phrase+\"sqrt(1)\");\r\n        }else{\r\n          setPhrase(phrase => phrase+\"sqrt(\"+currentNum+\")\");\r\n        }\r\n        setNum(\"\");\r\n      }\r\n    }else if(num==\"+\"){//Сложение\r\n      if(flag==0){\r\n        setPhrase(phrase => phrase+currentNum+num);\r\n        setFlag(1);\r\n        setNum(\"\");\r\n      }else if(flag==1){\r\n        setPhrase(phrase => phrase.slice(0, -1)+currentNum+num);\r\n        setNum(\"\");\r\n      }\r\n    }else if(num==\"-\"){//Вычитание\r\n      if(flag==0){\r\n        setPhrase(phrase => phrase+currentNum+num);\r\n        setFlag(1);\r\n        setNum(\"\");\r\n      }else if(flag==1){\r\n        setPhrase(phrase.slice(0, -1)+currentNum+num);\r\n        setNum(\"\");\r\n      }\r\n    }else if(num==\"×\"){//Умножение\r\n      if(flag==0){\r\n        setPhrase(phrase => phrase+currentNum+\"*\");\r\n        setFlag(1);\r\n        setNum(\"\");\r\n      }else if(flag==1){\r\n        setPhrase(phrase => phrase.slice(0, -1)+currentNum+num);\r\n        setNum(\"\");\r\n      }\r\n    }else if(num==\"÷\"){//Деление\r\n      if(flag==0){\r\n        setPhrase(phrase => phrase+currentNum+\"/\");\r\n        setFlag(1);\r\n        setNum(\"\");\r\n      }else if(flag==1){\r\n        setPhrase(phrase => phrase.slice(0, -1)+currentNum+num);\r\n        setNum(\"\");\r\n      }\r\n    }\r\n  }\r\n  \r\n\r\n  //Скелет программы\r\n  return (\r\n    <div className='Content'>\r\n        <div className='logo'></div>\r\n        <p className='Title'>Standart</p>\r\n        <p className='viewPhr'>{phrase}</p> \r\n        <div className='Screen'>{currentNum}</div>\r\n        <div className='Item'>{listBut}</div>\r\n    </div>\r\n  )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}