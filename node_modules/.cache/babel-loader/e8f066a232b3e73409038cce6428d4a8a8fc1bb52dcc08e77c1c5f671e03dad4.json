{"ast":null,"code":"import { isMatrix } from '../../utils/is.js';\nimport { arraySize } from '../../utils/array.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'diag';\nvar dependencies = ['typed', 'matrix', 'DenseMatrix', 'SparseMatrix'];\nexport var createDiag = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    DenseMatrix,\n    SparseMatrix\n  } = _ref;\n  /**\n   * Create a diagonal matrix or retrieve the diagonal of a matrix\n   *\n   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.\n   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.\n   * When k is positive, the values are placed on the super diagonal.\n   * When k is negative, the values are placed on the sub diagonal.\n   *\n   * Syntax:\n   *\n   *     math.diag(X)\n   *     math.diag(X, format)\n   *     math.diag(X, k)\n   *     math.diag(X, k, format)\n   *\n   * Examples:\n   *\n   *     // create a diagonal matrix\n   *     math.diag([1, 2, 3])      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n   *     math.diag([1, 2, 3], 1)   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]\n   *     math.diag([1, 2, 3], -1)  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]\n   *\n   *    // retrieve the diagonal from a matrix\n   *    const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n   *    math.diag(a)   // returns [1, 5, 9]\n   *\n   * See also:\n   *\n   *     ones, zeros, identity\n   *\n   * @param {Matrix | Array} x          A two dimensional matrix or a vector\n   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled\n   *                                    in or retrieved.\n   * @param {string} [format='dense']   The matrix storage format.\n   *\n   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.\n   */\n  return typed(name, {\n    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments\n\n    Array: function Array(x) {\n      return _diag(x, 0, arraySize(x), null);\n    },\n    'Array, number': function ArrayNumber(x, k) {\n      return _diag(x, k, arraySize(x), null);\n    },\n    'Array, BigNumber': function ArrayBigNumber(x, k) {\n      return _diag(x, k.toNumber(), arraySize(x), null);\n    },\n    'Array, string': function ArrayString(x, format) {\n      return _diag(x, 0, arraySize(x), format);\n    },\n    'Array, number, string': function ArrayNumberString(x, k, format) {\n      return _diag(x, k, arraySize(x), format);\n    },\n    'Array, BigNumber, string': function ArrayBigNumberString(x, k, format) {\n      return _diag(x, k.toNumber(), arraySize(x), format);\n    },\n    Matrix: function Matrix(x) {\n      return _diag(x, 0, x.size(), x.storage());\n    },\n    'Matrix, number': function MatrixNumber(x, k) {\n      return _diag(x, k, x.size(), x.storage());\n    },\n    'Matrix, BigNumber': function MatrixBigNumber(x, k) {\n      return _diag(x, k.toNumber(), x.size(), x.storage());\n    },\n    'Matrix, string': function MatrixString(x, format) {\n      return _diag(x, 0, x.size(), format);\n    },\n    'Matrix, number, string': function MatrixNumberString(x, k, format) {\n      return _diag(x, k, x.size(), format);\n    },\n    'Matrix, BigNumber, string': function MatrixBigNumberString(x, k, format) {\n      return _diag(x, k.toNumber(), x.size(), format);\n    }\n  });\n\n  /**\n   * Creeate diagonal matrix from a vector or vice versa\n   * @param {Array | Matrix} x\n   * @param {number} k\n   * @param {string} format Storage format for matrix. If null,\n   *                          an Array is returned\n   * @returns {Array | Matrix}\n   * @private\n   */\n  function _diag(x, k, size, format) {\n    if (!isInteger(k)) {\n      throw new TypeError('Second parameter in function diag must be an integer');\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // check dimensions\n    switch (size.length) {\n      case 1:\n        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);\n      case 2:\n        return _getDiagonal(x, k, format, size, kSub, kSuper);\n    }\n    throw new RangeError('Matrix for function diag must be 2 dimensional');\n  }\n  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {\n    // matrix size\n    var ms = [l + kSub, l + kSuper];\n    if (format && format !== 'sparse' && format !== 'dense') {\n      throw new TypeError(\"Unknown matrix type \".concat(format, \"\\\"\"));\n    }\n\n    // create diagonal matrix\n    var m = format === 'sparse' ? SparseMatrix.diagonal(ms, x, k) : DenseMatrix.diagonal(ms, x, k);\n    // check we need to return a matrix\n    return format !== null ? m : m.valueOf();\n  }\n  function _getDiagonal(x, k, format, s, kSub, kSuper) {\n    // check x is a Matrix\n    if (isMatrix(x)) {\n      // get diagonal matrix\n      var dm = x.diagonal(k);\n      // check we need to return a matrix\n      if (format !== null) {\n        // check we need to change matrix format\n        if (format !== dm.storage()) {\n          return matrix(dm, format);\n        }\n        return dm;\n      }\n      return dm.valueOf();\n    }\n    // vector size\n    var n = Math.min(s[0] - kSub, s[1] - kSuper);\n    // diagonal values\n    var vector = [];\n    // loop diagonal\n    for (var i = 0; i < n; i++) {\n      vector[i] = x[i + kSub][i + kSuper];\n    }\n    // check we need to return a matrix\n    return format !== null ? matrix(vector) : vector;\n  }\n});","map":{"version":3,"names":["isMatrix","arraySize","isInteger","factory","name","dependencies","createDiag","_ref","typed","matrix","DenseMatrix","SparseMatrix","Array","x","_diag","ArrayNumber","k","ArrayBigNumber","toNumber","ArrayString","format","ArrayNumberString","ArrayBigNumberString","Matrix","size","storage","MatrixNumber","MatrixBigNumber","MatrixString","MatrixNumberString","MatrixBigNumberString","TypeError","kSuper","kSub","length","_createDiagonalMatrix","_getDiagonal","RangeError","l","ms","concat","m","diagonal","valueOf","s","dm","n","Math","min","vector","i"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/matrix/diag.js"],"sourcesContent":["import { isMatrix } from '../../utils/is.js';\nimport { arraySize } from '../../utils/array.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'diag';\nvar dependencies = ['typed', 'matrix', 'DenseMatrix', 'SparseMatrix'];\nexport var createDiag = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    DenseMatrix,\n    SparseMatrix\n  } = _ref;\n  /**\n   * Create a diagonal matrix or retrieve the diagonal of a matrix\n   *\n   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.\n   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.\n   * When k is positive, the values are placed on the super diagonal.\n   * When k is negative, the values are placed on the sub diagonal.\n   *\n   * Syntax:\n   *\n   *     math.diag(X)\n   *     math.diag(X, format)\n   *     math.diag(X, k)\n   *     math.diag(X, k, format)\n   *\n   * Examples:\n   *\n   *     // create a diagonal matrix\n   *     math.diag([1, 2, 3])      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n   *     math.diag([1, 2, 3], 1)   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]\n   *     math.diag([1, 2, 3], -1)  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]\n   *\n   *    // retrieve the diagonal from a matrix\n   *    const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n   *    math.diag(a)   // returns [1, 5, 9]\n   *\n   * See also:\n   *\n   *     ones, zeros, identity\n   *\n   * @param {Matrix | Array} x          A two dimensional matrix or a vector\n   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled\n   *                                    in or retrieved.\n   * @param {string} [format='dense']   The matrix storage format.\n   *\n   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.\n   */\n  return typed(name, {\n    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments\n\n    Array: function Array(x) {\n      return _diag(x, 0, arraySize(x), null);\n    },\n    'Array, number': function ArrayNumber(x, k) {\n      return _diag(x, k, arraySize(x), null);\n    },\n    'Array, BigNumber': function ArrayBigNumber(x, k) {\n      return _diag(x, k.toNumber(), arraySize(x), null);\n    },\n    'Array, string': function ArrayString(x, format) {\n      return _diag(x, 0, arraySize(x), format);\n    },\n    'Array, number, string': function ArrayNumberString(x, k, format) {\n      return _diag(x, k, arraySize(x), format);\n    },\n    'Array, BigNumber, string': function ArrayBigNumberString(x, k, format) {\n      return _diag(x, k.toNumber(), arraySize(x), format);\n    },\n    Matrix: function Matrix(x) {\n      return _diag(x, 0, x.size(), x.storage());\n    },\n    'Matrix, number': function MatrixNumber(x, k) {\n      return _diag(x, k, x.size(), x.storage());\n    },\n    'Matrix, BigNumber': function MatrixBigNumber(x, k) {\n      return _diag(x, k.toNumber(), x.size(), x.storage());\n    },\n    'Matrix, string': function MatrixString(x, format) {\n      return _diag(x, 0, x.size(), format);\n    },\n    'Matrix, number, string': function MatrixNumberString(x, k, format) {\n      return _diag(x, k, x.size(), format);\n    },\n    'Matrix, BigNumber, string': function MatrixBigNumberString(x, k, format) {\n      return _diag(x, k.toNumber(), x.size(), format);\n    }\n  });\n\n  /**\n   * Creeate diagonal matrix from a vector or vice versa\n   * @param {Array | Matrix} x\n   * @param {number} k\n   * @param {string} format Storage format for matrix. If null,\n   *                          an Array is returned\n   * @returns {Array | Matrix}\n   * @private\n   */\n  function _diag(x, k, size, format) {\n    if (!isInteger(k)) {\n      throw new TypeError('Second parameter in function diag must be an integer');\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // check dimensions\n    switch (size.length) {\n      case 1:\n        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);\n      case 2:\n        return _getDiagonal(x, k, format, size, kSub, kSuper);\n    }\n    throw new RangeError('Matrix for function diag must be 2 dimensional');\n  }\n  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {\n    // matrix size\n    var ms = [l + kSub, l + kSuper];\n    if (format && format !== 'sparse' && format !== 'dense') {\n      throw new TypeError(\"Unknown matrix type \".concat(format, \"\\\"\"));\n    }\n\n    // create diagonal matrix\n    var m = format === 'sparse' ? SparseMatrix.diagonal(ms, x, k) : DenseMatrix.diagonal(ms, x, k);\n    // check we need to return a matrix\n    return format !== null ? m : m.valueOf();\n  }\n  function _getDiagonal(x, k, format, s, kSub, kSuper) {\n    // check x is a Matrix\n    if (isMatrix(x)) {\n      // get diagonal matrix\n      var dm = x.diagonal(k);\n      // check we need to return a matrix\n      if (format !== null) {\n        // check we need to change matrix format\n        if (format !== dm.storage()) {\n          return matrix(dm, format);\n        }\n        return dm;\n      }\n      return dm.valueOf();\n    }\n    // vector size\n    var n = Math.min(s[0] - kSub, s[1] - kSuper);\n    // diagonal values\n    var vector = [];\n    // loop diagonal\n    for (var i = 0; i < n; i++) {\n      vector[i] = x[i + kSub][i + kSuper];\n    }\n    // check we need to return a matrix\n    return format !== null ? matrix(vector) : vector;\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}