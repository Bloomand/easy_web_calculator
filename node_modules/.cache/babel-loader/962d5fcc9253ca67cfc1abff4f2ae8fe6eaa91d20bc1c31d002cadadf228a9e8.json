{"ast":null,"code":"import { errorTransform } from './utils/errorTransform.js';\nimport { factory } from '../../utils/factory.js';\nimport { createApply } from '../../function/matrix/apply.js';\nimport { isBigNumber, isNumber } from '../../utils/is.js';\nvar name = 'apply';\nvar dependencies = ['typed', 'isInteger'];\n\n/**\n * Attach a transform function to math.apply\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function apply\n * from one-based to zero based\n */\nexport var createApplyTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isInteger\n  } = _ref;\n  var apply = createApply({\n    typed,\n    isInteger\n  });\n\n  // @see: comment of concat itself\n  return typed('apply', {\n    '...any': function any(args) {\n      // change dim from one-based to zero-based\n      var dim = args[1];\n      if (isNumber(dim)) {\n        args[1] = dim - 1;\n      } else if (isBigNumber(dim)) {\n        args[1] = dim.minus(1);\n      }\n      try {\n        return apply.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"names":["errorTransform","factory","createApply","isBigNumber","isNumber","name","dependencies","createApplyTransform","_ref","typed","isInteger","apply","any","args","dim","minus","err","isTransformFunction"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/expression/transform/apply.transform.js"],"sourcesContent":["import { errorTransform } from './utils/errorTransform.js';\nimport { factory } from '../../utils/factory.js';\nimport { createApply } from '../../function/matrix/apply.js';\nimport { isBigNumber, isNumber } from '../../utils/is.js';\nvar name = 'apply';\nvar dependencies = ['typed', 'isInteger'];\n\n/**\n * Attach a transform function to math.apply\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function apply\n * from one-based to zero based\n */\nexport var createApplyTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isInteger\n  } = _ref;\n  var apply = createApply({\n    typed,\n    isInteger\n  });\n\n  // @see: comment of concat itself\n  return typed('apply', {\n    '...any': function any(args) {\n      // change dim from one-based to zero-based\n      var dim = args[1];\n      if (isNumber(dim)) {\n        args[1] = dim - 1;\n      } else if (isBigNumber(dim)) {\n        args[1] = dim.minus(1);\n      }\n      try {\n        return apply.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});"],"mappings":"AAAA,SAASA,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,WAAW,QAAQ,gCAAgC;AAC5D,SAASC,WAAW,EAAEC,QAAQ,QAAQ,mBAAmB;AACzD,IAAIC,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,oBAAoB,GAAG,eAAeN,OAAO,CAACI,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACnF,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR,IAAIG,KAAK,GAAGT,WAAW,CAAC;IACtBO,KAAK;IACLC;EACF,CAAC,CAAC;;EAEF;EACA,OAAOD,KAAK,CAAC,OAAO,EAAE;IACpB,QAAQ,EAAE,SAASG,GAAGA,CAACC,IAAI,EAAE;MAC3B;MACA,IAAIC,GAAG,GAAGD,IAAI,CAAC,CAAC,CAAC;MACjB,IAAIT,QAAQ,CAACU,GAAG,CAAC,EAAE;QACjBD,IAAI,CAAC,CAAC,CAAC,GAAGC,GAAG,GAAG,CAAC;MACnB,CAAC,MAAM,IAAIX,WAAW,CAACW,GAAG,CAAC,EAAE;QAC3BD,IAAI,CAAC,CAAC,CAAC,GAAGC,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC;MACxB;MACA,IAAI;QACF,OAAOJ,KAAK,CAACA,KAAK,CAAC,IAAI,EAAEE,IAAI,CAAC;MAChC,CAAC,CAAC,OAAOG,GAAG,EAAE;QACZ,MAAMhB,cAAc,CAACgB,GAAG,CAAC;MAC3B;IACF;EACF,CAAC,CAAC;AACJ,CAAC,EAAE;EACDC,mBAAmB,EAAE;AACvB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}