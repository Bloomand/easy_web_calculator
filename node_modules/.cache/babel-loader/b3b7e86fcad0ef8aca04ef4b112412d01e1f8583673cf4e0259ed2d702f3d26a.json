{"ast":null,"code":"import { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'rationalize';\nvar dependencies = ['config', 'typed', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'parse', 'simplifyConstant', 'simplifyCore', 'simplify', '?bignumber', '?fraction', 'mathWithTransform', 'matrix', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'SymbolNode', 'ParenthesisNode'];\nexport var createRationalize = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    equal,\n    isZero,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    parse,\n    simplifyConstant,\n    simplifyCore,\n    simplify,\n    fraction,\n    bignumber,\n    mathWithTransform,\n    matrix,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    SymbolNode,\n    ParenthesisNode\n  } = _ref;\n  /**\n   * Transform a rationalizable expression in a rational fraction.\n   * If rational fraction is one variable polynomial then converts\n   * the numerator and denominator in canonical form, with decreasing\n   * exponents, returning the coefficients of numerator.\n   *\n   * Syntax:\n   *\n   *     rationalize(expr)\n   *     rationalize(expr, detailed)\n   *     rationalize(expr, scope)\n   *     rationalize(expr, scope, detailed)\n   *\n   * Examples:\n   *\n   *     math.rationalize('sin(x)+y')\n   *                   //  Error: There is an unsolved function call\n   *     math.rationalize('2x/y - y/(x+1)')\n   *                   // (2*x^2-y^2+2*x)/(x*y+y)\n   *     math.rationalize('(2x+1)^6')\n   *                   // 64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1\n   *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3')\n   *                   // -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)\n   *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =\n   *                   // (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/\n   *                   //     (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)\n   *\n   *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1\n   *     math.rationalize('x+x+x+y',{})    // 3*x+y\n   *\n   *     const ret = math.rationalize('x+x+x+y',{},true)\n   *                   // ret.expression=3*x+y, ret.variables = [\"x\",\"y\"]\n   *     const ret = math.rationalize('-2+5x^2',{},true)\n   *                   // ret.expression=5*x^2-2, ret.variables = [\"x\"], ret.coefficients=[-2,0,5]\n   *\n   * See also:\n   *\n   *     simplify\n   *\n   * @param  {Node|string} expr    The expression to check if is a polynomial expression\n   * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input\n   * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default)\n   *\n   * @return {Object | Node}    The rational polynomial of `expr` or an object\n   *            `{expression, numerator, denominator, variables, coefficients}`, where\n   *              `expression` is a `Node` with the node simplified expression,\n   *              `numerator` is a `Node` with the simplified numerator of expression,\n   *              `denominator` is a `Node` or `boolean` with the simplified denominator or `false` (if there is no denominator),\n   *              `variables` is an array with variable names,\n   *              and `coefficients` is an array with coefficients of numerator sorted by increased exponent\n   *           {Expression Node}  node simplified expression\n   *\n   */\n  function _rationalize(expr) {\n    var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var detailed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var setRules = rulesRationalize(); // Rules for change polynomial in near canonical form\n    var polyRet = polynomial(expr, scope, true, setRules.firstRules); // Check if expression is a rationalizable polynomial\n    var nVars = polyRet.variables.length;\n    var noExactFractions = {\n      exactFractions: false\n    };\n    var withExactFractions = {\n      exactFractions: true\n    };\n    expr = polyRet.expression;\n    if (nVars >= 1) {\n      // If expression in not a constant\n      expr = expandPower(expr); // First expand power of polynomials (cannot be made from rules!)\n      var sBefore; // Previous expression\n      var rules;\n      var eDistrDiv = true;\n      var redoInic = false;\n      // Apply the initial rules, including succ div rules:\n      expr = simplify(expr, setRules.firstRules, {}, noExactFractions);\n      var s;\n      while (true) {\n        // Alternate applying successive division rules and distr.div.rules\n        // until there are no more changes:\n        rules = eDistrDiv ? setRules.distrDivRules : setRules.sucDivRules;\n        expr = simplify(expr, rules, {}, withExactFractions);\n        eDistrDiv = !eDistrDiv; // Swap between Distr.Div and Succ. Div. Rules\n\n        s = expr.toString();\n        if (s === sBefore) {\n          break; // No changes : end of the loop\n        }\n\n        redoInic = true;\n        sBefore = s;\n      }\n      if (redoInic) {\n        // Apply first rules again without succ div rules (if there are changes)\n        expr = simplify(expr, setRules.firstRulesAgain, {}, noExactFractions);\n      }\n      // Apply final rules:\n      expr = simplify(expr, setRules.finalRules, {}, noExactFractions);\n    } // NVars >= 1\n\n    var coefficients = [];\n    var retRationalize = {};\n    if (expr.type === 'OperatorNode' && expr.isBinary() && expr.op === '/') {\n      // Separate numerator from denominator\n      if (nVars === 1) {\n        expr.args[0] = polyToCanonical(expr.args[0], coefficients);\n        expr.args[1] = polyToCanonical(expr.args[1]);\n      }\n      if (detailed) {\n        retRationalize.numerator = expr.args[0];\n        retRationalize.denominator = expr.args[1];\n      }\n    } else {\n      if (nVars === 1) {\n        expr = polyToCanonical(expr, coefficients);\n      }\n      if (detailed) {\n        retRationalize.numerator = expr;\n        retRationalize.denominator = null;\n      }\n    }\n    // nVars\n\n    if (!detailed) return expr;\n    retRationalize.coefficients = coefficients;\n    retRationalize.variables = polyRet.variables;\n    retRationalize.expression = expr;\n    return retRationalize;\n  }\n  return typed(name, {\n    Node: _rationalize,\n    'Node, boolean': (expr, detailed) => _rationalize(expr, {}, detailed),\n    'Node, Object': _rationalize,\n    'Node, Object, boolean': _rationalize\n  }); // end of typed rationalize\n\n  /**\n   *  Function to simplify an expression using an optional scope and\n   *  return it if the expression is a polynomial expression, i.e.\n   *  an expression with one or more variables and the operators\n   *  +, -, *, and ^, where the exponent can only be a positive integer.\n   *\n   * Syntax:\n   *\n   *     polynomial(expr,scope,extended, rules)\n   *\n   * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression\n   * @param  {object} scope           Optional scope for expression simplification\n   * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.\n   * @param  {array}  rules           Optional. Default is no rule.\n   *\n   *\n   * @return {Object}\n   *            {Object} node:   node simplified expression\n   *            {Array}  variables:  variable names\n   */\n  function polynomial(expr, scope, extended, rules) {\n    var variables = [];\n    var node = simplify(expr, rules, scope, {\n      exactFractions: false\n    }); // Resolves any variables and functions with all defined parameters\n    extended = !!extended;\n    var oper = '+-*' + (extended ? '/' : '');\n    recPoly(node);\n    var retFunc = {};\n    retFunc.expression = node;\n    retFunc.variables = variables;\n    return retFunc;\n\n    // -------------------------------------------------------------------------------------------------------\n\n    /**\n     *  Function to simplify an expression using an optional scope and\n     *  return it if the expression is a polynomial expression, i.e.\n     *  an expression with one or more variables and the operators\n     *  +, -, *, and ^, where the exponent can only be a positive integer.\n     *\n     * Syntax:\n     *\n     *     recPoly(node)\n     *\n     *\n     * @param  {Node} node               The current sub tree expression in recursion\n     *\n     * @return                           nothing, throw an exception if error\n     */\n    function recPoly(node) {\n      var tp = node.type; // node type\n      if (tp === 'FunctionNode') {\n        // No function call in polynomial expression\n        throw new Error('There is an unsolved function call');\n      } else if (tp === 'OperatorNode') {\n        if (node.op === '^') {\n          // TODO: handle negative exponents like in '1/x^(-2)'\n          if (node.args[1].type !== 'ConstantNode' || !isInteger(parseFloat(node.args[1].value))) {\n            throw new Error('There is a non-integer exponent');\n          } else {\n            recPoly(node.args[0]);\n          }\n        } else {\n          if (oper.indexOf(node.op) === -1) {\n            throw new Error('Operator ' + node.op + ' invalid in polynomial expression');\n          }\n          for (var i = 0; i < node.args.length; i++) {\n            recPoly(node.args[i]);\n          }\n        } // type of operator\n      } else if (tp === 'SymbolNode') {\n        var _name = node.name; // variable name\n        var pos = variables.indexOf(_name);\n        if (pos === -1) {\n          // new variable in expression\n          variables.push(_name);\n        }\n      } else if (tp === 'ParenthesisNode') {\n        recPoly(node.content);\n      } else if (tp !== 'ConstantNode') {\n        throw new Error('type ' + tp + ' is not allowed in polynomial expression');\n      }\n    } // end of recPoly\n  } // end of polynomial\n\n  // ---------------------------------------------------------------------------------------\n  /**\n   * Return a rule set to rationalize an polynomial expression in rationalize\n   *\n   * Syntax:\n   *\n   *     rulesRationalize()\n   *\n   * @return {array}        rule set to rationalize an polynomial expression\n   */\n  function rulesRationalize() {\n    var oldRules = [simplifyCore,\n    // sCore\n    {\n      l: 'n+n',\n      r: '2*n'\n    }, {\n      l: 'n+-n',\n      r: '0'\n    }, simplifyConstant,\n    // sConstant\n    {\n      l: 'n*(n1^-1)',\n      r: 'n/n1'\n    }, {\n      l: 'n*n1^-n2',\n      r: 'n/n1^n2'\n    }, {\n      l: 'n1^-1',\n      r: '1/n1'\n    }, {\n      l: 'n*(n1/n2)',\n      r: '(n*n1)/n2'\n    }, {\n      l: '1*n',\n      r: 'n'\n    }];\n    var rulesFirst = [{\n      l: '(-n1)/(-n2)',\n      r: 'n1/n2'\n    },\n    // Unary division\n    {\n      l: '(-n1)*(-n2)',\n      r: 'n1*n2'\n    },\n    // Unary multiplication\n    {\n      l: 'n1--n2',\n      r: 'n1+n2'\n    },\n    // '--' elimination\n    {\n      l: 'n1-n2',\n      r: 'n1+(-n2)'\n    },\n    // Subtraction turn into add with un�ry minus\n    {\n      l: '(n1+n2)*n3',\n      r: '(n1*n3 + n2*n3)'\n    },\n    // Distributive 1\n    {\n      l: 'n1*(n2+n3)',\n      r: '(n1*n2+n1*n3)'\n    },\n    // Distributive 2\n    {\n      l: 'c1*n + c2*n',\n      r: '(c1+c2)*n'\n    },\n    // Joining constants\n    {\n      l: 'c1*n + n',\n      r: '(c1+1)*n'\n    },\n    // Joining constants\n    {\n      l: 'c1*n - c2*n',\n      r: '(c1-c2)*n'\n    },\n    // Joining constants\n    {\n      l: 'c1*n - n',\n      r: '(c1-1)*n'\n    },\n    // Joining constants\n    {\n      l: 'v/c',\n      r: '(1/c)*v'\n    },\n    // variable/constant (new!)\n    {\n      l: 'v/-c',\n      r: '-(1/c)*v'\n    },\n    // variable/constant (new!)\n    {\n      l: '-v*-c',\n      r: 'c*v'\n    },\n    // Inversion constant and variable 1\n    {\n      l: '-v*c',\n      r: '-c*v'\n    },\n    // Inversion constant and variable 2\n    {\n      l: 'v*-c',\n      r: '-c*v'\n    },\n    // Inversion constant and variable 3\n    {\n      l: 'v*c',\n      r: 'c*v'\n    },\n    // Inversion constant and variable 4\n    {\n      l: '-(-n1*n2)',\n      r: '(n1*n2)'\n    },\n    // Unary propagation\n    {\n      l: '-(n1*n2)',\n      r: '(-n1*n2)'\n    },\n    // Unary propagation\n    {\n      l: '-(-n1+n2)',\n      r: '(n1-n2)'\n    },\n    // Unary propagation\n    {\n      l: '-(n1+n2)',\n      r: '(-n1-n2)'\n    },\n    // Unary propagation\n    {\n      l: '(n1^n2)^n3',\n      r: '(n1^(n2*n3))'\n    },\n    // Power to Power\n    {\n      l: '-(-n1/n2)',\n      r: '(n1/n2)'\n    },\n    // Division and Unary\n    {\n      l: '-(n1/n2)',\n      r: '(-n1/n2)'\n    }]; // Divisao and Unary\n\n    var rulesDistrDiv = [{\n      l: '(n1/n2 + n3/n4)',\n      r: '((n1*n4 + n3*n2)/(n2*n4))'\n    },\n    // Sum of fractions\n    {\n      l: '(n1/n2 + n3)',\n      r: '((n1 + n3*n2)/n2)'\n    },\n    // Sum fraction with number 1\n    {\n      l: '(n1 + n2/n3)',\n      r: '((n1*n3 + n2)/n3)'\n    }]; // Sum fraction with number 1\n\n    var rulesSucDiv = [{\n      l: '(n1/(n2/n3))',\n      r: '((n1*n3)/n2)'\n    },\n    // Division simplification\n    {\n      l: '(n1/n2/n3)',\n      r: '(n1/(n2*n3))'\n    }];\n    var setRules = {}; // rules set in 4 steps.\n\n    // All rules => infinite loop\n    // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv)\n\n    setRules.firstRules = oldRules.concat(rulesFirst, rulesSucDiv); // First rule set\n    setRules.distrDivRules = rulesDistrDiv; // Just distr. div. rules\n    setRules.sucDivRules = rulesSucDiv; // Jus succ. div. rules\n    setRules.firstRulesAgain = oldRules.concat(rulesFirst); // Last rules set without succ. div.\n\n    // Division simplification\n\n    // Second rule set.\n    // There is no aggregate expression with parentesis, but the only variable can be scattered.\n    setRules.finalRules = [simplifyCore,\n    // simplify.rules[0]\n    {\n      l: 'n*-n',\n      r: '-n^2'\n    },\n    // Joining multiply with power 1\n    {\n      l: 'n*n',\n      r: 'n^2'\n    },\n    // Joining multiply with power 2\n    simplifyConstant,\n    // simplify.rules[14] old 3rd index in oldRules\n    {\n      l: 'n*-n^n1',\n      r: '-n^(n1+1)'\n    },\n    // Joining multiply with power 3\n    {\n      l: 'n*n^n1',\n      r: 'n^(n1+1)'\n    },\n    // Joining multiply with power 4\n    {\n      l: 'n^n1*-n^n2',\n      r: '-n^(n1+n2)'\n    },\n    // Joining multiply with power 5\n    {\n      l: 'n^n1*n^n2',\n      r: 'n^(n1+n2)'\n    },\n    // Joining multiply with power 6\n    {\n      l: 'n^n1*-n',\n      r: '-n^(n1+1)'\n    },\n    // Joining multiply with power 7\n    {\n      l: 'n^n1*n',\n      r: 'n^(n1+1)'\n    },\n    // Joining multiply with power 8\n    {\n      l: 'n^n1/-n',\n      r: '-n^(n1-1)'\n    },\n    // Joining multiply with power 8\n    {\n      l: 'n^n1/n',\n      r: 'n^(n1-1)'\n    },\n    // Joining division with power 1\n    {\n      l: 'n/-n^n1',\n      r: '-n^(1-n1)'\n    },\n    // Joining division with power 2\n    {\n      l: 'n/n^n1',\n      r: 'n^(1-n1)'\n    },\n    // Joining division with power 3\n    {\n      l: 'n^n1/-n^n2',\n      r: 'n^(n1-n2)'\n    },\n    // Joining division with power 4\n    {\n      l: 'n^n1/n^n2',\n      r: 'n^(n1-n2)'\n    },\n    // Joining division with power 5\n    {\n      l: 'n1+(-n2*n3)',\n      r: 'n1-n2*n3'\n    },\n    // Solving useless parenthesis 1\n    {\n      l: 'v*(-c)',\n      r: '-c*v'\n    },\n    // Solving useless unary 2\n    {\n      l: 'n1+-n2',\n      r: 'n1-n2'\n    },\n    // Solving +- together (new!)\n    {\n      l: 'v*c',\n      r: 'c*v'\n    },\n    // inversion constant with variable\n    {\n      l: '(n1^n2)^n3',\n      r: '(n1^(n2*n3))'\n    } // Power to Power\n    ];\n\n    return setRules;\n  } // End rulesRationalize\n\n  // ---------------------------------------------------------------------------------------\n  /**\n   *  Expand recursively a tree node for handling with expressions with exponents\n   *  (it's not for constants, symbols or functions with exponents)\n   *  PS: The other parameters are internal for recursion\n   *\n   * Syntax:\n   *\n   *     expandPower(node)\n   *\n   * @param  {Node} node         Current expression node\n   * @param  {node} parent       Parent current node inside the recursion\n   * @param  (int}               Parent number of chid inside the rercursion\n   *\n   * @return {node}        node expression with all powers expanded.\n   */\n  function expandPower(node, parent, indParent) {\n    var tp = node.type;\n    var internal = arguments.length > 1; // TRUE in internal calls\n\n    if (tp === 'OperatorNode' && node.isBinary()) {\n      var does = false;\n      var val;\n      if (node.op === '^') {\n        // First operator: Parenthesis or UnaryMinus\n        if ((node.args[0].type === 'ParenthesisNode' || node.args[0].type === 'OperatorNode') && node.args[1].type === 'ConstantNode') {\n          // Second operator: Constant\n          val = parseFloat(node.args[1].value);\n          does = val >= 2 && isInteger(val);\n        }\n      }\n      if (does) {\n        // Exponent >= 2\n        // Before:\n        //            operator A --> Subtree\n        // parent pow\n        //            constant\n        //\n        if (val > 2) {\n          // Exponent > 2,\n          // AFTER:  (exponent > 2)\n          //             operator A --> Subtree\n          // parent  *\n          //                 deep clone (operator A --> Subtree\n          //             pow\n          //                 constant - 1\n          //\n          var nEsqTopo = node.args[0];\n          var nDirTopo = new OperatorNode('^', 'pow', [node.args[0].cloneDeep(), new ConstantNode(val - 1)]);\n          node = new OperatorNode('*', 'multiply', [nEsqTopo, nDirTopo]);\n        } else {\n          // Expo = 2 - no power\n          // AFTER:  (exponent =  2)\n          //             operator A --> Subtree\n          // parent   oper\n          //            deep clone (operator A --> Subtree)\n          //\n          node = new OperatorNode('*', 'multiply', [node.args[0], node.args[0].cloneDeep()]);\n        }\n        if (internal) {\n          // Change parent references in internal recursive calls\n          if (indParent === 'content') {\n            parent.content = node;\n          } else {\n            parent.args[indParent] = node;\n          }\n        }\n      } // does\n    } // binary OperatorNode\n\n    if (tp === 'ParenthesisNode') {\n      // Recursion\n      expandPower(node.content, node, 'content');\n    } else if (tp !== 'ConstantNode' && tp !== 'SymbolNode') {\n      for (var i = 0; i < node.args.length; i++) {\n        expandPower(node.args[i], node, i);\n      }\n    }\n    if (!internal) {\n      // return the root node\n      return node;\n    }\n  } // End expandPower\n\n  // ---------------------------------------------------------------------------------------\n  /**\n   * Auxilary function for rationalize\n   * Convert near canonical polynomial in one variable in a canonical polynomial\n   * with one term for each exponent in decreasing order\n   *\n   * Syntax:\n   *\n   *     polyToCanonical(node [, coefficients])\n   *\n   * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression\n   *\n   *        The string or tree expression needs to be at below syntax, with free spaces:\n   *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+\n   *       Where 'var' is one variable with any valid name\n   *             'cte' are real numeric constants with any value. It can be omitted if equal than 1\n   *             'expo' are integers greater than 0. It can be omitted if equal than 1.\n   *\n   * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent\n   *\n   *\n   * @return {node}        new node tree with one variable polynomial or string error.\n   */\n  function polyToCanonical(node, coefficients) {\n    if (coefficients === undefined) {\n      coefficients = [];\n    } // coefficients.\n\n    coefficients[0] = 0; // index is the exponent\n    var o = {};\n    o.cte = 1;\n    o.oper = '+';\n\n    // fire: mark with * or ^ when finds * or ^ down tree, reset to \"\" with + and -.\n    //       It is used to deduce the exponent: 1 for *, 0 for \"\".\n    o.fire = '';\n    var maxExpo = 0; // maximum exponent\n    var varname = ''; // variable name\n\n    recurPol(node, null, o);\n    maxExpo = coefficients.length - 1;\n    var first = true;\n    var no;\n    for (var i = maxExpo; i >= 0; i--) {\n      if (coefficients[i] === 0) continue;\n      var n1 = new ConstantNode(first ? coefficients[i] : Math.abs(coefficients[i]));\n      var op = coefficients[i] < 0 ? '-' : '+';\n      if (i > 0) {\n        // Is not a constant without variable\n        var n2 = new SymbolNode(varname);\n        if (i > 1) {\n          var n3 = new ConstantNode(i);\n          n2 = new OperatorNode('^', 'pow', [n2, n3]);\n        }\n        if (coefficients[i] === -1 && first) {\n          n1 = new OperatorNode('-', 'unaryMinus', [n2]);\n        } else if (Math.abs(coefficients[i]) === 1) {\n          n1 = n2;\n        } else {\n          n1 = new OperatorNode('*', 'multiply', [n1, n2]);\n        }\n      }\n      if (first) {\n        no = n1;\n      } else if (op === '+') {\n        no = new OperatorNode('+', 'add', [no, n1]);\n      } else {\n        no = new OperatorNode('-', 'subtract', [no, n1]);\n      }\n      first = false;\n    } // for\n\n    if (first) {\n      return new ConstantNode(0);\n    } else {\n      return no;\n    }\n\n    /**\n     * Recursive auxilary function inside polyToCanonical for\n     * converting expression in canonical form\n     *\n     * Syntax:\n     *\n     *     recurPol(node, noPai, obj)\n     *\n     * @param  {Node} node        The current subpolynomial expression\n     * @param  {Node | Null}  noPai   The current parent node\n     * @param  {object}    obj        Object with many internal flags\n     *\n     * @return {}                    No return. If error, throws an exception\n     */\n    function recurPol(node, noPai, o) {\n      var tp = node.type;\n      if (tp === 'FunctionNode') {\n        // ***** FunctionName *****\n        // No function call in polynomial expression\n        throw new Error('There is an unsolved function call');\n      } else if (tp === 'OperatorNode') {\n        // ***** OperatorName *****\n        if ('+-*^'.indexOf(node.op) === -1) throw new Error('Operator ' + node.op + ' invalid');\n        if (noPai !== null) {\n          // -(unary),^  : children of *,+,-\n          if ((node.fn === 'unaryMinus' || node.fn === 'pow') && noPai.fn !== 'add' && noPai.fn !== 'subtract' && noPai.fn !== 'multiply') {\n            throw new Error('Invalid ' + node.op + ' placing');\n          }\n\n          // -,+,* : children of +,-\n          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'multiply') && noPai.fn !== 'add' && noPai.fn !== 'subtract') {\n            throw new Error('Invalid ' + node.op + ' placing');\n          }\n\n          // -,+ : first child\n          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'unaryMinus') && o.noFil !== 0) {\n            throw new Error('Invalid ' + node.op + ' placing');\n          }\n        } // Has parent\n\n        // Firers: ^,*       Old:   ^,&,-(unary): firers\n        if (node.op === '^' || node.op === '*') {\n          o.fire = node.op;\n        }\n        for (var _i = 0; _i < node.args.length; _i++) {\n          // +,-: reset fire\n          if (node.fn === 'unaryMinus') o.oper = '-';\n          if (node.op === '+' || node.fn === 'subtract') {\n            o.fire = '';\n            o.cte = 1; // default if there is no constant\n            o.oper = _i === 0 ? '+' : node.op;\n          }\n          o.noFil = _i; // number of son\n          recurPol(node.args[_i], node, o);\n        } // for in children\n      } else if (tp === 'SymbolNode') {\n        // ***** SymbolName *****\n        if (node.name !== varname && varname !== '') {\n          throw new Error('There is more than one variable');\n        }\n        varname = node.name;\n        if (noPai === null) {\n          coefficients[1] = 1;\n          return;\n        }\n\n        // ^: Symbol is First child\n        if (noPai.op === '^' && o.noFil !== 0) {\n          throw new Error('In power the variable should be the first parameter');\n        }\n\n        // *: Symbol is Second child\n        if (noPai.op === '*' && o.noFil !== 1) {\n          throw new Error('In multiply the variable should be the second parameter');\n        }\n\n        // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var)\n        if (o.fire === '' || o.fire === '*') {\n          if (maxExpo < 1) coefficients[1] = 0;\n          coefficients[1] += o.cte * (o.oper === '+' ? 1 : -1);\n          maxExpo = Math.max(1, maxExpo);\n        }\n      } else if (tp === 'ConstantNode') {\n        var valor = parseFloat(node.value);\n        if (noPai === null) {\n          coefficients[0] = valor;\n          return;\n        }\n        if (noPai.op === '^') {\n          // cte: second  child of power\n          if (o.noFil !== 1) throw new Error('Constant cannot be powered');\n          if (!isInteger(valor) || valor <= 0) {\n            throw new Error('Non-integer exponent is not allowed');\n          }\n          for (var _i2 = maxExpo + 1; _i2 < valor; _i2++) coefficients[_i2] = 0;\n          if (valor > maxExpo) coefficients[valor] = 0;\n          coefficients[valor] += o.cte * (o.oper === '+' ? 1 : -1);\n          maxExpo = Math.max(valor, maxExpo);\n          return;\n        }\n        o.cte = valor;\n\n        // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0.\n        if (o.fire === '') {\n          coefficients[0] += o.cte * (o.oper === '+' ? 1 : -1);\n        }\n      } else {\n        throw new Error('Type ' + tp + ' is not allowed');\n      }\n    } // End of recurPol\n  } // End of polyToCanonical\n});","map":{"version":3,"names":["isInteger","factory","name","dependencies","createRationalize","_ref","config","typed","equal","isZero","add","subtract","multiply","divide","pow","parse","simplifyConstant","simplifyCore","simplify","fraction","bignumber","mathWithTransform","matrix","AccessorNode","ArrayNode","ConstantNode","FunctionNode","IndexNode","ObjectNode","OperatorNode","SymbolNode","ParenthesisNode","_rationalize","expr","scope","arguments","length","undefined","detailed","setRules","rulesRationalize","polyRet","polynomial","firstRules","nVars","variables","noExactFractions","exactFractions","withExactFractions","expression","expandPower","sBefore","rules","eDistrDiv","redoInic","s","distrDivRules","sucDivRules","toString","firstRulesAgain","finalRules","coefficients","retRationalize","type","isBinary","op","args","polyToCanonical","numerator","denominator","Node","Node, boolean","extended","node","oper","recPoly","retFunc","tp","Error","parseFloat","value","indexOf","i","_name","pos","push","content","oldRules","l","r","rulesFirst","rulesDistrDiv","rulesSucDiv","concat","parent","indParent","internal","does","val","nEsqTopo","nDirTopo","cloneDeep","o","cte","fire","maxExpo","varname","recurPol","first","no","n1","Math","abs","n2","n3","noPai","fn","noFil","_i","max","valor","_i2"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/algebra/rationalize.js"],"sourcesContent":["import { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'rationalize';\nvar dependencies = ['config', 'typed', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'parse', 'simplifyConstant', 'simplifyCore', 'simplify', '?bignumber', '?fraction', 'mathWithTransform', 'matrix', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'SymbolNode', 'ParenthesisNode'];\nexport var createRationalize = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    equal,\n    isZero,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    parse,\n    simplifyConstant,\n    simplifyCore,\n    simplify,\n    fraction,\n    bignumber,\n    mathWithTransform,\n    matrix,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    SymbolNode,\n    ParenthesisNode\n  } = _ref;\n  /**\n   * Transform a rationalizable expression in a rational fraction.\n   * If rational fraction is one variable polynomial then converts\n   * the numerator and denominator in canonical form, with decreasing\n   * exponents, returning the coefficients of numerator.\n   *\n   * Syntax:\n   *\n   *     rationalize(expr)\n   *     rationalize(expr, detailed)\n   *     rationalize(expr, scope)\n   *     rationalize(expr, scope, detailed)\n   *\n   * Examples:\n   *\n   *     math.rationalize('sin(x)+y')\n   *                   //  Error: There is an unsolved function call\n   *     math.rationalize('2x/y - y/(x+1)')\n   *                   // (2*x^2-y^2+2*x)/(x*y+y)\n   *     math.rationalize('(2x+1)^6')\n   *                   // 64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1\n   *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3')\n   *                   // -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)\n   *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =\n   *                   // (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/\n   *                   //     (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)\n   *\n   *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1\n   *     math.rationalize('x+x+x+y',{})    // 3*x+y\n   *\n   *     const ret = math.rationalize('x+x+x+y',{},true)\n   *                   // ret.expression=3*x+y, ret.variables = [\"x\",\"y\"]\n   *     const ret = math.rationalize('-2+5x^2',{},true)\n   *                   // ret.expression=5*x^2-2, ret.variables = [\"x\"], ret.coefficients=[-2,0,5]\n   *\n   * See also:\n   *\n   *     simplify\n   *\n   * @param  {Node|string} expr    The expression to check if is a polynomial expression\n   * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input\n   * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default)\n   *\n   * @return {Object | Node}    The rational polynomial of `expr` or an object\n   *            `{expression, numerator, denominator, variables, coefficients}`, where\n   *              `expression` is a `Node` with the node simplified expression,\n   *              `numerator` is a `Node` with the simplified numerator of expression,\n   *              `denominator` is a `Node` or `boolean` with the simplified denominator or `false` (if there is no denominator),\n   *              `variables` is an array with variable names,\n   *              and `coefficients` is an array with coefficients of numerator sorted by increased exponent\n   *           {Expression Node}  node simplified expression\n   *\n   */\n  function _rationalize(expr) {\n    var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var detailed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var setRules = rulesRationalize(); // Rules for change polynomial in near canonical form\n    var polyRet = polynomial(expr, scope, true, setRules.firstRules); // Check if expression is a rationalizable polynomial\n    var nVars = polyRet.variables.length;\n    var noExactFractions = {\n      exactFractions: false\n    };\n    var withExactFractions = {\n      exactFractions: true\n    };\n    expr = polyRet.expression;\n    if (nVars >= 1) {\n      // If expression in not a constant\n      expr = expandPower(expr); // First expand power of polynomials (cannot be made from rules!)\n      var sBefore; // Previous expression\n      var rules;\n      var eDistrDiv = true;\n      var redoInic = false;\n      // Apply the initial rules, including succ div rules:\n      expr = simplify(expr, setRules.firstRules, {}, noExactFractions);\n      var s;\n      while (true) {\n        // Alternate applying successive division rules and distr.div.rules\n        // until there are no more changes:\n        rules = eDistrDiv ? setRules.distrDivRules : setRules.sucDivRules;\n        expr = simplify(expr, rules, {}, withExactFractions);\n        eDistrDiv = !eDistrDiv; // Swap between Distr.Div and Succ. Div. Rules\n\n        s = expr.toString();\n        if (s === sBefore) {\n          break; // No changes : end of the loop\n        }\n\n        redoInic = true;\n        sBefore = s;\n      }\n      if (redoInic) {\n        // Apply first rules again without succ div rules (if there are changes)\n        expr = simplify(expr, setRules.firstRulesAgain, {}, noExactFractions);\n      }\n      // Apply final rules:\n      expr = simplify(expr, setRules.finalRules, {}, noExactFractions);\n    } // NVars >= 1\n\n    var coefficients = [];\n    var retRationalize = {};\n    if (expr.type === 'OperatorNode' && expr.isBinary() && expr.op === '/') {\n      // Separate numerator from denominator\n      if (nVars === 1) {\n        expr.args[0] = polyToCanonical(expr.args[0], coefficients);\n        expr.args[1] = polyToCanonical(expr.args[1]);\n      }\n      if (detailed) {\n        retRationalize.numerator = expr.args[0];\n        retRationalize.denominator = expr.args[1];\n      }\n    } else {\n      if (nVars === 1) {\n        expr = polyToCanonical(expr, coefficients);\n      }\n      if (detailed) {\n        retRationalize.numerator = expr;\n        retRationalize.denominator = null;\n      }\n    }\n    // nVars\n\n    if (!detailed) return expr;\n    retRationalize.coefficients = coefficients;\n    retRationalize.variables = polyRet.variables;\n    retRationalize.expression = expr;\n    return retRationalize;\n  }\n  return typed(name, {\n    Node: _rationalize,\n    'Node, boolean': (expr, detailed) => _rationalize(expr, {}, detailed),\n    'Node, Object': _rationalize,\n    'Node, Object, boolean': _rationalize\n  }); // end of typed rationalize\n\n  /**\n   *  Function to simplify an expression using an optional scope and\n   *  return it if the expression is a polynomial expression, i.e.\n   *  an expression with one or more variables and the operators\n   *  +, -, *, and ^, where the exponent can only be a positive integer.\n   *\n   * Syntax:\n   *\n   *     polynomial(expr,scope,extended, rules)\n   *\n   * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression\n   * @param  {object} scope           Optional scope for expression simplification\n   * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.\n   * @param  {array}  rules           Optional. Default is no rule.\n   *\n   *\n   * @return {Object}\n   *            {Object} node:   node simplified expression\n   *            {Array}  variables:  variable names\n   */\n  function polynomial(expr, scope, extended, rules) {\n    var variables = [];\n    var node = simplify(expr, rules, scope, {\n      exactFractions: false\n    }); // Resolves any variables and functions with all defined parameters\n    extended = !!extended;\n    var oper = '+-*' + (extended ? '/' : '');\n    recPoly(node);\n    var retFunc = {};\n    retFunc.expression = node;\n    retFunc.variables = variables;\n    return retFunc;\n\n    // -------------------------------------------------------------------------------------------------------\n\n    /**\n     *  Function to simplify an expression using an optional scope and\n     *  return it if the expression is a polynomial expression, i.e.\n     *  an expression with one or more variables and the operators\n     *  +, -, *, and ^, where the exponent can only be a positive integer.\n     *\n     * Syntax:\n     *\n     *     recPoly(node)\n     *\n     *\n     * @param  {Node} node               The current sub tree expression in recursion\n     *\n     * @return                           nothing, throw an exception if error\n     */\n    function recPoly(node) {\n      var tp = node.type; // node type\n      if (tp === 'FunctionNode') {\n        // No function call in polynomial expression\n        throw new Error('There is an unsolved function call');\n      } else if (tp === 'OperatorNode') {\n        if (node.op === '^') {\n          // TODO: handle negative exponents like in '1/x^(-2)'\n          if (node.args[1].type !== 'ConstantNode' || !isInteger(parseFloat(node.args[1].value))) {\n            throw new Error('There is a non-integer exponent');\n          } else {\n            recPoly(node.args[0]);\n          }\n        } else {\n          if (oper.indexOf(node.op) === -1) {\n            throw new Error('Operator ' + node.op + ' invalid in polynomial expression');\n          }\n          for (var i = 0; i < node.args.length; i++) {\n            recPoly(node.args[i]);\n          }\n        } // type of operator\n      } else if (tp === 'SymbolNode') {\n        var _name = node.name; // variable name\n        var pos = variables.indexOf(_name);\n        if (pos === -1) {\n          // new variable in expression\n          variables.push(_name);\n        }\n      } else if (tp === 'ParenthesisNode') {\n        recPoly(node.content);\n      } else if (tp !== 'ConstantNode') {\n        throw new Error('type ' + tp + ' is not allowed in polynomial expression');\n      }\n    } // end of recPoly\n  } // end of polynomial\n\n  // ---------------------------------------------------------------------------------------\n  /**\n   * Return a rule set to rationalize an polynomial expression in rationalize\n   *\n   * Syntax:\n   *\n   *     rulesRationalize()\n   *\n   * @return {array}        rule set to rationalize an polynomial expression\n   */\n  function rulesRationalize() {\n    var oldRules = [simplifyCore,\n    // sCore\n    {\n      l: 'n+n',\n      r: '2*n'\n    }, {\n      l: 'n+-n',\n      r: '0'\n    }, simplifyConstant,\n    // sConstant\n    {\n      l: 'n*(n1^-1)',\n      r: 'n/n1'\n    }, {\n      l: 'n*n1^-n2',\n      r: 'n/n1^n2'\n    }, {\n      l: 'n1^-1',\n      r: '1/n1'\n    }, {\n      l: 'n*(n1/n2)',\n      r: '(n*n1)/n2'\n    }, {\n      l: '1*n',\n      r: 'n'\n    }];\n    var rulesFirst = [{\n      l: '(-n1)/(-n2)',\n      r: 'n1/n2'\n    },\n    // Unary division\n    {\n      l: '(-n1)*(-n2)',\n      r: 'n1*n2'\n    },\n    // Unary multiplication\n    {\n      l: 'n1--n2',\n      r: 'n1+n2'\n    },\n    // '--' elimination\n    {\n      l: 'n1-n2',\n      r: 'n1+(-n2)'\n    },\n    // Subtraction turn into add with un�ry minus\n    {\n      l: '(n1+n2)*n3',\n      r: '(n1*n3 + n2*n3)'\n    },\n    // Distributive 1\n    {\n      l: 'n1*(n2+n3)',\n      r: '(n1*n2+n1*n3)'\n    },\n    // Distributive 2\n    {\n      l: 'c1*n + c2*n',\n      r: '(c1+c2)*n'\n    },\n    // Joining constants\n    {\n      l: 'c1*n + n',\n      r: '(c1+1)*n'\n    },\n    // Joining constants\n    {\n      l: 'c1*n - c2*n',\n      r: '(c1-c2)*n'\n    },\n    // Joining constants\n    {\n      l: 'c1*n - n',\n      r: '(c1-1)*n'\n    },\n    // Joining constants\n    {\n      l: 'v/c',\n      r: '(1/c)*v'\n    },\n    // variable/constant (new!)\n    {\n      l: 'v/-c',\n      r: '-(1/c)*v'\n    },\n    // variable/constant (new!)\n    {\n      l: '-v*-c',\n      r: 'c*v'\n    },\n    // Inversion constant and variable 1\n    {\n      l: '-v*c',\n      r: '-c*v'\n    },\n    // Inversion constant and variable 2\n    {\n      l: 'v*-c',\n      r: '-c*v'\n    },\n    // Inversion constant and variable 3\n    {\n      l: 'v*c',\n      r: 'c*v'\n    },\n    // Inversion constant and variable 4\n    {\n      l: '-(-n1*n2)',\n      r: '(n1*n2)'\n    },\n    // Unary propagation\n    {\n      l: '-(n1*n2)',\n      r: '(-n1*n2)'\n    },\n    // Unary propagation\n    {\n      l: '-(-n1+n2)',\n      r: '(n1-n2)'\n    },\n    // Unary propagation\n    {\n      l: '-(n1+n2)',\n      r: '(-n1-n2)'\n    },\n    // Unary propagation\n    {\n      l: '(n1^n2)^n3',\n      r: '(n1^(n2*n3))'\n    },\n    // Power to Power\n    {\n      l: '-(-n1/n2)',\n      r: '(n1/n2)'\n    },\n    // Division and Unary\n    {\n      l: '-(n1/n2)',\n      r: '(-n1/n2)'\n    }]; // Divisao and Unary\n\n    var rulesDistrDiv = [{\n      l: '(n1/n2 + n3/n4)',\n      r: '((n1*n4 + n3*n2)/(n2*n4))'\n    },\n    // Sum of fractions\n    {\n      l: '(n1/n2 + n3)',\n      r: '((n1 + n3*n2)/n2)'\n    },\n    // Sum fraction with number 1\n    {\n      l: '(n1 + n2/n3)',\n      r: '((n1*n3 + n2)/n3)'\n    }]; // Sum fraction with number 1\n\n    var rulesSucDiv = [{\n      l: '(n1/(n2/n3))',\n      r: '((n1*n3)/n2)'\n    },\n    // Division simplification\n    {\n      l: '(n1/n2/n3)',\n      r: '(n1/(n2*n3))'\n    }];\n    var setRules = {}; // rules set in 4 steps.\n\n    // All rules => infinite loop\n    // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv)\n\n    setRules.firstRules = oldRules.concat(rulesFirst, rulesSucDiv); // First rule set\n    setRules.distrDivRules = rulesDistrDiv; // Just distr. div. rules\n    setRules.sucDivRules = rulesSucDiv; // Jus succ. div. rules\n    setRules.firstRulesAgain = oldRules.concat(rulesFirst); // Last rules set without succ. div.\n\n    // Division simplification\n\n    // Second rule set.\n    // There is no aggregate expression with parentesis, but the only variable can be scattered.\n    setRules.finalRules = [simplifyCore,\n    // simplify.rules[0]\n    {\n      l: 'n*-n',\n      r: '-n^2'\n    },\n    // Joining multiply with power 1\n    {\n      l: 'n*n',\n      r: 'n^2'\n    },\n    // Joining multiply with power 2\n    simplifyConstant,\n    // simplify.rules[14] old 3rd index in oldRules\n    {\n      l: 'n*-n^n1',\n      r: '-n^(n1+1)'\n    },\n    // Joining multiply with power 3\n    {\n      l: 'n*n^n1',\n      r: 'n^(n1+1)'\n    },\n    // Joining multiply with power 4\n    {\n      l: 'n^n1*-n^n2',\n      r: '-n^(n1+n2)'\n    },\n    // Joining multiply with power 5\n    {\n      l: 'n^n1*n^n2',\n      r: 'n^(n1+n2)'\n    },\n    // Joining multiply with power 6\n    {\n      l: 'n^n1*-n',\n      r: '-n^(n1+1)'\n    },\n    // Joining multiply with power 7\n    {\n      l: 'n^n1*n',\n      r: 'n^(n1+1)'\n    },\n    // Joining multiply with power 8\n    {\n      l: 'n^n1/-n',\n      r: '-n^(n1-1)'\n    },\n    // Joining multiply with power 8\n    {\n      l: 'n^n1/n',\n      r: 'n^(n1-1)'\n    },\n    // Joining division with power 1\n    {\n      l: 'n/-n^n1',\n      r: '-n^(1-n1)'\n    },\n    // Joining division with power 2\n    {\n      l: 'n/n^n1',\n      r: 'n^(1-n1)'\n    },\n    // Joining division with power 3\n    {\n      l: 'n^n1/-n^n2',\n      r: 'n^(n1-n2)'\n    },\n    // Joining division with power 4\n    {\n      l: 'n^n1/n^n2',\n      r: 'n^(n1-n2)'\n    },\n    // Joining division with power 5\n    {\n      l: 'n1+(-n2*n3)',\n      r: 'n1-n2*n3'\n    },\n    // Solving useless parenthesis 1\n    {\n      l: 'v*(-c)',\n      r: '-c*v'\n    },\n    // Solving useless unary 2\n    {\n      l: 'n1+-n2',\n      r: 'n1-n2'\n    },\n    // Solving +- together (new!)\n    {\n      l: 'v*c',\n      r: 'c*v'\n    },\n    // inversion constant with variable\n    {\n      l: '(n1^n2)^n3',\n      r: '(n1^(n2*n3))'\n    } // Power to Power\n    ];\n\n    return setRules;\n  } // End rulesRationalize\n\n  // ---------------------------------------------------------------------------------------\n  /**\n   *  Expand recursively a tree node for handling with expressions with exponents\n   *  (it's not for constants, symbols or functions with exponents)\n   *  PS: The other parameters are internal for recursion\n   *\n   * Syntax:\n   *\n   *     expandPower(node)\n   *\n   * @param  {Node} node         Current expression node\n   * @param  {node} parent       Parent current node inside the recursion\n   * @param  (int}               Parent number of chid inside the rercursion\n   *\n   * @return {node}        node expression with all powers expanded.\n   */\n  function expandPower(node, parent, indParent) {\n    var tp = node.type;\n    var internal = arguments.length > 1; // TRUE in internal calls\n\n    if (tp === 'OperatorNode' && node.isBinary()) {\n      var does = false;\n      var val;\n      if (node.op === '^') {\n        // First operator: Parenthesis or UnaryMinus\n        if ((node.args[0].type === 'ParenthesisNode' || node.args[0].type === 'OperatorNode') && node.args[1].type === 'ConstantNode') {\n          // Second operator: Constant\n          val = parseFloat(node.args[1].value);\n          does = val >= 2 && isInteger(val);\n        }\n      }\n      if (does) {\n        // Exponent >= 2\n        // Before:\n        //            operator A --> Subtree\n        // parent pow\n        //            constant\n        //\n        if (val > 2) {\n          // Exponent > 2,\n          // AFTER:  (exponent > 2)\n          //             operator A --> Subtree\n          // parent  *\n          //                 deep clone (operator A --> Subtree\n          //             pow\n          //                 constant - 1\n          //\n          var nEsqTopo = node.args[0];\n          var nDirTopo = new OperatorNode('^', 'pow', [node.args[0].cloneDeep(), new ConstantNode(val - 1)]);\n          node = new OperatorNode('*', 'multiply', [nEsqTopo, nDirTopo]);\n        } else {\n          // Expo = 2 - no power\n          // AFTER:  (exponent =  2)\n          //             operator A --> Subtree\n          // parent   oper\n          //            deep clone (operator A --> Subtree)\n          //\n          node = new OperatorNode('*', 'multiply', [node.args[0], node.args[0].cloneDeep()]);\n        }\n        if (internal) {\n          // Change parent references in internal recursive calls\n          if (indParent === 'content') {\n            parent.content = node;\n          } else {\n            parent.args[indParent] = node;\n          }\n        }\n      } // does\n    } // binary OperatorNode\n\n    if (tp === 'ParenthesisNode') {\n      // Recursion\n      expandPower(node.content, node, 'content');\n    } else if (tp !== 'ConstantNode' && tp !== 'SymbolNode') {\n      for (var i = 0; i < node.args.length; i++) {\n        expandPower(node.args[i], node, i);\n      }\n    }\n    if (!internal) {\n      // return the root node\n      return node;\n    }\n  } // End expandPower\n\n  // ---------------------------------------------------------------------------------------\n  /**\n   * Auxilary function for rationalize\n   * Convert near canonical polynomial in one variable in a canonical polynomial\n   * with one term for each exponent in decreasing order\n   *\n   * Syntax:\n   *\n   *     polyToCanonical(node [, coefficients])\n   *\n   * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression\n   *\n   *        The string or tree expression needs to be at below syntax, with free spaces:\n   *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+\n   *       Where 'var' is one variable with any valid name\n   *             'cte' are real numeric constants with any value. It can be omitted if equal than 1\n   *             'expo' are integers greater than 0. It can be omitted if equal than 1.\n   *\n   * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent\n   *\n   *\n   * @return {node}        new node tree with one variable polynomial or string error.\n   */\n  function polyToCanonical(node, coefficients) {\n    if (coefficients === undefined) {\n      coefficients = [];\n    } // coefficients.\n\n    coefficients[0] = 0; // index is the exponent\n    var o = {};\n    o.cte = 1;\n    o.oper = '+';\n\n    // fire: mark with * or ^ when finds * or ^ down tree, reset to \"\" with + and -.\n    //       It is used to deduce the exponent: 1 for *, 0 for \"\".\n    o.fire = '';\n    var maxExpo = 0; // maximum exponent\n    var varname = ''; // variable name\n\n    recurPol(node, null, o);\n    maxExpo = coefficients.length - 1;\n    var first = true;\n    var no;\n    for (var i = maxExpo; i >= 0; i--) {\n      if (coefficients[i] === 0) continue;\n      var n1 = new ConstantNode(first ? coefficients[i] : Math.abs(coefficients[i]));\n      var op = coefficients[i] < 0 ? '-' : '+';\n      if (i > 0) {\n        // Is not a constant without variable\n        var n2 = new SymbolNode(varname);\n        if (i > 1) {\n          var n3 = new ConstantNode(i);\n          n2 = new OperatorNode('^', 'pow', [n2, n3]);\n        }\n        if (coefficients[i] === -1 && first) {\n          n1 = new OperatorNode('-', 'unaryMinus', [n2]);\n        } else if (Math.abs(coefficients[i]) === 1) {\n          n1 = n2;\n        } else {\n          n1 = new OperatorNode('*', 'multiply', [n1, n2]);\n        }\n      }\n      if (first) {\n        no = n1;\n      } else if (op === '+') {\n        no = new OperatorNode('+', 'add', [no, n1]);\n      } else {\n        no = new OperatorNode('-', 'subtract', [no, n1]);\n      }\n      first = false;\n    } // for\n\n    if (first) {\n      return new ConstantNode(0);\n    } else {\n      return no;\n    }\n\n    /**\n     * Recursive auxilary function inside polyToCanonical for\n     * converting expression in canonical form\n     *\n     * Syntax:\n     *\n     *     recurPol(node, noPai, obj)\n     *\n     * @param  {Node} node        The current subpolynomial expression\n     * @param  {Node | Null}  noPai   The current parent node\n     * @param  {object}    obj        Object with many internal flags\n     *\n     * @return {}                    No return. If error, throws an exception\n     */\n    function recurPol(node, noPai, o) {\n      var tp = node.type;\n      if (tp === 'FunctionNode') {\n        // ***** FunctionName *****\n        // No function call in polynomial expression\n        throw new Error('There is an unsolved function call');\n      } else if (tp === 'OperatorNode') {\n        // ***** OperatorName *****\n        if ('+-*^'.indexOf(node.op) === -1) throw new Error('Operator ' + node.op + ' invalid');\n        if (noPai !== null) {\n          // -(unary),^  : children of *,+,-\n          if ((node.fn === 'unaryMinus' || node.fn === 'pow') && noPai.fn !== 'add' && noPai.fn !== 'subtract' && noPai.fn !== 'multiply') {\n            throw new Error('Invalid ' + node.op + ' placing');\n          }\n\n          // -,+,* : children of +,-\n          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'multiply') && noPai.fn !== 'add' && noPai.fn !== 'subtract') {\n            throw new Error('Invalid ' + node.op + ' placing');\n          }\n\n          // -,+ : first child\n          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'unaryMinus') && o.noFil !== 0) {\n            throw new Error('Invalid ' + node.op + ' placing');\n          }\n        } // Has parent\n\n        // Firers: ^,*       Old:   ^,&,-(unary): firers\n        if (node.op === '^' || node.op === '*') {\n          o.fire = node.op;\n        }\n        for (var _i = 0; _i < node.args.length; _i++) {\n          // +,-: reset fire\n          if (node.fn === 'unaryMinus') o.oper = '-';\n          if (node.op === '+' || node.fn === 'subtract') {\n            o.fire = '';\n            o.cte = 1; // default if there is no constant\n            o.oper = _i === 0 ? '+' : node.op;\n          }\n          o.noFil = _i; // number of son\n          recurPol(node.args[_i], node, o);\n        } // for in children\n      } else if (tp === 'SymbolNode') {\n        // ***** SymbolName *****\n        if (node.name !== varname && varname !== '') {\n          throw new Error('There is more than one variable');\n        }\n        varname = node.name;\n        if (noPai === null) {\n          coefficients[1] = 1;\n          return;\n        }\n\n        // ^: Symbol is First child\n        if (noPai.op === '^' && o.noFil !== 0) {\n          throw new Error('In power the variable should be the first parameter');\n        }\n\n        // *: Symbol is Second child\n        if (noPai.op === '*' && o.noFil !== 1) {\n          throw new Error('In multiply the variable should be the second parameter');\n        }\n\n        // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var)\n        if (o.fire === '' || o.fire === '*') {\n          if (maxExpo < 1) coefficients[1] = 0;\n          coefficients[1] += o.cte * (o.oper === '+' ? 1 : -1);\n          maxExpo = Math.max(1, maxExpo);\n        }\n      } else if (tp === 'ConstantNode') {\n        var valor = parseFloat(node.value);\n        if (noPai === null) {\n          coefficients[0] = valor;\n          return;\n        }\n        if (noPai.op === '^') {\n          // cte: second  child of power\n          if (o.noFil !== 1) throw new Error('Constant cannot be powered');\n          if (!isInteger(valor) || valor <= 0) {\n            throw new Error('Non-integer exponent is not allowed');\n          }\n          for (var _i2 = maxExpo + 1; _i2 < valor; _i2++) coefficients[_i2] = 0;\n          if (valor > maxExpo) coefficients[valor] = 0;\n          coefficients[valor] += o.cte * (o.oper === '+' ? 1 : -1);\n          maxExpo = Math.max(valor, maxExpo);\n          return;\n        }\n        o.cte = valor;\n\n        // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0.\n        if (o.fire === '') {\n          coefficients[0] += o.cte * (o.oper === '+' ? 1 : -1);\n        }\n      } else {\n        throw new Error('Type ' + tp + ' is not allowed');\n      }\n    } // End of recurPol\n  } // End of polyToCanonical\n});"],"mappings":"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AC,EAAE;IACL,CAAC,EAAE;MACDD,CAAC,EAAE,OAAO;MACVC,CAAC,EAAE;IACL,CAAC,EAAE;MACDD,CAAC,EAAE,WAAW;MACdC,CAAC,EAAE;IACL,CAAC,EAAE;MACDD,CAAC,EAAE,KAAK;MACRC,CAAC,EAAE;IACL,CAAC,CAAC;IACF,IAAIC,UAAU,GAAG,CAAC;MAChBF,CAAC,EAAE,aAAa;MAChBC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,aAAa;MAChBC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,QAAQ;MACXC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,OAAO;MACVC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,YAAY;MACfC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,YAAY;MACfC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,aAAa;MAChBC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,UAAU;MACbC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,aAAa;MAChBC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,UAAU;MACbC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,KAAK;MACRC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,MAAM;MACTC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,OAAO;MACVC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,MAAM;MACTC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,MAAM;MACTC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,KAAK;MACRC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,WAAW;MACdC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,UAAU;MACbC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,WAAW;MACdC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,UAAU;MACbC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,YAAY;MACfC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,WAAW;MACdC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,UAAU;MACbC,CAAC,EAAE;IACL,CAAC,CAAC,CAAC,CAAC;;IAEJ,IAAIE,aAAa,GAAG,CAAC;MACnBH,CAAC,EAAE,iBAAiB;MACpBC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,cAAc;MACjBC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,cAAc;MACjBC,CAAC,EAAE;IACL,CAAC,CAAC,CAAC,CAAC;;IAEJ,IAAIG,WAAW,GAAG,CAAC;MACjBJ,CAAC,EAAE,cAAc;MACjBC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,YAAY;MACfC,CAAC,EAAE;IACL,CAAC,CAAC;IACF,IAAIlD,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;;IAEnB;IACA;;IAEAA,QAAQ,CAACI,UAAU,GAAG4C,QAAQ,CAACM,MAAM,CAACH,UAAU,EAAEE,WAAW,CAAC,CAAC,CAAC;IAChErD,QAAQ,CAACiB,aAAa,GAAGmC,aAAa,CAAC,CAAC;IACxCpD,QAAQ,CAACkB,WAAW,GAAGmC,WAAW,CAAC,CAAC;IACpCrD,QAAQ,CAACoB,eAAe,GAAG4B,QAAQ,CAACM,MAAM,CAACH,UAAU,CAAC,CAAC,CAAC;;IAExD;;IAEA;IACA;IACAnD,QAAQ,CAACqB,UAAU,GAAG,CAAC3C,YAAY;IACnC;IACA;MACEuE,CAAC,EAAE,MAAM;MACTC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,KAAK;MACRC,CAAC,EAAE;IACL,CAAC;IACD;IACAzE,gBAAgB;IAChB;IACA;MACEwE,CAAC,EAAE,SAAS;MACZC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,QAAQ;MACXC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,YAAY;MACfC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,WAAW;MACdC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,SAAS;MACZC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,QAAQ;MACXC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,SAAS;MACZC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,QAAQ;MACXC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,SAAS;MACZC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,QAAQ;MACXC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,YAAY;MACfC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,WAAW;MACdC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,aAAa;MAChBC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,QAAQ;MACXC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,QAAQ;MACXC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,KAAK;MACRC,CAAC,EAAE;IACL,CAAC;IACD;IACA;MACED,CAAC,EAAE,YAAY;MACfC,CAAC,EAAE;IACL,CAAC,CAAC;IAAA,CACD;;IAED,OAAOlD,QAAQ;EACjB,CAAC,CAAC;;EAEF;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASW,WAAWA,CAACuB,IAAI,EAAEqB,MAAM,EAAEC,SAAS,EAAE;IAC5C,IAAIlB,EAAE,GAAGJ,IAAI,CAACV,IAAI;IAClB,IAAIiC,QAAQ,GAAG7D,SAAS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"},"metadata":{},"sourceType":"module","externalDependencies":[]}