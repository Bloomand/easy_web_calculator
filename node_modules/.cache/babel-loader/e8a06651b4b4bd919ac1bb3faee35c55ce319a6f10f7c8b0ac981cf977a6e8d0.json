{"ast":null,"code":"import { flatten, identify } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setIsSubset';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport var createSetIsSubset = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index\n  } = _ref;\n  /**\n   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIsSubset(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false\n   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {boolean} Returns true when a1 is a subset of a2, returns false otherwise\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty is a subset of anything\n        return true;\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything is not a subset of empty\n        return false;\n      }\n      var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n      var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n      var inb2;\n      for (var i = 0; i < b1.length; i++) {\n        inb2 = false;\n        for (var j = 0; j < b2.length; j++) {\n          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n            // the identifier is always a decimal int\n            inb2 = true;\n            break;\n          }\n        }\n        if (inb2 === false) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n});","map":{"version":3,"names":["flatten","identify","factory","name","dependencies","createSetIsSubset","_ref","typed","size","subset","compareNatural","Index","ArrayMatrixArrayMatrix","a1","a2","b1","Array","isArray","toArray","sort","b2","inb2","i","length","j","value","identifier"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/set/setIsSubset.js"],"sourcesContent":["import { flatten, identify } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setIsSubset';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport var createSetIsSubset = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index\n  } = _ref;\n  /**\n   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIsSubset(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false\n   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {boolean} Returns true when a1 is a subset of a2, returns false otherwise\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty is a subset of anything\n        return true;\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything is not a subset of empty\n        return false;\n      }\n      var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n      var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n      var inb2;\n      for (var i = 0; i < b1.length; i++) {\n        inb2 = false;\n        for (var j = 0; j < b2.length; j++) {\n          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n            // the identifier is always a decimal int\n            inb2 = true;\n            break;\n          }\n        }\n        if (inb2 === false) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,EAAEC,QAAQ,QAAQ,sBAAsB;AACxD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,aAAa;AACxB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,gBAAgB,EAAE,OAAO,CAAC;AACzE,OAAO,IAAIC,iBAAiB,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAChF,IAAI;IACFC,KAAK;IACLC,IAAI;IACJC,MAAM;IACNC,cAAc;IACdC;EACF,CAAC,GAAGL,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,gCAAgC,EAAE,SAASS,sBAAsBA,CAACC,EAAE,EAAEC,EAAE,EAAE;MACxE,IAAIL,MAAM,CAACD,IAAI,CAACK,EAAE,CAAC,EAAE,IAAIF,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QACxC;QACA,OAAO,IAAI;MACb,CAAC,MAAM,IAAIF,MAAM,CAACD,IAAI,CAACM,EAAE,CAAC,EAAE,IAAIH,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QAC/C;QACA,OAAO,KAAK;MACd;MACA,IAAII,EAAE,GAAGd,QAAQ,CAACD,OAAO,CAACgB,KAAK,CAACC,OAAO,CAACJ,EAAE,CAAC,GAAGA,EAAE,GAAGA,EAAE,CAACK,OAAO,EAAE,CAAC,CAACC,IAAI,CAACT,cAAc,CAAC,CAAC;MACtF,IAAIU,EAAE,GAAGnB,QAAQ,CAACD,OAAO,CAACgB,KAAK,CAACC,OAAO,CAACH,EAAE,CAAC,GAAGA,EAAE,GAAGA,EAAE,CAACI,OAAO,EAAE,CAAC,CAACC,IAAI,CAACT,cAAc,CAAC,CAAC;MACtF,IAAIW,IAAI;MACR,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,EAAE,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;QAClCD,IAAI,GAAG,KAAK;QACZ,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,EAAE,CAACG,MAAM,EAAEC,CAAC,EAAE,EAAE;UAClC,IAAId,cAAc,CAACK,EAAE,CAACO,CAAC,CAAC,CAACG,KAAK,EAAEL,EAAE,CAACI,CAAC,CAAC,CAACC,KAAK,CAAC,KAAK,CAAC,IAAIV,EAAE,CAACO,CAAC,CAAC,CAACI,UAAU,KAAKN,EAAE,CAACI,CAAC,CAAC,CAACE,UAAU,EAAE;YAC3F;YACAL,IAAI,GAAG,IAAI;YACX;UACF;QACF;QACA,IAAIA,IAAI,KAAK,KAAK,EAAE;UAClB,OAAO,KAAK;QACd;MACF;MACA,OAAO,IAAI;IACb;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}