{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'sylvester';\nvar dependencies = ['typed', 'schur', 'matrixFromColumns', 'matrix', 'multiply', 'range', 'concat', 'transpose', 'index', 'subset', 'add', 'subtract', 'identity', 'lusolve', 'abs'];\nexport var createSylvester = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    schur,\n    matrixFromColumns,\n    matrix,\n    multiply,\n    range,\n    concat,\n    transpose,\n    index,\n    subset,\n    add,\n    subtract,\n    identity,\n    lusolve,\n    abs\n  } = _ref;\n  /**\n   *\n   * Solves the real-valued Sylvester equation AX+XB=C for X, where A, B and C are\n   * matrices of appropriate dimensions, being A and B squared. Notice that other\n   * equivalent definitions for the Sylvester equation exist and this function\n   * assumes the one presented in the original publication of the the Bartels-\n   * Stewart algorithm, which is implemented by this function.\n   * https://en.wikipedia.org/wiki/Sylvester_equation\n   *\n   * Syntax:\n   *\n   *     math.sylvester(A, B, C)\n   *\n   * Examples:\n   *\n   *     const A = [[-1, -2], [1, 1]]\n   *     const B = [[2, -1], [1, -2]]\n   *     const C = [[-3, 2], [3, 0]]\n   *     math.sylvester(A, B, C)      // returns DenseMatrix [[-0.25, 0.25], [1.5, -1.25]]\n   *\n   * See also:\n   *\n   *     schur, lyap\n   *\n   * @param {Matrix | Array} A  Matrix A\n   * @param {Matrix | Array} B  Matrix B\n   * @param {Matrix | Array} C  Matrix C\n   * @return {Matrix | Array}   Matrix X, solving the Sylvester equation\n   */\n  return typed(name, {\n    'Matrix, Matrix, Matrix': _sylvester,\n    'Array, Matrix, Matrix': function ArrayMatrixMatrix(A, B, C) {\n      return _sylvester(matrix(A), B, C);\n    },\n    'Array, Array, Matrix': function ArrayArrayMatrix(A, B, C) {\n      return _sylvester(matrix(A), matrix(B), C);\n    },\n    'Array, Matrix, Array': function ArrayMatrixArray(A, B, C) {\n      return _sylvester(matrix(A), B, matrix(C));\n    },\n    'Matrix, Array, Matrix': function MatrixArrayMatrix(A, B, C) {\n      return _sylvester(A, matrix(B), C);\n    },\n    'Matrix, Array, Array': function MatrixArrayArray(A, B, C) {\n      return _sylvester(A, matrix(B), matrix(C));\n    },\n    'Matrix, Matrix, Array': function MatrixMatrixArray(A, B, C) {\n      return _sylvester(A, B, matrix(C));\n    },\n    'Array, Array, Array': function ArrayArrayArray(A, B, C) {\n      return _sylvester(matrix(A), matrix(B), matrix(C)).toArray();\n    }\n  });\n  function _sylvester(A, B, C) {\n    var n = B.size()[0];\n    var m = A.size()[0];\n    var sA = schur(A);\n    var F = sA.T;\n    var U = sA.U;\n    var sB = schur(multiply(-1, B));\n    var G = sB.T;\n    var V = sB.U;\n    var D = multiply(multiply(transpose(U), C), V);\n    var all = range(0, m);\n    var y = [];\n    var hc = (a, b) => concat(a, b, 1);\n    var vc = (a, b) => concat(a, b, 0);\n    for (var k = 0; k < n; k++) {\n      if (k < n - 1 && abs(subset(G, index(k + 1, k))) > 1e-5) {\n        var RHS = vc(subset(D, index(all, k)), subset(D, index(all, k + 1)));\n        for (var j = 0; j < k; j++) {\n          RHS = add(RHS, vc(multiply(y[j], subset(G, index(j, k))), multiply(y[j], subset(G, index(j, k + 1)))));\n        }\n        var gkk = multiply(identity(m), multiply(-1, subset(G, index(k, k))));\n        var gmk = multiply(identity(m), multiply(-1, subset(G, index(k + 1, k))));\n        var gkm = multiply(identity(m), multiply(-1, subset(G, index(k, k + 1))));\n        var gmm = multiply(identity(m), multiply(-1, subset(G, index(k + 1, k + 1))));\n        var LHS = vc(hc(add(F, gkk), gmk), hc(gkm, add(F, gmm)));\n        var yAux = lusolve(LHS, RHS);\n        y[k] = yAux.subset(index(range(0, m), 0));\n        y[k + 1] = yAux.subset(index(range(m, 2 * m), 0));\n        k++;\n      } else {\n        var _RHS = subset(D, index(all, k));\n        for (var _j = 0; _j < k; _j++) {\n          _RHS = add(_RHS, multiply(y[_j], subset(G, index(_j, k))));\n        }\n        var _gkk = subset(G, index(k, k));\n        var _LHS = subtract(F, multiply(_gkk, identity(m)));\n        y[k] = lusolve(_LHS, _RHS);\n      }\n    }\n    var Y = matrix(matrixFromColumns(...y));\n    var X = multiply(U, multiply(Y, transpose(V)));\n    return X;\n  }\n});","map":{"version":3,"names":["factory","name","dependencies","createSylvester","_ref","typed","schur","matrixFromColumns","matrix","multiply","range","concat","transpose","index","subset","add","subtract","identity","lusolve","abs","_sylvester","ArrayMatrixMatrix","A","B","C","ArrayArrayMatrix","ArrayMatrixArray","MatrixArrayMatrix","MatrixArrayArray","MatrixMatrixArray","ArrayArrayArray","toArray","n","size","m","sA","F","T","U","sB","G","V","D","all","y","hc","a","b","vc","k","RHS","j","gkk","gmk","gkm","gmm","LHS","yAux","_RHS","_j","_gkk","_LHS","Y","X"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/algebra/sylvester.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'sylvester';\nvar dependencies = ['typed', 'schur', 'matrixFromColumns', 'matrix', 'multiply', 'range', 'concat', 'transpose', 'index', 'subset', 'add', 'subtract', 'identity', 'lusolve', 'abs'];\nexport var createSylvester = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    schur,\n    matrixFromColumns,\n    matrix,\n    multiply,\n    range,\n    concat,\n    transpose,\n    index,\n    subset,\n    add,\n    subtract,\n    identity,\n    lusolve,\n    abs\n  } = _ref;\n  /**\n   *\n   * Solves the real-valued Sylvester equation AX+XB=C for X, where A, B and C are\n   * matrices of appropriate dimensions, being A and B squared. Notice that other\n   * equivalent definitions for the Sylvester equation exist and this function\n   * assumes the one presented in the original publication of the the Bartels-\n   * Stewart algorithm, which is implemented by this function.\n   * https://en.wikipedia.org/wiki/Sylvester_equation\n   *\n   * Syntax:\n   *\n   *     math.sylvester(A, B, C)\n   *\n   * Examples:\n   *\n   *     const A = [[-1, -2], [1, 1]]\n   *     const B = [[2, -1], [1, -2]]\n   *     const C = [[-3, 2], [3, 0]]\n   *     math.sylvester(A, B, C)      // returns DenseMatrix [[-0.25, 0.25], [1.5, -1.25]]\n   *\n   * See also:\n   *\n   *     schur, lyap\n   *\n   * @param {Matrix | Array} A  Matrix A\n   * @param {Matrix | Array} B  Matrix B\n   * @param {Matrix | Array} C  Matrix C\n   * @return {Matrix | Array}   Matrix X, solving the Sylvester equation\n   */\n  return typed(name, {\n    'Matrix, Matrix, Matrix': _sylvester,\n    'Array, Matrix, Matrix': function ArrayMatrixMatrix(A, B, C) {\n      return _sylvester(matrix(A), B, C);\n    },\n    'Array, Array, Matrix': function ArrayArrayMatrix(A, B, C) {\n      return _sylvester(matrix(A), matrix(B), C);\n    },\n    'Array, Matrix, Array': function ArrayMatrixArray(A, B, C) {\n      return _sylvester(matrix(A), B, matrix(C));\n    },\n    'Matrix, Array, Matrix': function MatrixArrayMatrix(A, B, C) {\n      return _sylvester(A, matrix(B), C);\n    },\n    'Matrix, Array, Array': function MatrixArrayArray(A, B, C) {\n      return _sylvester(A, matrix(B), matrix(C));\n    },\n    'Matrix, Matrix, Array': function MatrixMatrixArray(A, B, C) {\n      return _sylvester(A, B, matrix(C));\n    },\n    'Array, Array, Array': function ArrayArrayArray(A, B, C) {\n      return _sylvester(matrix(A), matrix(B), matrix(C)).toArray();\n    }\n  });\n  function _sylvester(A, B, C) {\n    var n = B.size()[0];\n    var m = A.size()[0];\n    var sA = schur(A);\n    var F = sA.T;\n    var U = sA.U;\n    var sB = schur(multiply(-1, B));\n    var G = sB.T;\n    var V = sB.U;\n    var D = multiply(multiply(transpose(U), C), V);\n    var all = range(0, m);\n    var y = [];\n    var hc = (a, b) => concat(a, b, 1);\n    var vc = (a, b) => concat(a, b, 0);\n    for (var k = 0; k < n; k++) {\n      if (k < n - 1 && abs(subset(G, index(k + 1, k))) > 1e-5) {\n        var RHS = vc(subset(D, index(all, k)), subset(D, index(all, k + 1)));\n        for (var j = 0; j < k; j++) {\n          RHS = add(RHS, vc(multiply(y[j], subset(G, index(j, k))), multiply(y[j], subset(G, index(j, k + 1)))));\n        }\n        var gkk = multiply(identity(m), multiply(-1, subset(G, index(k, k))));\n        var gmk = multiply(identity(m), multiply(-1, subset(G, index(k + 1, k))));\n        var gkm = multiply(identity(m), multiply(-1, subset(G, index(k, k + 1))));\n        var gmm = multiply(identity(m), multiply(-1, subset(G, index(k + 1, k + 1))));\n        var LHS = vc(hc(add(F, gkk), gmk), hc(gkm, add(F, gmm)));\n        var yAux = lusolve(LHS, RHS);\n        y[k] = yAux.subset(index(range(0, m), 0));\n        y[k + 1] = yAux.subset(index(range(m, 2 * m), 0));\n        k++;\n      } else {\n        var _RHS = subset(D, index(all, k));\n        for (var _j = 0; _j < k; _j++) {\n          _RHS = add(_RHS, multiply(y[_j], subset(G, index(_j, k))));\n        }\n        var _gkk = subset(G, index(k, k));\n        var _LHS = subtract(F, multiply(_gkk, identity(m)));\n        y[k] = lusolve(_LHS, _RHS);\n      }\n    }\n    var Y = matrix(matrixFromColumns(...y));\n    var X = multiply(U, multiply(Y, transpose(V)));\n    return X;\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}