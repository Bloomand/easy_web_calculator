{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { xgcdNumber } from '../../plain/number/index.js';\nvar name = 'xgcd';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nexport var createXgcd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    BigNumber\n  } = _ref;\n  /**\n   * Calculate the extended greatest common divisor for two values.\n   * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n   *\n   * Syntax:\n   *\n   *    math.xgcd(a, b)\n   *\n   * Examples:\n   *\n   *    math.xgcd(8, 12)             // returns [4, -1, 1]\n   *    math.gcd(8, 12)              // returns 4\n   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]\n   *\n   * See also:\n   *\n   *    gcd, lcm\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\n   *                              where `div = gcd(a, b)` and `a*m + b*n = div`\n   */\n  return typed(name, {\n    'number, number': function numberNumber(a, b) {\n      var res = xgcdNumber(a, b);\n      return config.matrix === 'Array' ? res : matrix(res);\n    },\n    'BigNumber, BigNumber': _xgcdBigNumber\n    // TODO: implement support for Fraction\n  });\n\n  /**\n   * Calculate xgcd for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @return {BigNumber[]} result\n   * @private\n   */\n  function _xgcdBigNumber(a, b) {\n    // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n    var\n    // used to swap two variables\n    t;\n    var\n    // quotient\n    q;\n    var\n    // remainder\n    r;\n    var zero = new BigNumber(0);\n    var one = new BigNumber(1);\n    var x = zero;\n    var lastx = one;\n    var y = one;\n    var lasty = zero;\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function xgcd must be integer numbers');\n    }\n    while (!b.isZero()) {\n      q = a.div(b).floor();\n      r = a.mod(b);\n      t = x;\n      x = lastx.minus(q.times(x));\n      lastx = t;\n      t = y;\n      y = lasty.minus(q.times(y));\n      lasty = t;\n      a = b;\n      b = r;\n    }\n    var res;\n    if (a.lt(zero)) {\n      res = [a.neg(), lastx.neg(), lasty.neg()];\n    } else {\n      res = [a, !a.isZero() ? lastx : 0, lasty];\n    }\n    return config.matrix === 'Array' ? res : matrix(res);\n  }\n});","map":{"version":3,"names":["factory","xgcdNumber","name","dependencies","createXgcd","_ref","typed","config","matrix","BigNumber","numberNumber","a","b","res","_xgcdBigNumber","t","q","r","zero","one","x","lastx","y","lasty","isInt","Error","isZero","div","floor","mod","minus","times","lt","neg"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/arithmetic/xgcd.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { xgcdNumber } from '../../plain/number/index.js';\nvar name = 'xgcd';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nexport var createXgcd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    BigNumber\n  } = _ref;\n  /**\n   * Calculate the extended greatest common divisor for two values.\n   * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n   *\n   * Syntax:\n   *\n   *    math.xgcd(a, b)\n   *\n   * Examples:\n   *\n   *    math.xgcd(8, 12)             // returns [4, -1, 1]\n   *    math.gcd(8, 12)              // returns 4\n   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]\n   *\n   * See also:\n   *\n   *    gcd, lcm\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\n   *                              where `div = gcd(a, b)` and `a*m + b*n = div`\n   */\n  return typed(name, {\n    'number, number': function numberNumber(a, b) {\n      var res = xgcdNumber(a, b);\n      return config.matrix === 'Array' ? res : matrix(res);\n    },\n    'BigNumber, BigNumber': _xgcdBigNumber\n    // TODO: implement support for Fraction\n  });\n\n  /**\n   * Calculate xgcd for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @return {BigNumber[]} result\n   * @private\n   */\n  function _xgcdBigNumber(a, b) {\n    // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n    var\n    // used to swap two variables\n    t;\n    var\n    // quotient\n    q;\n    var\n    // remainder\n    r;\n    var zero = new BigNumber(0);\n    var one = new BigNumber(1);\n    var x = zero;\n    var lastx = one;\n    var y = one;\n    var lasty = zero;\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function xgcd must be integer numbers');\n    }\n    while (!b.isZero()) {\n      q = a.div(b).floor();\n      r = a.mod(b);\n      t = x;\n      x = lastx.minus(q.times(x));\n      lastx = t;\n      t = y;\n      y = lasty.minus(q.times(y));\n      lasty = t;\n      a = b;\n      b = r;\n    }\n    var res;\n    if (a.lt(zero)) {\n      res = [a.neg(), lastx.neg(), lasty.neg()];\n    } else {\n      res = [a, !a.isZero() ? lastx : 0, lasty];\n    }\n    return config.matrix === 'Array' ? res : matrix(res);\n  }\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,UAAU,QAAQ,6BAA6B;AACxD,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,WAAW,CAAC;AAC7D,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,MAAM;IACNC;EACF,CAAC,GAAGJ,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAE,SAASQ,YAAYA,CAACC,CAAC,EAAEC,CAAC,EAAE;MAC5C,IAAIC,GAAG,GAAGZ,UAAU,CAACU,CAAC,EAAEC,CAAC,CAAC;MAC1B,OAAOL,MAAM,CAACC,MAAM,KAAK,OAAO,GAAGK,GAAG,GAAGL,MAAM,CAACK,GAAG,CAAC;IACtD,CAAC;IACD,sBAAsB,EAAEC;IACxB;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,cAAcA,CAACH,CAAC,EAAEC,CAAC,EAAE;IAC5B;IACA;IACA;IACAG,CAAC;IACD;IACA;IACAC,CAAC;IACD;IACA;IACAC,CAAC;IACD,IAAIC,IAAI,GAAG,IAAIT,SAAS,CAAC,CAAC,CAAC;IAC3B,IAAIU,GAAG,GAAG,IAAIV,SAAS,CAAC,CAAC,CAAC;IAC1B,IAAIW,CAAC,GAAGF,IAAI;IACZ,IAAIG,KAAK,GAAGF,GAAG;IACf,IAAIG,CAAC,GAAGH,GAAG;IACX,IAAII,KAAK,GAAGL,IAAI;IAChB,IAAI,CAACP,CAAC,CAACa,KAAK,EAAE,IAAI,CAACZ,CAAC,CAACY,KAAK,EAAE,EAAE;MAC5B,MAAM,IAAIC,KAAK,CAAC,qDAAqD,CAAC;IACxE;IACA,OAAO,CAACb,CAAC,CAACc,MAAM,EAAE,EAAE;MAClBV,CAAC,GAAGL,CAAC,CAACgB,GAAG,CAACf,CAAC,CAAC,CAACgB,KAAK,EAAE;MACpBX,CAAC,GAAGN,CAAC,CAACkB,GAAG,CAACjB,CAAC,CAAC;MACZG,CAAC,GAAGK,CAAC;MACLA,CAAC,GAAGC,KAAK,CAACS,KAAK,CAACd,CAAC,CAACe,KAAK,CAACX,CAAC,CAAC,CAAC;MAC3BC,KAAK,GAAGN,CAAC;MACTA,CAAC,GAAGO,CAAC;MACLA,CAAC,GAAGC,KAAK,CAACO,KAAK,CAACd,CAAC,CAACe,KAAK,CAACT,CAAC,CAAC,CAAC;MAC3BC,KAAK,GAAGR,CAAC;MACTJ,CAAC,GAAGC,CAAC;MACLA,CAAC,GAAGK,CAAC;IACP;IACA,IAAIJ,GAAG;IACP,IAAIF,CAAC,CAACqB,EAAE,CAACd,IAAI,CAAC,EAAE;MACdL,GAAG,GAAG,CAACF,CAAC,CAACsB,GAAG,EAAE,EAAEZ,KAAK,CAACY,GAAG,EAAE,EAAEV,KAAK,CAACU,GAAG,EAAE,CAAC;IAC3C,CAAC,MAAM;MACLpB,GAAG,GAAG,CAACF,CAAC,EAAE,CAACA,CAAC,CAACe,MAAM,EAAE,GAAGL,KAAK,GAAG,CAAC,EAAEE,KAAK,CAAC;IAC3C;IACA,OAAOhB,MAAM,CAACC,MAAM,KAAK,OAAO,GAAGK,GAAG,GAAGL,MAAM,CAACK,GAAG,CAAC;EACtD;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}