{"ast":null,"code":"import { isBigNumber } from '../../utils/is.js';\nimport { resize } from '../../utils/array.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'identity';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix'];\nexport var createIdentity = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    BigNumber,\n    DenseMatrix,\n    SparseMatrix\n  } = _ref;\n  /**\n   * Create a 2-dimensional identity matrix with size m x n or n x n.\n   * The matrix has ones on the diagonal and zeros elsewhere.\n   *\n   * Syntax:\n   *\n   *    math.identity(n)\n   *    math.identity(n, format)\n   *    math.identity(m, n)\n   *    math.identity(m, n, format)\n   *    math.identity([m, n])\n   *    math.identity([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]\n   *\n   * See also:\n   *\n   *    diag, ones, zeros, size, range\n   *\n   * @param {...number | Matrix | Array} size   The size for the matrix\n   * @param {string} [format]                   The Matrix storage format\n   *\n   * @return {Matrix | Array | number} A matrix with ones on the diagonal.\n   */\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Matrix' ? matrix([]) : [];\n    },\n    string: function string(format) {\n      return matrix(format);\n    },\n    'number | BigNumber': function numberBigNumber(rows) {\n      return _identity(rows, rows, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber, string': function numberBigNumberString(rows, format) {\n      return _identity(rows, rows, format);\n    },\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {\n      return _identity(rows, cols, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {\n      return _identity(rows, cols, format);\n    },\n    Array: function Array(size) {\n      return _identityVector(size);\n    },\n    'Array, string': function ArrayString(size, format) {\n      return _identityVector(size, format);\n    },\n    Matrix: function Matrix(size) {\n      return _identityVector(size.valueOf(), size.storage());\n    },\n    'Matrix, string': function MatrixString(size, format) {\n      return _identityVector(size.valueOf(), format);\n    }\n  });\n  function _identityVector(size, format) {\n    switch (size.length) {\n      case 0:\n        return format ? matrix(format) : [];\n      case 1:\n        return _identity(size[0], size[0], format);\n      case 2:\n        return _identity(size[0], size[1], format);\n      default:\n        throw new Error('Vector containing two values expected');\n    }\n  }\n\n  /**\n   * Create an identity matrix\n   * @param {number | BigNumber} rows\n   * @param {number | BigNumber} cols\n   * @param {string} [format]\n   * @returns {Matrix}\n   * @private\n   */\n  function _identity(rows, cols, format) {\n    // BigNumber constructor with the right precision\n    var Big = isBigNumber(rows) || isBigNumber(cols) ? BigNumber : null;\n    if (isBigNumber(rows)) rows = rows.toNumber();\n    if (isBigNumber(cols)) cols = cols.toNumber();\n    if (!isInteger(rows) || rows < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n    if (!isInteger(cols) || cols < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n    var one = Big ? new BigNumber(1) : 1;\n    var defaultValue = Big ? new Big(0) : 0;\n    var size = [rows, cols];\n\n    // check we need to return a matrix\n    if (format) {\n      // create diagonal matrix (use optimized implementation for storage format)\n      if (format === 'sparse') {\n        return SparseMatrix.diagonal(size, one, 0, defaultValue);\n      }\n      if (format === 'dense') {\n        return DenseMatrix.diagonal(size, one, 0, defaultValue);\n      }\n      throw new TypeError(\"Unknown matrix type \\\"\".concat(format, \"\\\"\"));\n    }\n\n    // create and resize array\n    var res = resize([], size, defaultValue);\n    // fill in ones on the diagonal\n    var minimum = rows < cols ? rows : cols;\n    // fill diagonal\n    for (var d = 0; d < minimum; d++) {\n      res[d][d] = one;\n    }\n    return res;\n  }\n});","map":{"version":3,"names":["isBigNumber","resize","isInteger","factory","name","dependencies","createIdentity","_ref","typed","config","matrix","BigNumber","DenseMatrix","SparseMatrix","_","string","format","numberBigNumber","rows","_identity","undefined","numberBigNumberString","numberBigNumberNumberBigNumber","cols","numberBigNumberNumberBigNumberString","Array","size","_identityVector","ArrayString","Matrix","valueOf","storage","MatrixString","length","Error","Big","toNumber","one","defaultValue","diagonal","TypeError","concat","res","minimum","d"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/matrix/identity.js"],"sourcesContent":["import { isBigNumber } from '../../utils/is.js';\nimport { resize } from '../../utils/array.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'identity';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix'];\nexport var createIdentity = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    BigNumber,\n    DenseMatrix,\n    SparseMatrix\n  } = _ref;\n  /**\n   * Create a 2-dimensional identity matrix with size m x n or n x n.\n   * The matrix has ones on the diagonal and zeros elsewhere.\n   *\n   * Syntax:\n   *\n   *    math.identity(n)\n   *    math.identity(n, format)\n   *    math.identity(m, n)\n   *    math.identity(m, n, format)\n   *    math.identity([m, n])\n   *    math.identity([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]\n   *\n   * See also:\n   *\n   *    diag, ones, zeros, size, range\n   *\n   * @param {...number | Matrix | Array} size   The size for the matrix\n   * @param {string} [format]                   The Matrix storage format\n   *\n   * @return {Matrix | Array | number} A matrix with ones on the diagonal.\n   */\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Matrix' ? matrix([]) : [];\n    },\n    string: function string(format) {\n      return matrix(format);\n    },\n    'number | BigNumber': function numberBigNumber(rows) {\n      return _identity(rows, rows, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber, string': function numberBigNumberString(rows, format) {\n      return _identity(rows, rows, format);\n    },\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {\n      return _identity(rows, cols, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {\n      return _identity(rows, cols, format);\n    },\n    Array: function Array(size) {\n      return _identityVector(size);\n    },\n    'Array, string': function ArrayString(size, format) {\n      return _identityVector(size, format);\n    },\n    Matrix: function Matrix(size) {\n      return _identityVector(size.valueOf(), size.storage());\n    },\n    'Matrix, string': function MatrixString(size, format) {\n      return _identityVector(size.valueOf(), format);\n    }\n  });\n  function _identityVector(size, format) {\n    switch (size.length) {\n      case 0:\n        return format ? matrix(format) : [];\n      case 1:\n        return _identity(size[0], size[0], format);\n      case 2:\n        return _identity(size[0], size[1], format);\n      default:\n        throw new Error('Vector containing two values expected');\n    }\n  }\n\n  /**\n   * Create an identity matrix\n   * @param {number | BigNumber} rows\n   * @param {number | BigNumber} cols\n   * @param {string} [format]\n   * @returns {Matrix}\n   * @private\n   */\n  function _identity(rows, cols, format) {\n    // BigNumber constructor with the right precision\n    var Big = isBigNumber(rows) || isBigNumber(cols) ? BigNumber : null;\n    if (isBigNumber(rows)) rows = rows.toNumber();\n    if (isBigNumber(cols)) cols = cols.toNumber();\n    if (!isInteger(rows) || rows < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n    if (!isInteger(cols) || cols < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n    var one = Big ? new BigNumber(1) : 1;\n    var defaultValue = Big ? new Big(0) : 0;\n    var size = [rows, cols];\n\n    // check we need to return a matrix\n    if (format) {\n      // create diagonal matrix (use optimized implementation for storage format)\n      if (format === 'sparse') {\n        return SparseMatrix.diagonal(size, one, 0, defaultValue);\n      }\n      if (format === 'dense') {\n        return DenseMatrix.diagonal(size, one, 0, defaultValue);\n      }\n      throw new TypeError(\"Unknown matrix type \\\"\".concat(format, \"\\\"\"));\n    }\n\n    // create and resize array\n    var res = resize([], size, defaultValue);\n    // fill in ones on the diagonal\n    var minimum = rows < cols ? rows : cols;\n    // fill diagonal\n    for (var d = 0; d < minimum; d++) {\n      res[d][d] = one;\n    }\n    return res;\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}