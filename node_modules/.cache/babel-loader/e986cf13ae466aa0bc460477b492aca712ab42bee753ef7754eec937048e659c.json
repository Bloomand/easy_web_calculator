{"ast":null,"code":"import { deepForEach, reduce, containsCollections } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'max';\nvar dependencies = ['typed', 'config', 'numeric', 'larger'];\nexport var createMax = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    numeric,\n    larger\n  } = _ref;\n  /**\n   * Compute the maximum value of a matrix or a  list with values.\n   * In case of a multidimensional array, the maximum of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.max(a, b, c, ...)\n   *     math.max(A)\n   *     math.max(A, dimension)\n   *\n   * Examples:\n   *\n   *     math.max(2, 1, 4, 3)                  // returns 4\n   *     math.max([2, 1, 4, 3])                // returns 4\n   *\n   *     // maximum over a specified dimension (zero-based)\n   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]\n   *     math.max([[2, 5], [4, 3], [1, 7]], 1) // returns [5, 4, 7]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, min, prod, std, sum, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The maximum value\n   */\n  return typed(name, {\n    // max([a, b, c, d, ...])\n    'Array | Matrix': _max,\n    // max([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _largest);\n    },\n    // max(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function max');\n      }\n      return _max(args);\n    }\n  });\n\n  /**\n   * Return the largest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is largest, or y when y is largest\n   * @private\n   */\n  function _largest(x, y) {\n    try {\n      return larger(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'max', y);\n    }\n  }\n\n  /**\n   * Recursively calculate the maximum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} max\n   * @private\n   */\n  function _max(array) {\n    var res;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          res = NaN;\n        } else if (res === undefined || larger(value, res)) {\n          res = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'max', value);\n      }\n    });\n    if (res === undefined) {\n      throw new Error('Cannot calculate max of an empty array');\n    }\n\n    // make sure returning numeric value: parse a string into a numeric value\n    if (typeof res === 'string') {\n      res = numeric(res, config.number);\n    }\n    return res;\n  }\n});","map":{"version":3,"names":["deepForEach","reduce","containsCollections","factory","improveErrorMessage","name","dependencies","createMax","_ref","typed","config","numeric","larger","_max","ArrayMatrixNumberBigNumber","array","dim","valueOf","_largest","_","args","TypeError","x","y","err","res","value","isNaN","NaN","undefined","Error","number"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/statistics/max.js"],"sourcesContent":["import { deepForEach, reduce, containsCollections } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'max';\nvar dependencies = ['typed', 'config', 'numeric', 'larger'];\nexport var createMax = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    numeric,\n    larger\n  } = _ref;\n  /**\n   * Compute the maximum value of a matrix or a  list with values.\n   * In case of a multidimensional array, the maximum of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.max(a, b, c, ...)\n   *     math.max(A)\n   *     math.max(A, dimension)\n   *\n   * Examples:\n   *\n   *     math.max(2, 1, 4, 3)                  // returns 4\n   *     math.max([2, 1, 4, 3])                // returns 4\n   *\n   *     // maximum over a specified dimension (zero-based)\n   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]\n   *     math.max([[2, 5], [4, 3], [1, 7]], 1) // returns [5, 4, 7]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, min, prod, std, sum, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The maximum value\n   */\n  return typed(name, {\n    // max([a, b, c, d, ...])\n    'Array | Matrix': _max,\n    // max([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _largest);\n    },\n    // max(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function max');\n      }\n      return _max(args);\n    }\n  });\n\n  /**\n   * Return the largest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is largest, or y when y is largest\n   * @private\n   */\n  function _largest(x, y) {\n    try {\n      return larger(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'max', y);\n    }\n  }\n\n  /**\n   * Recursively calculate the maximum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} max\n   * @private\n   */\n  function _max(array) {\n    var res;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          res = NaN;\n        } else if (res === undefined || larger(value, res)) {\n          res = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'max', value);\n      }\n    });\n    if (res === undefined) {\n      throw new Error('Cannot calculate max of an empty array');\n    }\n\n    // make sure returning numeric value: parse a string into a numeric value\n    if (typeof res === 'string') {\n      res = numeric(res, config.number);\n    }\n    return res;\n  }\n});"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,EAAEC,mBAAmB,QAAQ,2BAA2B;AACpF,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC;AAC3D,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACxE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,OAAO;IACPC;EACF,CAAC,GAAGJ,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB;IACA,gBAAgB,EAAEQ,IAAI;IACtB;IACA,oCAAoC,EAAE,SAASC,0BAA0BA,CAACC,KAAK,EAAEC,GAAG,EAAE;MACpF,OAAOf,MAAM,CAACc,KAAK,EAAEC,GAAG,CAACC,OAAO,EAAE,EAAEC,QAAQ,CAAC;IAC/C,CAAC;IACD;IACA,KAAK,EAAE,SAASC,CAACA,CAACC,IAAI,EAAE;MACtB,IAAIlB,mBAAmB,CAACkB,IAAI,CAAC,EAAE;QAC7B,MAAM,IAAIC,SAAS,CAAC,wCAAwC,CAAC;MAC/D;MACA,OAAOR,IAAI,CAACO,IAAI,CAAC;IACnB;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAASF,QAAQA,CAACI,CAAC,EAAEC,CAAC,EAAE;IACtB,IAAI;MACF,OAAOX,MAAM,CAACU,CAAC,EAAEC,CAAC,CAAC,GAAGD,CAAC,GAAGC,CAAC;IAC7B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,MAAMpB,mBAAmB,CAACoB,GAAG,EAAE,KAAK,EAAED,CAAC,CAAC;IAC1C;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASV,IAAIA,CAACE,KAAK,EAAE;IACnB,IAAIU,GAAG;IACPzB,WAAW,CAACe,KAAK,EAAE,UAAUW,KAAK,EAAE;MAClC,IAAI;QACF,IAAIC,KAAK,CAACD,KAAK,CAAC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;UAC7CD,GAAG,GAAGG,GAAG;QACX,CAAC,MAAM,IAAIH,GAAG,KAAKI,SAAS,IAAIjB,MAAM,CAACc,KAAK,EAAED,GAAG,CAAC,EAAE;UAClDA,GAAG,GAAGC,KAAK;QACb;MACF,CAAC,CAAC,OAAOF,GAAG,EAAE;QACZ,MAAMpB,mBAAmB,CAACoB,GAAG,EAAE,KAAK,EAAEE,KAAK,CAAC;MAC9C;IACF,CAAC,CAAC;IACF,IAAID,GAAG,KAAKI,SAAS,EAAE;MACrB,MAAM,IAAIC,KAAK,CAAC,wCAAwC,CAAC;IAC3D;;IAEA;IACA,IAAI,OAAOL,GAAG,KAAK,QAAQ,EAAE;MAC3BA,GAAG,GAAGd,OAAO,CAACc,GAAG,EAAEf,MAAM,CAACqB,MAAM,CAAC;IACnC;IACA,OAAON,GAAG;EACZ;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}