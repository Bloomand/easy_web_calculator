{"ast":null,"code":"import { isSparseMatrix } from '../../utils/is.js';\nimport { format } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'expm';\nvar dependencies = ['typed', 'abs', 'add', 'identity', 'inv', 'multiply'];\nexport var createExpm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    identity,\n    inv,\n    multiply\n  } = _ref;\n  /**\n   * Compute the matrix exponential, expm(A) = e^A. The matrix must be square.\n   * Not to be confused with exp(a), which performs element-wise\n   * exponentiation.\n   *\n   * The exponential is calculated using the Padé approximant with scaling and\n   * squaring; see \"Nineteen Dubious Ways to Compute the Exponential of a\n   * Matrix,\" by Moler and Van Loan.\n   *\n   * Syntax:\n   *\n   *     math.expm(x)\n   *\n   * Examples:\n   *\n   *     const A = [[0,2],[0,0]]\n   *     math.expm(A)        // returns [[1,2],[0,1]]\n   *\n   * See also:\n   *\n   *     exp\n   *\n   * @param {Matrix} x  A square Matrix\n   * @return {Matrix}   The exponential of x\n   */\n  return typed(name, {\n    Matrix: function Matrix(A) {\n      // Check matrix size\n      var size = A.size();\n      if (size.length !== 2 || size[0] !== size[1]) {\n        throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n      }\n      var n = size[0];\n\n      // Desired accuracy of the approximant (The actual accuracy\n      // will be affected by round-off error)\n      var eps = 1e-15;\n\n      // The Padé approximant is not so accurate when the values of A\n      // are \"large\", so scale A by powers of two. Then compute the\n      // exponential, and square the result repeatedly according to\n      // the identity e^A = (e^(A/m))^m\n\n      // Compute infinity-norm of A, ||A||, to see how \"big\" it is\n      var infNorm = infinityNorm(A);\n\n      // Find the optimal scaling factor and number of terms in the\n      // Padé approximant to reach the desired accuracy\n      var params = findParams(infNorm, eps);\n      var q = params.q;\n      var j = params.j;\n\n      // The Pade approximation to e^A is:\n      // Rqq(A) = Dqq(A) ^ -1 * Nqq(A)\n      // where\n      // Nqq(A) = sum(i=0, q, (2q-i)!p! / [ (2q)!i!(q-i)! ] A^i\n      // Dqq(A) = sum(i=0, q, (2q-i)!q! / [ (2q)!i!(q-i)! ] (-A)^i\n\n      // Scale A by 1 / 2^j\n      var Apos = multiply(A, Math.pow(2, -j));\n\n      // The i=0 term is just the identity matrix\n      var N = identity(n);\n      var D = identity(n);\n\n      // Initialization (i=0)\n      var factor = 1;\n\n      // Initialization (i=1)\n      var AposToI = Apos; // Cloning not necessary\n      var alternate = -1;\n      for (var i = 1; i <= q; i++) {\n        if (i > 1) {\n          AposToI = multiply(AposToI, Apos);\n          alternate = -alternate;\n        }\n        factor = factor * (q - i + 1) / ((2 * q - i + 1) * i);\n        N = add(N, multiply(factor, AposToI));\n        D = add(D, multiply(factor * alternate, AposToI));\n      }\n      var R = multiply(inv(D), N);\n\n      // Square j times\n      for (var _i = 0; _i < j; _i++) {\n        R = multiply(R, R);\n      }\n      return isSparseMatrix(A) ? A.createSparseMatrix(R) : R;\n    }\n  });\n  function infinityNorm(A) {\n    var n = A.size()[0];\n    var infNorm = 0;\n    for (var i = 0; i < n; i++) {\n      var rowSum = 0;\n      for (var j = 0; j < n; j++) {\n        rowSum += abs(A.get([i, j]));\n      }\n      infNorm = Math.max(rowSum, infNorm);\n    }\n    return infNorm;\n  }\n\n  /**\n   * Find the best parameters for the Pade approximant given\n   * the matrix norm and desired accuracy. Returns the first acceptable\n   * combination in order of increasing computational load.\n   */\n  function findParams(infNorm, eps) {\n    var maxSearchSize = 30;\n    for (var k = 0; k < maxSearchSize; k++) {\n      for (var q = 0; q <= k; q++) {\n        var j = k - q;\n        if (errorEstimate(infNorm, q, j) < eps) {\n          return {\n            q,\n            j\n          };\n        }\n      }\n    }\n    throw new Error('Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)');\n  }\n\n  /**\n   * Returns the estimated error of the Pade approximant for the given\n   * parameters.\n   */\n  function errorEstimate(infNorm, q, j) {\n    var qfac = 1;\n    for (var i = 2; i <= q; i++) {\n      qfac *= i;\n    }\n    var twoqfac = qfac;\n    for (var _i2 = q + 1; _i2 <= 2 * q; _i2++) {\n      twoqfac *= _i2;\n    }\n    var twoqp1fac = twoqfac * (2 * q + 1);\n    return 8.0 * Math.pow(infNorm / Math.pow(2, j), 2 * q) * qfac * qfac / (twoqfac * twoqp1fac);\n  }\n});","map":{"version":3,"names":["isSparseMatrix","format","factory","name","dependencies","createExpm","_ref","typed","abs","add","identity","inv","multiply","Matrix","A","size","length","RangeError","n","eps","infNorm","infinityNorm","params","findParams","q","j","Apos","Math","pow","N","D","factor","AposToI","alternate","i","R","_i","createSparseMatrix","rowSum","get","max","maxSearchSize","k","errorEstimate","Error","qfac","twoqfac","_i2","twoqp1fac"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/matrix/expm.js"],"sourcesContent":["import { isSparseMatrix } from '../../utils/is.js';\nimport { format } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'expm';\nvar dependencies = ['typed', 'abs', 'add', 'identity', 'inv', 'multiply'];\nexport var createExpm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    identity,\n    inv,\n    multiply\n  } = _ref;\n  /**\n   * Compute the matrix exponential, expm(A) = e^A. The matrix must be square.\n   * Not to be confused with exp(a), which performs element-wise\n   * exponentiation.\n   *\n   * The exponential is calculated using the Padé approximant with scaling and\n   * squaring; see \"Nineteen Dubious Ways to Compute the Exponential of a\n   * Matrix,\" by Moler and Van Loan.\n   *\n   * Syntax:\n   *\n   *     math.expm(x)\n   *\n   * Examples:\n   *\n   *     const A = [[0,2],[0,0]]\n   *     math.expm(A)        // returns [[1,2],[0,1]]\n   *\n   * See also:\n   *\n   *     exp\n   *\n   * @param {Matrix} x  A square Matrix\n   * @return {Matrix}   The exponential of x\n   */\n  return typed(name, {\n    Matrix: function Matrix(A) {\n      // Check matrix size\n      var size = A.size();\n      if (size.length !== 2 || size[0] !== size[1]) {\n        throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n      }\n      var n = size[0];\n\n      // Desired accuracy of the approximant (The actual accuracy\n      // will be affected by round-off error)\n      var eps = 1e-15;\n\n      // The Padé approximant is not so accurate when the values of A\n      // are \"large\", so scale A by powers of two. Then compute the\n      // exponential, and square the result repeatedly according to\n      // the identity e^A = (e^(A/m))^m\n\n      // Compute infinity-norm of A, ||A||, to see how \"big\" it is\n      var infNorm = infinityNorm(A);\n\n      // Find the optimal scaling factor and number of terms in the\n      // Padé approximant to reach the desired accuracy\n      var params = findParams(infNorm, eps);\n      var q = params.q;\n      var j = params.j;\n\n      // The Pade approximation to e^A is:\n      // Rqq(A) = Dqq(A) ^ -1 * Nqq(A)\n      // where\n      // Nqq(A) = sum(i=0, q, (2q-i)!p! / [ (2q)!i!(q-i)! ] A^i\n      // Dqq(A) = sum(i=0, q, (2q-i)!q! / [ (2q)!i!(q-i)! ] (-A)^i\n\n      // Scale A by 1 / 2^j\n      var Apos = multiply(A, Math.pow(2, -j));\n\n      // The i=0 term is just the identity matrix\n      var N = identity(n);\n      var D = identity(n);\n\n      // Initialization (i=0)\n      var factor = 1;\n\n      // Initialization (i=1)\n      var AposToI = Apos; // Cloning not necessary\n      var alternate = -1;\n      for (var i = 1; i <= q; i++) {\n        if (i > 1) {\n          AposToI = multiply(AposToI, Apos);\n          alternate = -alternate;\n        }\n        factor = factor * (q - i + 1) / ((2 * q - i + 1) * i);\n        N = add(N, multiply(factor, AposToI));\n        D = add(D, multiply(factor * alternate, AposToI));\n      }\n      var R = multiply(inv(D), N);\n\n      // Square j times\n      for (var _i = 0; _i < j; _i++) {\n        R = multiply(R, R);\n      }\n      return isSparseMatrix(A) ? A.createSparseMatrix(R) : R;\n    }\n  });\n  function infinityNorm(A) {\n    var n = A.size()[0];\n    var infNorm = 0;\n    for (var i = 0; i < n; i++) {\n      var rowSum = 0;\n      for (var j = 0; j < n; j++) {\n        rowSum += abs(A.get([i, j]));\n      }\n      infNorm = Math.max(rowSum, infNorm);\n    }\n    return infNorm;\n  }\n\n  /**\n   * Find the best parameters for the Pade approximant given\n   * the matrix norm and desired accuracy. Returns the first acceptable\n   * combination in order of increasing computational load.\n   */\n  function findParams(infNorm, eps) {\n    var maxSearchSize = 30;\n    for (var k = 0; k < maxSearchSize; k++) {\n      for (var q = 0; q <= k; q++) {\n        var j = k - q;\n        if (errorEstimate(infNorm, q, j) < eps) {\n          return {\n            q,\n            j\n          };\n        }\n      }\n    }\n    throw new Error('Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)');\n  }\n\n  /**\n   * Returns the estimated error of the Pade approximant for the given\n   * parameters.\n   */\n  function errorEstimate(infNorm, q, j) {\n    var qfac = 1;\n    for (var i = 2; i <= q; i++) {\n      qfac *= i;\n    }\n    var twoqfac = qfac;\n    for (var _i2 = q + 1; _i2 <= 2 * q; _i2++) {\n      twoqfac *= _i2;\n    }\n    var twoqp1fac = twoqfac * (2 * q + 1);\n    return 8.0 * Math.pow(infNorm / Math.pow(2, j), 2 * q) * qfac * qfac / (twoqfac * twoqp1fac);\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}