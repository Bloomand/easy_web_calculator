{"ast":null,"code":"import { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'fft';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'divideScalar', 'exp', 'tau', 'i', 'dotDivide', 'conj', 'pow', 'ceil', 'log2'];\nexport var createFft = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    multiplyScalar,\n    divideScalar,\n    exp,\n    tau,\n    i: I,\n    dotDivide,\n    conj,\n    pow,\n    ceil,\n    log2\n  } = _ref;\n  /**\n   * Calculate N-dimensional fourier transform\n   *\n   * Syntax:\n   *\n   *     math.fft(arr)\n   *\n   * Examples:\n   *\n   *    math.fft([[1, 0], [1, 0]]) // returns [[{re:2, im:0}, {re:2, im:0}], [{re:0, im:0}, {re:0, im:0}]]\n   *\n   *\n   * See Also:\n   *\n   *      ifft\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @return {Array | Matrix}       N-dimensional fourier transformation of the array\n   */\n  return typed(name, {\n    Array: _ndFft,\n    Matrix: function Matrix(matrix) {\n      return matrix.create(_ndFft(matrix.toArray()));\n    }\n  });\n\n  /**\n   * Perform an N-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n  function _ndFft(arr) {\n    var size = arraySize(arr);\n    if (size.length === 1) return _fft(arr, size[0]);\n    // ndFft along dimension 1,...,N-1 then 1dFft along dimension 0\n    return _1dFft(arr.map(slice => _ndFft(slice, size.slice(1))), 0);\n  }\n\n  /**\n   * Perform an 1-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @param {number} dim     dimension of the array to perform on\n   * @return {Array}         resulting array\n   */\n  function _1dFft(arr, dim) {\n    var size = arraySize(arr);\n    if (dim !== 0) return new Array(size[0]).fill(0).map((_, i) => _1dFft(arr[i], dim - 1));\n    if (size.length === 1) return _fft(arr);\n    function _transpose(arr) {\n      // Swap first 2 dimensions\n      var size = arraySize(arr);\n      return new Array(size[1]).fill(0).map((_, j) => new Array(size[0]).fill(0).map((_, i) => arr[i][j]));\n    }\n    return _transpose(_1dFft(_transpose(arr), 1));\n  }\n  /**\n   * Perform an 1-dimensional non-power-of-2 Fourier transform using Chirp-Z Transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n  function _czt(arr) {\n    var n = arr.length;\n    var w = exp(divideScalar(multiplyScalar(-1, multiplyScalar(I, tau)), n));\n    var chirp = [];\n    for (var i = 1 - n; i < n; i++) {\n      chirp.push(pow(w, divideScalar(pow(i, 2), 2)));\n    }\n    var N2 = pow(2, ceil(log2(n + n - 1)));\n    var xp = [...new Array(n).fill(0).map((_, i) => multiplyScalar(arr[i], chirp[n - 1 + i])), ...new Array(N2 - n).fill(0)];\n    var ichirp = [...new Array(n + n - 1).fill(0).map((_, i) => divideScalar(1, chirp[i])), ...new Array(N2 - (n + n - 1)).fill(0)];\n    var fftXp = _fft(xp);\n    var fftIchirp = _fft(ichirp);\n    var fftProduct = new Array(N2).fill(0).map((_, i) => multiplyScalar(fftXp[i], fftIchirp[i]));\n    var ifftProduct = dotDivide(conj(_ndFft(conj(fftProduct))), N2);\n    var ret = [];\n    for (var _i = n - 1; _i < n + n - 1; _i++) {\n      ret.push(multiplyScalar(ifftProduct[_i], chirp[_i]));\n    }\n    return ret;\n  }\n  /**\n   * Perform an 1-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n  function _fft(arr) {\n    var len = arr.length;\n    if (len === 1) return [arr[0]];\n    if (len % 2 === 0) {\n      var ret = [..._fft(arr.filter((_, i) => i % 2 === 0), len / 2), ..._fft(arr.filter((_, i) => i % 2 === 1), len / 2)];\n      for (var k = 0; k < len / 2; k++) {\n        var p = ret[k];\n        var q = multiplyScalar(ret[k + len / 2], exp(multiplyScalar(multiplyScalar(tau, I), divideScalar(-k, len))));\n        ret[k] = addScalar(p, q);\n        ret[k + len / 2] = addScalar(p, multiplyScalar(-1, q));\n      }\n      return ret;\n    } else {\n      // use chirp-z transform for non-power-of-2 FFT\n      return _czt(arr);\n    }\n    // throw new Error('Can only calculate FFT of power-of-two size')\n  }\n});","map":{"version":3,"names":["arraySize","factory","name","dependencies","createFft","_ref","typed","matrix","addScalar","multiplyScalar","divideScalar","exp","tau","i","I","dotDivide","conj","pow","ceil","log2","Array","_ndFft","Matrix","create","toArray","arr","size","length","_fft","_1dFft","map","slice","dim","fill","_","_transpose","j","_czt","n","w","chirp","push","N2","xp","ichirp","fftXp","fftIchirp","fftProduct","ifftProduct","ret","_i","len","filter","k","p","q"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/matrix/fft.js"],"sourcesContent":["import { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'fft';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'divideScalar', 'exp', 'tau', 'i', 'dotDivide', 'conj', 'pow', 'ceil', 'log2'];\nexport var createFft = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    multiplyScalar,\n    divideScalar,\n    exp,\n    tau,\n    i: I,\n    dotDivide,\n    conj,\n    pow,\n    ceil,\n    log2\n  } = _ref;\n  /**\n   * Calculate N-dimensional fourier transform\n   *\n   * Syntax:\n   *\n   *     math.fft(arr)\n   *\n   * Examples:\n   *\n   *    math.fft([[1, 0], [1, 0]]) // returns [[{re:2, im:0}, {re:2, im:0}], [{re:0, im:0}, {re:0, im:0}]]\n   *\n   *\n   * See Also:\n   *\n   *      ifft\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @return {Array | Matrix}       N-dimensional fourier transformation of the array\n   */\n  return typed(name, {\n    Array: _ndFft,\n    Matrix: function Matrix(matrix) {\n      return matrix.create(_ndFft(matrix.toArray()));\n    }\n  });\n\n  /**\n   * Perform an N-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n  function _ndFft(arr) {\n    var size = arraySize(arr);\n    if (size.length === 1) return _fft(arr, size[0]);\n    // ndFft along dimension 1,...,N-1 then 1dFft along dimension 0\n    return _1dFft(arr.map(slice => _ndFft(slice, size.slice(1))), 0);\n  }\n\n  /**\n   * Perform an 1-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @param {number} dim     dimension of the array to perform on\n   * @return {Array}         resulting array\n   */\n  function _1dFft(arr, dim) {\n    var size = arraySize(arr);\n    if (dim !== 0) return new Array(size[0]).fill(0).map((_, i) => _1dFft(arr[i], dim - 1));\n    if (size.length === 1) return _fft(arr);\n    function _transpose(arr) {\n      // Swap first 2 dimensions\n      var size = arraySize(arr);\n      return new Array(size[1]).fill(0).map((_, j) => new Array(size[0]).fill(0).map((_, i) => arr[i][j]));\n    }\n    return _transpose(_1dFft(_transpose(arr), 1));\n  }\n  /**\n   * Perform an 1-dimensional non-power-of-2 Fourier transform using Chirp-Z Transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n  function _czt(arr) {\n    var n = arr.length;\n    var w = exp(divideScalar(multiplyScalar(-1, multiplyScalar(I, tau)), n));\n    var chirp = [];\n    for (var i = 1 - n; i < n; i++) {\n      chirp.push(pow(w, divideScalar(pow(i, 2), 2)));\n    }\n    var N2 = pow(2, ceil(log2(n + n - 1)));\n    var xp = [...new Array(n).fill(0).map((_, i) => multiplyScalar(arr[i], chirp[n - 1 + i])), ...new Array(N2 - n).fill(0)];\n    var ichirp = [...new Array(n + n - 1).fill(0).map((_, i) => divideScalar(1, chirp[i])), ...new Array(N2 - (n + n - 1)).fill(0)];\n    var fftXp = _fft(xp);\n    var fftIchirp = _fft(ichirp);\n    var fftProduct = new Array(N2).fill(0).map((_, i) => multiplyScalar(fftXp[i], fftIchirp[i]));\n    var ifftProduct = dotDivide(conj(_ndFft(conj(fftProduct))), N2);\n    var ret = [];\n    for (var _i = n - 1; _i < n + n - 1; _i++) {\n      ret.push(multiplyScalar(ifftProduct[_i], chirp[_i]));\n    }\n    return ret;\n  }\n  /**\n   * Perform an 1-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n  function _fft(arr) {\n    var len = arr.length;\n    if (len === 1) return [arr[0]];\n    if (len % 2 === 0) {\n      var ret = [..._fft(arr.filter((_, i) => i % 2 === 0), len / 2), ..._fft(arr.filter((_, i) => i % 2 === 1), len / 2)];\n      for (var k = 0; k < len / 2; k++) {\n        var p = ret[k];\n        var q = multiplyScalar(ret[k + len / 2], exp(multiplyScalar(multiplyScalar(tau, I), divideScalar(-k, len))));\n        ret[k] = addScalar(p, q);\n        ret[k + len / 2] = addScalar(p, multiplyScalar(-1, q));\n      }\n      return ret;\n    } else {\n      // use chirp-z transform for non-power-of-2 FFT\n      return _czt(arr);\n    }\n    // throw new Error('Can only calculate FFT of power-of-two size')\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}