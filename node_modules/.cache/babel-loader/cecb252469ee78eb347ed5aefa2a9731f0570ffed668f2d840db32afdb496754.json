{"ast":null,"code":"import { clone } from '../../utils/object.js';\nimport { format } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'trace';\nvar dependencies = ['typed', 'matrix', 'add'];\nexport var createTrace = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    add\n  } = _ref;\n  /**\n   * Calculate the trace of a matrix: the sum of the elements on the main\n   * diagonal of a square matrix.\n   *\n   * Syntax:\n   *\n   *    math.trace(x)\n   *\n   * Examples:\n   *\n   *    math.trace([[1, 2], [3, 4]]) // returns 5\n   *\n   *    const A = [\n   *      [1, 2, 3],\n   *      [-1, 2, 3],\n   *      [2, 0, 3]\n   *    ]\n   *    math.trace(A) // returns 6\n   *\n   * See also:\n   *\n   *    diag\n   *\n   * @param {Array | Matrix} x  A matrix\n   *\n   * @return {number} The trace of `x`\n   */\n  return typed('trace', {\n    Array: function _arrayTrace(x) {\n      // use dense matrix implementation\n      return _denseTrace(matrix(x));\n    },\n    SparseMatrix: _sparseTrace,\n    DenseMatrix: _denseTrace,\n    any: clone\n  });\n  function _denseTrace(m) {\n    // matrix size & data\n    var size = m._size;\n    var data = m._data;\n\n    // process dimensions\n    switch (size.length) {\n      case 1:\n        // vector\n        if (size[0] === 1) {\n          // return data[0]\n          return clone(data[0]);\n        }\n        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n      case 2:\n        {\n          // two dimensional\n          var rows = size[0];\n          var cols = size[1];\n          if (rows === cols) {\n            // calulate sum\n            var sum = 0;\n            // loop diagonal\n            for (var i = 0; i < rows; i++) {\n              sum = add(sum, data[i][i]);\n            }\n            // return trace\n            return sum;\n          } else {\n            throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n          }\n        }\n      default:\n        // multi dimensional\n        throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');\n    }\n  }\n  function _sparseTrace(m) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    var size = m._size;\n    // check dimensions\n    var rows = size[0];\n    var columns = size[1];\n    // matrix must be square\n    if (rows === columns) {\n      // calulate sum\n      var sum = 0;\n      // check we have data (avoid looping columns)\n      if (values.length > 0) {\n        // loop columns\n        for (var j = 0; j < columns; j++) {\n          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n          var k0 = ptr[j];\n          var k1 = ptr[j + 1];\n          // loop k within [k0, k1[\n          for (var k = k0; k < k1; k++) {\n            // row index\n            var i = index[k];\n            // check row\n            if (i === j) {\n              // accumulate value\n              sum = add(sum, values[k]);\n              // exit loop\n              break;\n            }\n            if (i > j) {\n              // exit loop, no value on the diagonal for column j\n              break;\n            }\n          }\n        }\n      }\n      // return trace\n      return sum;\n    }\n    throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n  }\n});","map":{"version":3,"names":["clone","format","factory","name","dependencies","createTrace","_ref","typed","matrix","add","Array","_arrayTrace","x","_denseTrace","SparseMatrix","_sparseTrace","DenseMatrix","any","m","size","_size","data","_data","length","RangeError","rows","cols","sum","i","values","_values","index","_index","ptr","_ptr","columns","j","k0","k1","k"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/matrix/trace.js"],"sourcesContent":["import { clone } from '../../utils/object.js';\nimport { format } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'trace';\nvar dependencies = ['typed', 'matrix', 'add'];\nexport var createTrace = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    add\n  } = _ref;\n  /**\n   * Calculate the trace of a matrix: the sum of the elements on the main\n   * diagonal of a square matrix.\n   *\n   * Syntax:\n   *\n   *    math.trace(x)\n   *\n   * Examples:\n   *\n   *    math.trace([[1, 2], [3, 4]]) // returns 5\n   *\n   *    const A = [\n   *      [1, 2, 3],\n   *      [-1, 2, 3],\n   *      [2, 0, 3]\n   *    ]\n   *    math.trace(A) // returns 6\n   *\n   * See also:\n   *\n   *    diag\n   *\n   * @param {Array | Matrix} x  A matrix\n   *\n   * @return {number} The trace of `x`\n   */\n  return typed('trace', {\n    Array: function _arrayTrace(x) {\n      // use dense matrix implementation\n      return _denseTrace(matrix(x));\n    },\n    SparseMatrix: _sparseTrace,\n    DenseMatrix: _denseTrace,\n    any: clone\n  });\n  function _denseTrace(m) {\n    // matrix size & data\n    var size = m._size;\n    var data = m._data;\n\n    // process dimensions\n    switch (size.length) {\n      case 1:\n        // vector\n        if (size[0] === 1) {\n          // return data[0]\n          return clone(data[0]);\n        }\n        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n      case 2:\n        {\n          // two dimensional\n          var rows = size[0];\n          var cols = size[1];\n          if (rows === cols) {\n            // calulate sum\n            var sum = 0;\n            // loop diagonal\n            for (var i = 0; i < rows; i++) {\n              sum = add(sum, data[i][i]);\n            }\n            // return trace\n            return sum;\n          } else {\n            throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n          }\n        }\n      default:\n        // multi dimensional\n        throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');\n    }\n  }\n  function _sparseTrace(m) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    var size = m._size;\n    // check dimensions\n    var rows = size[0];\n    var columns = size[1];\n    // matrix must be square\n    if (rows === columns) {\n      // calulate sum\n      var sum = 0;\n      // check we have data (avoid looping columns)\n      if (values.length > 0) {\n        // loop columns\n        for (var j = 0; j < columns; j++) {\n          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n          var k0 = ptr[j];\n          var k1 = ptr[j + 1];\n          // loop k within [k0, k1[\n          for (var k = k0; k < k1; k++) {\n            // row index\n            var i = index[k];\n            // check row\n            if (i === j) {\n              // accumulate value\n              sum = add(sum, values[k]);\n              // exit loop\n              break;\n            }\n            if (i > j) {\n              // exit loop, no value on the diagonal for column j\n              break;\n            }\n          }\n        }\n      }\n      // return trace\n      return sum;\n    }\n    throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}