{"ast":null,"code":"/* eslint-disable no-loss-of-precision */\n\nimport { deepMap } from '../../utils/collection.js';\nimport { sign } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'erf';\nvar dependencies = ['typed'];\nexport var createErf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the erf function of a value using a rational Chebyshev\n   * approximations for different intervals of x.\n   *\n   * This is a translation of W. J. Cody's Fortran implementation from 1987\n   * ( https://www.netlib.org/specfun/erf ). See the AMS publication\n   * \"Rational Chebyshev Approximations for the Error Function\" by W. J. Cody\n   * for an explanation of this process.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.erf(x)\n   *\n   * Examples:\n   *\n   *    math.erf(0.2)    // returns 0.22270258921047847\n   *    math.erf(-0.5)   // returns -0.5204998778130465\n   *    math.erf(4)      // returns 0.9999999845827421\n   *\n   * @param {number | Array | Matrix} x   A real number\n   * @return {number | Array | Matrix}    The erf of `x`\n   */\n  return typed('name', {\n    number: function number(x) {\n      var y = Math.abs(x);\n      if (y >= MAX_NUM) {\n        return sign(x);\n      }\n      if (y <= THRESH) {\n        return sign(x) * erf1(y);\n      }\n      if (y <= 4.0) {\n        return sign(x) * (1 - erfc2(y));\n      }\n      return sign(x) * (1 - erfc3(y));\n    },\n    'Array | Matrix': typed.referToSelf(self => n => deepMap(n, self))\n\n    // TODO: For complex numbers, use the approximation for the Faddeeva function\n    //  from \"More Efficient Computation of the Complex Error Function\" (AMS)\n  });\n\n  /**\n   * Approximates the error function erf() for x <= 0.46875 using this function:\n   *               n\n   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))\n   *              j=0\n   */\n  function erf1(y) {\n    var ysq = y * y;\n    var xnum = P[0][4] * ysq;\n    var xden = ysq;\n    var i;\n    for (i = 0; i < 3; i += 1) {\n      xnum = (xnum + P[0][i]) * ysq;\n      xden = (xden + Q[0][i]) * ysq;\n    }\n    return y * (xnum + P[0][3]) / (xden + Q[0][3]);\n  }\n\n  /**\n   * Approximates the complement of the error function erfc() for\n   * 0.46875 <= x <= 4.0 using this function:\n   *                       n\n   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)\n   *                      j=0\n   */\n  function erfc2(y) {\n    var xnum = P[1][8] * y;\n    var xden = y;\n    var i;\n    for (i = 0; i < 7; i += 1) {\n      xnum = (xnum + P[1][i]) * y;\n      xden = (xden + Q[1][i]) * y;\n    }\n    var result = (xnum + P[1][7]) / (xden + Q[1][7]);\n    var ysq = parseInt(y * 16) / 16;\n    var del = (y - ysq) * (y + ysq);\n    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;\n  }\n\n  /**\n   * Approximates the complement of the error function erfc() for x > 4.0 using\n   * this function:\n   *\n   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +\n   *               n\n   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]\n   *              j=0\n   */\n  function erfc3(y) {\n    var ysq = 1 / (y * y);\n    var xnum = P[2][5] * ysq;\n    var xden = ysq;\n    var i;\n    for (i = 0; i < 4; i += 1) {\n      xnum = (xnum + P[2][i]) * ysq;\n      xden = (xden + Q[2][i]) * ysq;\n    }\n    var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);\n    result = (SQRPI - result) / y;\n    ysq = parseInt(y * 16) / 16;\n    var del = (y - ysq) * (y + ysq);\n    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;\n  }\n});\n\n/**\n * Upper bound for the first approximation interval, 0 <= x <= THRESH\n * @constant\n */\nvar THRESH = 0.46875;\n\n/**\n * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)\n * @constant\n */\nvar SQRPI = 5.6418958354775628695e-1;\n\n/**\n * Coefficients for each term of the numerator sum (p_j) for each approximation\n * interval (see W. J. Cody's paper for more details)\n * @constant\n */\nvar P = [[3.16112374387056560e00, 1.13864154151050156e02, 3.77485237685302021e02, 3.20937758913846947e03, 1.85777706184603153e-1], [5.64188496988670089e-1, 8.88314979438837594e00, 6.61191906371416295e01, 2.98635138197400131e02, 8.81952221241769090e02, 1.71204761263407058e03, 2.05107837782607147e03, 1.23033935479799725e03, 2.15311535474403846e-8], [3.05326634961232344e-1, 3.60344899949804439e-1, 1.25781726111229246e-1, 1.60837851487422766e-2, 6.58749161529837803e-4, 1.63153871373020978e-2]];\n\n/**\n * Coefficients for each term of the denominator sum (q_j) for each approximation\n * interval (see W. J. Cody's paper for more details)\n * @constant\n */\nvar Q = [[2.36012909523441209e01, 2.44024637934444173e02, 1.28261652607737228e03, 2.84423683343917062e03], [1.57449261107098347e01, 1.17693950891312499e02, 5.37181101862009858e02, 1.62138957456669019e03, 3.29079923573345963e03, 4.36261909014324716e03, 3.43936767414372164e03, 1.23033935480374942e03], [2.56852019228982242e00, 1.87295284992346047e00, 5.27905102951428412e-1, 6.05183413124413191e-2, 2.33520497626869185e-3]];\n\n/**\n * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is\n * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will\n * return 1\n */\nvar MAX_NUM = Math.pow(2, 53);","map":{"version":3,"names":["deepMap","sign","factory","name","dependencies","createErf","_ref","typed","number","x","y","Math","abs","MAX_NUM","THRESH","erf1","erfc2","erfc3","referToSelf","self","n","ysq","xnum","P","xden","i","Q","result","parseInt","del","exp","SQRPI","pow"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/special/erf.js"],"sourcesContent":["/* eslint-disable no-loss-of-precision */\n\nimport { deepMap } from '../../utils/collection.js';\nimport { sign } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'erf';\nvar dependencies = ['typed'];\nexport var createErf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the erf function of a value using a rational Chebyshev\n   * approximations for different intervals of x.\n   *\n   * This is a translation of W. J. Cody's Fortran implementation from 1987\n   * ( https://www.netlib.org/specfun/erf ). See the AMS publication\n   * \"Rational Chebyshev Approximations for the Error Function\" by W. J. Cody\n   * for an explanation of this process.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.erf(x)\n   *\n   * Examples:\n   *\n   *    math.erf(0.2)    // returns 0.22270258921047847\n   *    math.erf(-0.5)   // returns -0.5204998778130465\n   *    math.erf(4)      // returns 0.9999999845827421\n   *\n   * @param {number | Array | Matrix} x   A real number\n   * @return {number | Array | Matrix}    The erf of `x`\n   */\n  return typed('name', {\n    number: function number(x) {\n      var y = Math.abs(x);\n      if (y >= MAX_NUM) {\n        return sign(x);\n      }\n      if (y <= THRESH) {\n        return sign(x) * erf1(y);\n      }\n      if (y <= 4.0) {\n        return sign(x) * (1 - erfc2(y));\n      }\n      return sign(x) * (1 - erfc3(y));\n    },\n    'Array | Matrix': typed.referToSelf(self => n => deepMap(n, self))\n\n    // TODO: For complex numbers, use the approximation for the Faddeeva function\n    //  from \"More Efficient Computation of the Complex Error Function\" (AMS)\n  });\n\n  /**\n   * Approximates the error function erf() for x <= 0.46875 using this function:\n   *               n\n   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))\n   *              j=0\n   */\n  function erf1(y) {\n    var ysq = y * y;\n    var xnum = P[0][4] * ysq;\n    var xden = ysq;\n    var i;\n    for (i = 0; i < 3; i += 1) {\n      xnum = (xnum + P[0][i]) * ysq;\n      xden = (xden + Q[0][i]) * ysq;\n    }\n    return y * (xnum + P[0][3]) / (xden + Q[0][3]);\n  }\n\n  /**\n   * Approximates the complement of the error function erfc() for\n   * 0.46875 <= x <= 4.0 using this function:\n   *                       n\n   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)\n   *                      j=0\n   */\n  function erfc2(y) {\n    var xnum = P[1][8] * y;\n    var xden = y;\n    var i;\n    for (i = 0; i < 7; i += 1) {\n      xnum = (xnum + P[1][i]) * y;\n      xden = (xden + Q[1][i]) * y;\n    }\n    var result = (xnum + P[1][7]) / (xden + Q[1][7]);\n    var ysq = parseInt(y * 16) / 16;\n    var del = (y - ysq) * (y + ysq);\n    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;\n  }\n\n  /**\n   * Approximates the complement of the error function erfc() for x > 4.0 using\n   * this function:\n   *\n   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +\n   *               n\n   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]\n   *              j=0\n   */\n  function erfc3(y) {\n    var ysq = 1 / (y * y);\n    var xnum = P[2][5] * ysq;\n    var xden = ysq;\n    var i;\n    for (i = 0; i < 4; i += 1) {\n      xnum = (xnum + P[2][i]) * ysq;\n      xden = (xden + Q[2][i]) * ysq;\n    }\n    var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);\n    result = (SQRPI - result) / y;\n    ysq = parseInt(y * 16) / 16;\n    var del = (y - ysq) * (y + ysq);\n    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;\n  }\n});\n\n/**\n * Upper bound for the first approximation interval, 0 <= x <= THRESH\n * @constant\n */\nvar THRESH = 0.46875;\n\n/**\n * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)\n * @constant\n */\nvar SQRPI = 5.6418958354775628695e-1;\n\n/**\n * Coefficients for each term of the numerator sum (p_j) for each approximation\n * interval (see W. J. Cody's paper for more details)\n * @constant\n */\nvar P = [[3.16112374387056560e00, 1.13864154151050156e02, 3.77485237685302021e02, 3.20937758913846947e03, 1.85777706184603153e-1], [5.64188496988670089e-1, 8.88314979438837594e00, 6.61191906371416295e01, 2.98635138197400131e02, 8.81952221241769090e02, 1.71204761263407058e03, 2.05107837782607147e03, 1.23033935479799725e03, 2.15311535474403846e-8], [3.05326634961232344e-1, 3.60344899949804439e-1, 1.25781726111229246e-1, 1.60837851487422766e-2, 6.58749161529837803e-4, 1.63153871373020978e-2]];\n\n/**\n * Coefficients for each term of the denominator sum (q_j) for each approximation\n * interval (see W. J. Cody's paper for more details)\n * @constant\n */\nvar Q = [[2.36012909523441209e01, 2.44024637934444173e02, 1.28261652607737228e03, 2.84423683343917062e03], [1.57449261107098347e01, 1.17693950891312499e02, 5.37181101862009858e02, 1.62138957456669019e03, 3.29079923573345963e03, 4.36261909014324716e03, 3.43936767414372164e03, 1.23033935480374942e03], [2.56852019228982242e00, 1.87295284992346047e00, 5.27905102951428412e-1, 6.05183413124413191e-2, 2.33520497626869185e-3]];\n\n/**\n * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is\n * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will\n * return 1\n */\nvar MAX_NUM = Math.pow(2, 53);"],"mappings":"AAAA;;AAEA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,IAAI,QAAQ,uBAAuB;AAC5C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,SAAS,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACxE,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAAC,MAAM,EAAE;IACnBC,MAAM,EAAE,SAASA,MAAMA,CAACC,CAAC,EAAE;MACzB,IAAIC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACH,CAAC,CAAC;MACnB,IAAIC,CAAC,IAAIG,OAAO,EAAE;QAChB,OAAOZ,IAAI,CAACQ,CAAC,CAAC;MAChB;MACA,IAAIC,CAAC,IAAII,MAAM,EAAE;QACf,OAAOb,IAAI,CAACQ,CAAC,CAAC,GAAGM,IAAI,CAACL,CAAC,CAAC;MAC1B;MACA,IAAIA,CAAC,IAAI,GAAG,EAAE;QACZ,OAAOT,IAAI,CAACQ,CAAC,CAAC,IAAI,CAAC,GAAGO,KAAK,CAACN,CAAC,CAAC,CAAC;MACjC;MACA,OAAOT,IAAI,CAACQ,CAAC,CAAC,IAAI,CAAC,GAAGQ,KAAK,CAACP,CAAC,CAAC,CAAC;IACjC,CAAC;IACD,gBAAgB,EAAEH,KAAK,CAACW,WAAW,CAACC,IAAI,IAAIC,CAAC,IAAIpB,OAAO,CAACoB,CAAC,EAAED,IAAI,CAAC;;IAEjE;IACA;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;EACE,SAASJ,IAAIA,CAACL,CAAC,EAAE;IACf,IAAIW,GAAG,GAAGX,CAAC,GAAGA,CAAC;IACf,IAAIY,IAAI,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGF,GAAG;IACxB,IAAIG,IAAI,GAAGH,GAAG;IACd,IAAII,CAAC;IACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;MACzBH,IAAI,GAAG,CAACA,IAAI,GAAGC,CAAC,CAAC,CAAC,CAAC,CAACE,CAAC,CAAC,IAAIJ,GAAG;MAC7BG,IAAI,GAAG,CAACA,IAAI,GAAGE,CAAC,CAAC,CAAC,CAAC,CAACD,CAAC,CAAC,IAAIJ,GAAG;IAC/B;IACA,OAAOX,CAAC,IAAIY,IAAI,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIC,IAAI,GAAGE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAChD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAASV,KAAKA,CAACN,CAAC,EAAE;IAChB,IAAIY,IAAI,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGb,CAAC;IACtB,IAAIc,IAAI,GAAGd,CAAC;IACZ,IAAIe,CAAC;IACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;MACzBH,IAAI,GAAG,CAACA,IAAI,GAAGC,CAAC,CAAC,CAAC,CAAC,CAACE,CAAC,CAAC,IAAIf,CAAC;MAC3Bc,IAAI,GAAG,CAACA,IAAI,GAAGE,CAAC,CAAC,CAAC,CAAC,CAACD,CAAC,CAAC,IAAIf,CAAC;IAC7B;IACA,IAAIiB,MAAM,GAAG,CAACL,IAAI,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAKC,IAAI,GAAGE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChD,IAAIL,GAAG,GAAGO,QAAQ,CAAClB,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;IAC/B,IAAImB,GAAG,GAAG,CAACnB,CAAC,GAAGW,GAAG,KAAKX,CAAC,GAAGW,GAAG,CAAC;IAC/B,OAAOV,IAAI,CAACmB,GAAG,CAAC,CAACT,GAAG,GAAGA,GAAG,CAAC,GAAGV,IAAI,CAACmB,GAAG,CAAC,CAACD,GAAG,CAAC,GAAGF,MAAM;EACvD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASV,KAAKA,CAACP,CAAC,EAAE;IAChB,IAAIW,GAAG,GAAG,CAAC,IAAIX,CAAC,GAAGA,CAAC,CAAC;IACrB,IAAIY,IAAI,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGF,GAAG;IACxB,IAAIG,IAAI,GAAGH,GAAG;IACd,IAAII,CAAC;IACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;MACzBH,IAAI,GAAG,CAACA,IAAI,GAAGC,CAAC,CAAC,CAAC,CAAC,CAACE,CAAC,CAAC,IAAIJ,GAAG;MAC7BG,IAAI,GAAG,CAACA,IAAI,GAAGE,CAAC,CAAC,CAAC,CAAC,CAACD,CAAC,CAAC,IAAIJ,GAAG;IAC/B;IACA,IAAIM,MAAM,GAAGN,GAAG,IAAIC,IAAI,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIC,IAAI,GAAGE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtDC,MAAM,GAAG,CAACI,KAAK,GAAGJ,MAAM,IAAIjB,CAAC;IAC7BW,GAAG,GAAGO,QAAQ,CAAClB,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;IAC3B,IAAImB,GAAG,GAAG,CAACnB,CAAC,GAAGW,GAAG,KAAKX,CAAC,GAAGW,GAAG,CAAC;IAC/B,OAAOV,IAAI,CAACmB,GAAG,CAAC,CAACT,GAAG,GAAGA,GAAG,CAAC,GAAGV,IAAI,CAACmB,GAAG,CAAC,CAACD,GAAG,CAAC,GAAGF,MAAM;EACvD;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,IAAIb,MAAM,GAAG,OAAO;;AAEpB;AACA;AACA;AACA;AACA,IAAIiB,KAAK,GAAG,wBAAwB;;AAEpC;AACA;AACA;AACA;AACA;AACA,IAAIR,CAAC,GAAG,CAAC,CAAC,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,CAAC,EAAE,CAAC,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,CAAC,EAAE,CAAC,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,CAAC,CAAC;;AAE9e;AACA;AACA;AACA;AACA;AACA,IAAIG,CAAC,GAAG,CAAC,CAAC,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,CAAC,EAAE,CAAC,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,CAAC,EAAE,CAAC,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,CAAC,CAAC;;AAEta;AACA;AACA;AACA;AACA;AACA,IAAIb,OAAO,GAAGF,IAAI,CAACqB,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}