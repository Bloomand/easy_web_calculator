{"ast":null,"code":"import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setPowerset';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport var createSetPowerset = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index\n  } = _ref;\n  /**\n   * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setPowerset(set)\n   *\n   * Examples:\n   *\n   *    math.setPowerset([1, 2, 3])        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n   *\n   * See also:\n   *\n   *    setCartesian\n   *\n   * @param {Array | Matrix}    a  A (multi)set\n   * @return {Array}    The powerset of the (multi)set\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return empty\n        return [];\n      }\n      var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n      var result = [];\n      var number = 0;\n      while (number.toString(2).length <= b.length) {\n        result.push(_subset(b, number.toString(2).split('').reverse()));\n        number++;\n      }\n      // can not return a matrix, because of the different size of the subarrays\n      return _sort(result);\n    }\n  });\n\n  // create subset\n  function _subset(array, bitarray) {\n    var result = [];\n    for (var i = 0; i < bitarray.length; i++) {\n      if (bitarray[i] === '1') {\n        result.push(array[i]);\n      }\n    }\n    return result;\n  }\n\n  // sort subsests by length\n  function _sort(array) {\n    var temp = [];\n    for (var i = array.length - 1; i > 0; i--) {\n      for (var j = 0; j < i; j++) {\n        if (array[j].length > array[j + 1].length) {\n          temp = array[j];\n          array[j] = array[j + 1];\n          array[j + 1] = temp;\n        }\n      }\n    }\n    return array;\n  }\n});","map":{"version":3,"names":["flatten","factory","name","dependencies","createSetPowerset","_ref","typed","size","subset","compareNatural","Index","ArrayMatrix","a","b","Array","isArray","toArray","sort","result","number","toString","length","push","_subset","split","reverse","_sort","array","bitarray","i","temp","j"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/set/setPowerset.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setPowerset';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport var createSetPowerset = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index\n  } = _ref;\n  /**\n   * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setPowerset(set)\n   *\n   * Examples:\n   *\n   *    math.setPowerset([1, 2, 3])        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n   *\n   * See also:\n   *\n   *    setCartesian\n   *\n   * @param {Array | Matrix}    a  A (multi)set\n   * @return {Array}    The powerset of the (multi)set\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return empty\n        return [];\n      }\n      var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n      var result = [];\n      var number = 0;\n      while (number.toString(2).length <= b.length) {\n        result.push(_subset(b, number.toString(2).split('').reverse()));\n        number++;\n      }\n      // can not return a matrix, because of the different size of the subarrays\n      return _sort(result);\n    }\n  });\n\n  // create subset\n  function _subset(array, bitarray) {\n    var result = [];\n    for (var i = 0; i < bitarray.length; i++) {\n      if (bitarray[i] === '1') {\n        result.push(array[i]);\n      }\n    }\n    return result;\n  }\n\n  // sort subsests by length\n  function _sort(array) {\n    var temp = [];\n    for (var i = array.length - 1; i > 0; i--) {\n      for (var j = 0; j < i; j++) {\n        if (array[j].length > array[j + 1].length) {\n          temp = array[j];\n          array[j] = array[j + 1];\n          array[j + 1] = temp;\n        }\n      }\n    }\n    return array;\n  }\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,aAAa;AACxB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,gBAAgB,EAAE,OAAO,CAAC;AACzE,OAAO,IAAIC,iBAAiB,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAChF,IAAI;IACFC,KAAK;IACLC,IAAI;IACJC,MAAM;IACNC,cAAc;IACdC;EACF,CAAC,GAAGL,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAE,SAASS,WAAWA,CAACC,CAAC,EAAE;MACxC,IAAIJ,MAAM,CAACD,IAAI,CAACK,CAAC,CAAC,EAAE,IAAIF,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QACvC;QACA,OAAO,EAAE;MACX;MACA,IAAIG,CAAC,GAAGb,OAAO,CAACc,KAAK,CAACC,OAAO,CAACH,CAAC,CAAC,GAAGA,CAAC,GAAGA,CAAC,CAACI,OAAO,EAAE,CAAC,CAACC,IAAI,CAACR,cAAc,CAAC;MACxE,IAAIS,MAAM,GAAG,EAAE;MACf,IAAIC,MAAM,GAAG,CAAC;MACd,OAAOA,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACC,MAAM,IAAIR,CAAC,CAACQ,MAAM,EAAE;QAC5CH,MAAM,CAACI,IAAI,CAACC,OAAO,CAACV,CAAC,EAAEM,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACI,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,EAAE,CAAC,CAAC;QAC/DN,MAAM,EAAE;MACV;MACA;MACA,OAAOO,KAAK,CAACR,MAAM,CAAC;IACtB;EACF,CAAC,CAAC;;EAEF;EACA,SAASK,OAAOA,CAACI,KAAK,EAAEC,QAAQ,EAAE;IAChC,IAAIV,MAAM,GAAG,EAAE;IACf,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,CAACP,MAAM,EAAEQ,CAAC,EAAE,EAAE;MACxC,IAAID,QAAQ,CAACC,CAAC,CAAC,KAAK,GAAG,EAAE;QACvBX,MAAM,CAACI,IAAI,CAACK,KAAK,CAACE,CAAC,CAAC,CAAC;MACvB;IACF;IACA,OAAOX,MAAM;EACf;;EAEA;EACA,SAASQ,KAAKA,CAACC,KAAK,EAAE;IACpB,IAAIG,IAAI,GAAG,EAAE;IACb,KAAK,IAAID,CAAC,GAAGF,KAAK,CAACN,MAAM,GAAG,CAAC,EAAEQ,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACzC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,EAAEE,CAAC,EAAE,EAAE;QAC1B,IAAIJ,KAAK,CAACI,CAAC,CAAC,CAACV,MAAM,GAAGM,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC,CAACV,MAAM,EAAE;UACzCS,IAAI,GAAGH,KAAK,CAACI,CAAC,CAAC;UACfJ,KAAK,CAACI,CAAC,CAAC,GAAGJ,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC;UACvBJ,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC,GAAGD,IAAI;QACrB;MACF;IACF;IACA,OAAOH,KAAK;EACd;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}