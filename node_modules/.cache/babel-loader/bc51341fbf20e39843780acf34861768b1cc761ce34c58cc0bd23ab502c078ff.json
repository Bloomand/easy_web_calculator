{"ast":null,"code":"import { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'distance';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'unaryMinus', 'sqrt', 'abs'];\nexport var createDistance = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    unaryMinus,\n    sqrt,\n    abs\n  } = _ref;\n  /**\n    * Calculates:\n    *    The eucledian distance between two points in N-dimensional spaces.\n    *    Distance between point and a line in 2 and 3 dimensional spaces.\n    *    Pairwise distance between a set of 2D or 3D points\n    * NOTE:\n    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)\n    *\n    * Syntax:\n    *\n    *    math.distance([x1,y1], [x2,y2])\n    *    math.distance({pointOneX, pointOneY}, {pointTwoX, pointTwoY})\n    *    math.distance([x1,y1,z1], [x2,y2,z2])\n    *    math.distance({pointOneX, pointOneY, pointOneZ}, {pointTwoX, pointTwoY, pointTwoZ})\n    *    math.distance([x1,y1,z1,a1], [x2,y2,z2,a2])\n    *    math.distance([[x1,y1], [x2,y2], [x3,y3]])\n    *    math.distance([[x1,y1,z1], [x2,y2,z2], [x3,y3,z3]])\n    *    math.distance([x1,y1], [x2,y2,z2])\n    *    math.distance([x1,y1], [x2,y2], [x3,y3])\n    *    math.distance({pointX, pointY}, {lineOnePtX, lineOnePtY}, {lineTwoPtX, lineTwoPtY})\n    *    math.distance([x1,y1,z1], [x0, y0, z0, a, b, c])\n    *    math.distance({pointX, pointY, pointZ}, {x0, y0, z0, a, b, c})\n    *\n    * Examples:\n    *    math.distance([0,0], [4,4])                     // Returns 5.656854249492381\n    *    math.distance(\n    *     {pointOneX: 0, pointOneY: 0},\n    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.7416573867739413\n    *    math.distance(\n    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n    *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2\n    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\n    *    math.distance(\n    *     {pointX: 1, pointY: 4},\n    *     {lineOnePtX: 6, lineOnePtY: 3},\n    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\n    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n    *    math.distance(\n    *     {pointX: 2, pointY: 3, pointZ: 1},\n    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1})       // Returns 2.3204774044612857\n    *\n    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n    * @return {Number | BigNumber} Returns the distance from two/three points\n  */\n  return typed(name, {\n    'Array, Array, Array': function ArrayArrayArray(x, y, z) {\n      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)\n      if (x.length === 2 && y.length === 2 && z.length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n        }\n        if (!_2d(z)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n        }\n        var m = divideScalar(subtract(z[1], z[0]), subtract(y[1], y[0]));\n        var xCoeff = multiplyScalar(multiplyScalar(m, m), y[0]);\n        var yCoeff = unaryMinus(multiplyScalar(m, y[0]));\n        var constant = x[1];\n        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object, Object': function ObjectObjectObject(x, y, z) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');\n        }\n        if (!_2d(z)) {\n          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');\n        }\n        if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {\n          var m = divideScalar(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));\n          var xCoeff = multiplyScalar(multiplyScalar(m, m), y.lineOnePtX);\n          var yCoeff = unaryMinus(multiplyScalar(m, y.lineOnePtX));\n          var constant = x.pointX;\n          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])\n      if (x.length === 2 && y.length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n        }\n        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);\n      } else if (x.length === 3 && y.length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n        }\n        if (!_parametricLine(y)) {\n          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');\n        }\n        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);\n      } else if (x.length === y.length && x.length > 0) {\n        // Point to Point N-dimensions\n        if (!_containsOnlyNumbers(x)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n        if (!_containsOnlyNumbers(y)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n        return _euclideanDistance(x, y);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object': function ObjectObject(x, y) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');\n        }\n        if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {\n          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');\n        }\n        if (!_parametricLine(y)) {\n          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');\n        }\n        if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {\n          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {\n        // Point to Point 2D\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');\n        }\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {\n        // Point to Point 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');\n        }\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    Array: function Array(arr) {\n      if (!_pairwise(arr)) {\n        throw new TypeError('Incorrect array format entered for pairwise distance calculation');\n      }\n      return _distancePairwise(arr);\n    }\n  });\n  function _isNumber(a) {\n    // distance supports numbers and bignumbers\n    return typeof a === 'number' || isBigNumber(a);\n  }\n  function _2d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n    return _isNumber(a[0]) && _isNumber(a[1]);\n  }\n  function _3d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);\n  }\n  function _containsOnlyNumbers(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (!Array.isArray(a)) {\n      a = _objectToArray(a);\n    }\n    return a.every(_isNumber);\n  }\n  function _parametricLine(a) {\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);\n  }\n  function _objectToArray(o) {\n    var keys = Object.keys(o);\n    var a = [];\n    for (var i = 0; i < keys.length; i++) {\n      a.push(o[keys[i]]);\n    }\n    return a;\n  }\n  function _pairwise(a) {\n    // checks for valid arguments passed to _distancePairwise(Array)\n    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {\n      if (a.some(aI => aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]))) {\n        return false;\n      }\n    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {\n      if (a.some(aI => aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]))) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n    return true;\n  }\n  function _distancePointLine2D(x, y, a, b, c) {\n    var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));\n    var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));\n    return divideScalar(num, den);\n  }\n  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {\n    var num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];\n    num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));\n    var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));\n    return divideScalar(num, den);\n  }\n  function _euclideanDistance(x, y) {\n    var vectorSize = x.length;\n    var result = 0;\n    var diff = 0;\n    for (var i = 0; i < vectorSize; i++) {\n      diff = subtract(x[i], y[i]);\n      result = addScalar(multiplyScalar(diff, diff), result);\n    }\n    return sqrt(result);\n  }\n  function _distancePairwise(a) {\n    var result = [];\n    var pointA = [];\n    var pointB = [];\n    for (var i = 0; i < a.length - 1; i++) {\n      for (var j = i + 1; j < a.length; j++) {\n        if (a[0].length === 2) {\n          pointA = [a[i][0], a[i][1]];\n          pointB = [a[j][0], a[j][1]];\n        } else if (a[0].length === 3) {\n          pointA = [a[i][0], a[i][1], a[i][2]];\n          pointB = [a[j][0], a[j][1], a[j][2]];\n        }\n        result.push(_euclideanDistance(pointA, pointB));\n      }\n    }\n    return result;\n  }\n});","map":{"version":3,"names":["isBigNumber","factory","name","dependencies","createDistance","_ref","typed","addScalar","subtract","multiplyScalar","divideScalar","unaryMinus","sqrt","abs","ArrayArrayArray","x","y","z","length","_2d","TypeError","m","xCoeff","yCoeff","constant","_distancePointLine2D","ObjectObjectObject","Object","keys","lineTwoPtY","lineTwoPtX","lineOnePtY","lineOnePtX","pointX","pointY","ArrayArray","_3d","_parametricLine","_distancePointLine3D","_containsOnlyNumbers","_euclideanDistance","ObjectObject","xCoeffLine","yCoeffLine","pointZ","x0","y0","z0","a","b","c","pointOneX","pointOneY","pointTwoX","pointTwoY","pointOneZ","pointTwoZ","Array","arr","_pairwise","_distancePairwise","_isNumber","constructor","_objectToArray","isArray","every","o","i","push","some","aI","num","den","vectorSize","result","diff","pointA","pointB","j"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/geometry/distance.js"],"sourcesContent":["import { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'distance';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'unaryMinus', 'sqrt', 'abs'];\nexport var createDistance = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    unaryMinus,\n    sqrt,\n    abs\n  } = _ref;\n  /**\n    * Calculates:\n    *    The eucledian distance between two points in N-dimensional spaces.\n    *    Distance between point and a line in 2 and 3 dimensional spaces.\n    *    Pairwise distance between a set of 2D or 3D points\n    * NOTE:\n    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)\n    *\n    * Syntax:\n    *\n    *    math.distance([x1,y1], [x2,y2])\n    *    math.distance({pointOneX, pointOneY}, {pointTwoX, pointTwoY})\n    *    math.distance([x1,y1,z1], [x2,y2,z2])\n    *    math.distance({pointOneX, pointOneY, pointOneZ}, {pointTwoX, pointTwoY, pointTwoZ})\n    *    math.distance([x1,y1,z1,a1], [x2,y2,z2,a2])\n    *    math.distance([[x1,y1], [x2,y2], [x3,y3]])\n    *    math.distance([[x1,y1,z1], [x2,y2,z2], [x3,y3,z3]])\n    *    math.distance([x1,y1], [x2,y2,z2])\n    *    math.distance([x1,y1], [x2,y2], [x3,y3])\n    *    math.distance({pointX, pointY}, {lineOnePtX, lineOnePtY}, {lineTwoPtX, lineTwoPtY})\n    *    math.distance([x1,y1,z1], [x0, y0, z0, a, b, c])\n    *    math.distance({pointX, pointY, pointZ}, {x0, y0, z0, a, b, c})\n    *\n    * Examples:\n    *    math.distance([0,0], [4,4])                     // Returns 5.656854249492381\n    *    math.distance(\n    *     {pointOneX: 0, pointOneY: 0},\n    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.7416573867739413\n    *    math.distance(\n    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n    *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2\n    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\n    *    math.distance(\n    *     {pointX: 1, pointY: 4},\n    *     {lineOnePtX: 6, lineOnePtY: 3},\n    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\n    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n    *    math.distance(\n    *     {pointX: 2, pointY: 3, pointZ: 1},\n    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1})       // Returns 2.3204774044612857\n    *\n    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n    * @return {Number | BigNumber} Returns the distance from two/three points\n  */\n  return typed(name, {\n    'Array, Array, Array': function ArrayArrayArray(x, y, z) {\n      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)\n      if (x.length === 2 && y.length === 2 && z.length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n        }\n        if (!_2d(z)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n        }\n        var m = divideScalar(subtract(z[1], z[0]), subtract(y[1], y[0]));\n        var xCoeff = multiplyScalar(multiplyScalar(m, m), y[0]);\n        var yCoeff = unaryMinus(multiplyScalar(m, y[0]));\n        var constant = x[1];\n        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object, Object': function ObjectObjectObject(x, y, z) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');\n        }\n        if (!_2d(z)) {\n          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');\n        }\n        if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {\n          var m = divideScalar(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));\n          var xCoeff = multiplyScalar(multiplyScalar(m, m), y.lineOnePtX);\n          var yCoeff = unaryMinus(multiplyScalar(m, y.lineOnePtX));\n          var constant = x.pointX;\n          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])\n      if (x.length === 2 && y.length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n        }\n        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);\n      } else if (x.length === 3 && y.length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n        }\n        if (!_parametricLine(y)) {\n          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');\n        }\n        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);\n      } else if (x.length === y.length && x.length > 0) {\n        // Point to Point N-dimensions\n        if (!_containsOnlyNumbers(x)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n        if (!_containsOnlyNumbers(y)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n        return _euclideanDistance(x, y);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object': function ObjectObject(x, y) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');\n        }\n        if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {\n          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');\n        }\n        if (!_parametricLine(y)) {\n          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');\n        }\n        if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {\n          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {\n        // Point to Point 2D\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');\n        }\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {\n        // Point to Point 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');\n        }\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    Array: function Array(arr) {\n      if (!_pairwise(arr)) {\n        throw new TypeError('Incorrect array format entered for pairwise distance calculation');\n      }\n      return _distancePairwise(arr);\n    }\n  });\n  function _isNumber(a) {\n    // distance supports numbers and bignumbers\n    return typeof a === 'number' || isBigNumber(a);\n  }\n  function _2d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n    return _isNumber(a[0]) && _isNumber(a[1]);\n  }\n  function _3d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);\n  }\n  function _containsOnlyNumbers(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (!Array.isArray(a)) {\n      a = _objectToArray(a);\n    }\n    return a.every(_isNumber);\n  }\n  function _parametricLine(a) {\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);\n  }\n  function _objectToArray(o) {\n    var keys = Object.keys(o);\n    var a = [];\n    for (var i = 0; i < keys.length; i++) {\n      a.push(o[keys[i]]);\n    }\n    return a;\n  }\n  function _pairwise(a) {\n    // checks for valid arguments passed to _distancePairwise(Array)\n    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {\n      if (a.some(aI => aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]))) {\n        return false;\n      }\n    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {\n      if (a.some(aI => aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]))) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n    return true;\n  }\n  function _distancePointLine2D(x, y, a, b, c) {\n    var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));\n    var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));\n    return divideScalar(num, den);\n  }\n  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {\n    var num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];\n    num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));\n    var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));\n    return divideScalar(num, den);\n  }\n  function _euclideanDistance(x, y) {\n    var vectorSize = x.length;\n    var result = 0;\n    var diff = 0;\n    for (var i = 0; i < vectorSize; i++) {\n      diff = subtract(x[i], y[i]);\n      result = addScalar(multiplyScalar(diff, diff), result);\n    }\n    return sqrt(result);\n  }\n  function _distancePairwise(a) {\n    var result = [];\n    var pointA = [];\n    var pointB = [];\n    for (var i = 0; i < a.length - 1; i++) {\n      for (var j = i + 1; j < a.length; j++) {\n        if (a[0].length === 2) {\n          pointA = [a[i][0], a[i][1]];\n          pointB = [a[j][0], a[j][1]];\n        } else if (a[0].length === 3) {\n          pointA = [a[i][0], a[i][1], a[i][2]];\n          pointB = [a[j][0], a[j][1], a[j][2]];\n        }\n        result.push(_euclideanDistance(pointA, pointB));\n      }\n    }\n    return result;\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}