{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'lyap';\nvar dependencies = ['typed', 'matrix', 'sylvester', 'multiply', 'transpose'];\nexport var createLyap = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    sylvester,\n    multiply,\n    transpose\n  } = _ref;\n  /**\n   *\n   * Solves the Continuous-time Lyapunov equation AP+PA'+Q=0 for P, where\n   * Q is an input matrix. When Q is symmetric, P is also symmetric. Notice\n   * that different equivalent definitions exist for the Continuous-time\n   * Lyapunov equation.\n   * https://en.wikipedia.org/wiki/Lyapunov_equation\n   *\n   * Syntax:\n   *\n   *     math.lyap(A, Q)\n   *\n   * Examples:\n   *\n   *     const A = [[-2, 0], [1, -4]]\n   *     const Q = [[3, 1], [1, 3]]\n   *     const P = math.lyap(A, Q)\n   *\n   * See also:\n   *\n   *     sylvester, schur\n   *\n   * @param {Matrix | Array} A  Matrix A\n   * @param {Matrix | Array} Q  Matrix Q\n   * @return {Matrix | Array} Matrix P solution to the Continuous-time Lyapunov equation AP+PA'=Q\n   */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(A, Q) {\n      return sylvester(A, transpose(A), multiply(-1, Q));\n    },\n    'Array, Matrix': function ArrayMatrix(A, Q) {\n      return sylvester(matrix(A), transpose(matrix(A)), multiply(-1, Q));\n    },\n    'Matrix, Array': function MatrixArray(A, Q) {\n      return sylvester(A, transpose(matrix(A)), matrix(multiply(-1, Q)));\n    },\n    'Array, Array': function ArrayArray(A, Q) {\n      return sylvester(matrix(A), transpose(matrix(A)), matrix(multiply(-1, Q))).toArray();\n    }\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createLyap","_ref","typed","matrix","sylvester","multiply","transpose","MatrixMatrix","A","Q","ArrayMatrix","MatrixArray","ArrayArray","toArray"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/algebra/lyap.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'lyap';\nvar dependencies = ['typed', 'matrix', 'sylvester', 'multiply', 'transpose'];\nexport var createLyap = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    sylvester,\n    multiply,\n    transpose\n  } = _ref;\n  /**\n   *\n   * Solves the Continuous-time Lyapunov equation AP+PA'+Q=0 for P, where\n   * Q is an input matrix. When Q is symmetric, P is also symmetric. Notice\n   * that different equivalent definitions exist for the Continuous-time\n   * Lyapunov equation.\n   * https://en.wikipedia.org/wiki/Lyapunov_equation\n   *\n   * Syntax:\n   *\n   *     math.lyap(A, Q)\n   *\n   * Examples:\n   *\n   *     const A = [[-2, 0], [1, -4]]\n   *     const Q = [[3, 1], [1, 3]]\n   *     const P = math.lyap(A, Q)\n   *\n   * See also:\n   *\n   *     sylvester, schur\n   *\n   * @param {Matrix | Array} A  Matrix A\n   * @param {Matrix | Array} Q  Matrix Q\n   * @return {Matrix | Array} Matrix P solution to the Continuous-time Lyapunov equation AP+PA'=Q\n   */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(A, Q) {\n      return sylvester(A, transpose(A), multiply(-1, Q));\n    },\n    'Array, Matrix': function ArrayMatrix(A, Q) {\n      return sylvester(matrix(A), transpose(matrix(A)), multiply(-1, Q));\n    },\n    'Matrix, Array': function MatrixArray(A, Q) {\n      return sylvester(A, transpose(matrix(A)), matrix(multiply(-1, Q)));\n    },\n    'Array, Array': function ArrayArray(A, Q) {\n      return sylvester(matrix(A), transpose(matrix(A)), matrix(multiply(-1, Q))).toArray();\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,CAAC;AAC5E,OAAO,IAAIC,UAAU,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,SAAS;IACTC,QAAQ;IACRC;EACF,CAAC,GAAGL,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAE,SAASS,YAAYA,CAACC,CAAC,EAAEC,CAAC,EAAE;MAC5C,OAAOL,SAAS,CAACI,CAAC,EAAEF,SAAS,CAACE,CAAC,CAAC,EAAEH,QAAQ,CAAC,CAAC,CAAC,EAAEI,CAAC,CAAC,CAAC;IACpD,CAAC;IACD,eAAe,EAAE,SAASC,WAAWA,CAACF,CAAC,EAAEC,CAAC,EAAE;MAC1C,OAAOL,SAAS,CAACD,MAAM,CAACK,CAAC,CAAC,EAAEF,SAAS,CAACH,MAAM,CAACK,CAAC,CAAC,CAAC,EAAEH,QAAQ,CAAC,CAAC,CAAC,EAAEI,CAAC,CAAC,CAAC;IACpE,CAAC;IACD,eAAe,EAAE,SAASE,WAAWA,CAACH,CAAC,EAAEC,CAAC,EAAE;MAC1C,OAAOL,SAAS,CAACI,CAAC,EAAEF,SAAS,CAACH,MAAM,CAACK,CAAC,CAAC,CAAC,EAAEL,MAAM,CAACE,QAAQ,CAAC,CAAC,CAAC,EAAEI,CAAC,CAAC,CAAC,CAAC;IACpE,CAAC;IACD,cAAc,EAAE,SAASG,UAAUA,CAACJ,CAAC,EAAEC,CAAC,EAAE;MACxC,OAAOL,SAAS,CAACD,MAAM,CAACK,CAAC,CAAC,EAAEF,SAAS,CAACH,MAAM,CAACK,CAAC,CAAC,CAAC,EAAEL,MAAM,CAACE,QAAQ,CAAC,CAAC,CAAC,EAAEI,CAAC,CAAC,CAAC,CAAC,CAACI,OAAO,EAAE;IACtF;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}