{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'polynomialRoot';\nvar dependencies = ['typed', 'isZero', 'equalScalar', 'add', 'subtract', 'multiply', 'divide', 'sqrt', 'unaryMinus', 'cbrt', 'typeOf', 'im', 're'];\nexport var createPolynomialRoot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isZero,\n    equalScalar,\n    add,\n    subtract,\n    multiply,\n    divide,\n    sqrt,\n    unaryMinus,\n    cbrt,\n    typeOf,\n    im,\n    re\n  } = _ref;\n  /**\n   * Finds the numerical values of the distinct roots of a polynomial with real or complex coefficients.\n   * Currently operates only on linear, quadratic, and cubic polynomials using the standard\n   * formulas for the roots.\n   *\n   * Syntax:\n   *\n   *     polynomialRoot(constant, linearCoeff, quadraticCoeff, cubicCoeff)\n   *\n   * Examples:\n   *     // linear\n   *     math.polynomialRoot(6, 3)                                        // [-2]\n   *     math.polynomialRoot(math.complex(6,3), 3)                        // [-2 - i]\n   *     math.polynomialRoot(math.complex(6,3), math.complex(2,1))        // [-3 + 0i]\n   *     // quadratic\n   *     math.polynomialRoot(2, -3, 1)                                    // [2, 1]\n   *     math.polynomialRoot(8, 8, 2)                                     // [-2]\n   *     math.polynomialRoot(-2, 0, 1)                                    // [1.4142135623730951, -1.4142135623730951]\n   *     math.polynomialRoot(2, -2, 1)                                    // [1 + i, 1 - i]\n   *     math.polynomialRoot(math.complex(1,3), math.complex(-3, -2), 1)  // [2 + i, 1 + i]\n   *     // cubic\n   *     math.polynomialRoot(-6, 11, -6, 1)                               // [1, 3, 2]\n   *     math.polynomialRoot(-8, 0, 0, 1)                                 // [-1 - 1.7320508075688774i, 2, -1 + 1.7320508075688774i]\n   *     math.polynomialRoot(0, 8, 8, 2)                                  // [0, -2]\n   *     math.polynomialRoot(1, 1, 1, 1)                                  // [-1 + 0i, 0 - i, 0 + i]\n   *\n   * See also:\n   *     cbrt, sqrt\n   *\n   * @param {... number | Complex} coeffs\n   *     The coefficients of the polynomial, starting with with the constant coefficent, followed\n   *     by the linear coefficient and subsequent coefficients of increasing powers.\n   * @return {Array} The distinct roots of the polynomial\n   */\n\n  return typed(name, {\n    'number|Complex, ...number|Complex': (constant, restCoeffs) => {\n      var coeffs = [constant, ...restCoeffs];\n      while (coeffs.length > 0 && isZero(coeffs[coeffs.length - 1])) {\n        coeffs.pop();\n      }\n      if (coeffs.length < 2) {\n        throw new RangeError(\"Polynomial [\".concat(constant, \", \").concat(restCoeffs, \"] must have a non-zero non-constant coefficient\"));\n      }\n      switch (coeffs.length) {\n        case 2:\n          // linear\n          return [unaryMinus(divide(coeffs[0], coeffs[1]))];\n        case 3:\n          {\n            // quadratic\n            var [c, b, a] = coeffs;\n            var denom = multiply(2, a);\n            var d1 = multiply(b, b);\n            var d2 = multiply(4, a, c);\n            if (equalScalar(d1, d2)) return [divide(unaryMinus(b), denom)];\n            var discriminant = sqrt(subtract(d1, d2));\n            return [divide(subtract(discriminant, b), denom), divide(subtract(unaryMinus(discriminant), b), denom)];\n          }\n        case 4:\n          {\n            // cubic, cf. https://en.wikipedia.org/wiki/Cubic_equation\n            var [d, _c, _b, _a] = coeffs;\n            var _denom = unaryMinus(multiply(3, _a));\n            var D0_1 = multiply(_b, _b);\n            var D0_2 = multiply(3, _a, _c);\n            var D1_1 = add(multiply(2, _b, _b, _b), multiply(27, _a, _a, d));\n            var D1_2 = multiply(9, _a, _b, _c);\n            if (equalScalar(D0_1, D0_2) && equalScalar(D1_1, D1_2)) {\n              return [divide(_b, _denom)];\n            }\n            var Delta0 = subtract(D0_1, D0_2);\n            var Delta1 = subtract(D1_1, D1_2);\n            var discriminant1 = add(multiply(18, _a, _b, _c, d), multiply(_b, _b, _c, _c));\n            var discriminant2 = add(multiply(4, _b, _b, _b, d), multiply(4, _a, _c, _c, _c), multiply(27, _a, _a, d, d));\n            if (equalScalar(discriminant1, discriminant2)) {\n              return [divide(subtract(multiply(4, _a, _b, _c), add(multiply(9, _a, _a, d), multiply(_b, _b, _b))), multiply(_a, Delta0)),\n              // simple root\n              divide(subtract(multiply(9, _a, d), multiply(_b, _c)), multiply(2, Delta0)) // double root\n              ];\n            }\n            // OK, we have three distinct roots\n            var Ccubed;\n            if (equalScalar(D0_1, D0_2)) {\n              Ccubed = Delta1;\n            } else {\n              Ccubed = divide(add(Delta1, sqrt(subtract(multiply(Delta1, Delta1), multiply(4, Delta0, Delta0, Delta0)))), 2);\n            }\n            var allRoots = true;\n            var rawRoots = cbrt(Ccubed, allRoots).toArray().map(C => divide(add(_b, C, divide(Delta0, C)), _denom));\n            return rawRoots.map(r => {\n              if (typeOf(r) === 'Complex' && equalScalar(re(r), re(r) + im(r))) {\n                return re(r);\n              }\n              return r;\n            });\n          }\n        default:\n          throw new RangeError(\"only implemented for cubic or lower-order polynomials, not \".concat(coeffs));\n      }\n    }\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createPolynomialRoot","_ref","typed","isZero","equalScalar","add","subtract","multiply","divide","sqrt","unaryMinus","cbrt","typeOf","im","re","number|Complex, ...number|Complex","constant","restCoeffs","coeffs","length","pop","RangeError","concat","c","b","a","denom","d1","d2","discriminant","d","_c","_b","_a","_denom","D0_1","D0_2","D1_1","D1_2","Delta0","Delta1","discriminant1","discriminant2","Ccubed","allRoots","rawRoots","toArray","map","C","r"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/algebra/polynomialRoot.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'polynomialRoot';\nvar dependencies = ['typed', 'isZero', 'equalScalar', 'add', 'subtract', 'multiply', 'divide', 'sqrt', 'unaryMinus', 'cbrt', 'typeOf', 'im', 're'];\nexport var createPolynomialRoot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isZero,\n    equalScalar,\n    add,\n    subtract,\n    multiply,\n    divide,\n    sqrt,\n    unaryMinus,\n    cbrt,\n    typeOf,\n    im,\n    re\n  } = _ref;\n  /**\n   * Finds the numerical values of the distinct roots of a polynomial with real or complex coefficients.\n   * Currently operates only on linear, quadratic, and cubic polynomials using the standard\n   * formulas for the roots.\n   *\n   * Syntax:\n   *\n   *     polynomialRoot(constant, linearCoeff, quadraticCoeff, cubicCoeff)\n   *\n   * Examples:\n   *     // linear\n   *     math.polynomialRoot(6, 3)                                        // [-2]\n   *     math.polynomialRoot(math.complex(6,3), 3)                        // [-2 - i]\n   *     math.polynomialRoot(math.complex(6,3), math.complex(2,1))        // [-3 + 0i]\n   *     // quadratic\n   *     math.polynomialRoot(2, -3, 1)                                    // [2, 1]\n   *     math.polynomialRoot(8, 8, 2)                                     // [-2]\n   *     math.polynomialRoot(-2, 0, 1)                                    // [1.4142135623730951, -1.4142135623730951]\n   *     math.polynomialRoot(2, -2, 1)                                    // [1 + i, 1 - i]\n   *     math.polynomialRoot(math.complex(1,3), math.complex(-3, -2), 1)  // [2 + i, 1 + i]\n   *     // cubic\n   *     math.polynomialRoot(-6, 11, -6, 1)                               // [1, 3, 2]\n   *     math.polynomialRoot(-8, 0, 0, 1)                                 // [-1 - 1.7320508075688774i, 2, -1 + 1.7320508075688774i]\n   *     math.polynomialRoot(0, 8, 8, 2)                                  // [0, -2]\n   *     math.polynomialRoot(1, 1, 1, 1)                                  // [-1 + 0i, 0 - i, 0 + i]\n   *\n   * See also:\n   *     cbrt, sqrt\n   *\n   * @param {... number | Complex} coeffs\n   *     The coefficients of the polynomial, starting with with the constant coefficent, followed\n   *     by the linear coefficient and subsequent coefficients of increasing powers.\n   * @return {Array} The distinct roots of the polynomial\n   */\n\n  return typed(name, {\n    'number|Complex, ...number|Complex': (constant, restCoeffs) => {\n      var coeffs = [constant, ...restCoeffs];\n      while (coeffs.length > 0 && isZero(coeffs[coeffs.length - 1])) {\n        coeffs.pop();\n      }\n      if (coeffs.length < 2) {\n        throw new RangeError(\"Polynomial [\".concat(constant, \", \").concat(restCoeffs, \"] must have a non-zero non-constant coefficient\"));\n      }\n      switch (coeffs.length) {\n        case 2:\n          // linear\n          return [unaryMinus(divide(coeffs[0], coeffs[1]))];\n        case 3:\n          {\n            // quadratic\n            var [c, b, a] = coeffs;\n            var denom = multiply(2, a);\n            var d1 = multiply(b, b);\n            var d2 = multiply(4, a, c);\n            if (equalScalar(d1, d2)) return [divide(unaryMinus(b), denom)];\n            var discriminant = sqrt(subtract(d1, d2));\n            return [divide(subtract(discriminant, b), denom), divide(subtract(unaryMinus(discriminant), b), denom)];\n          }\n        case 4:\n          {\n            // cubic, cf. https://en.wikipedia.org/wiki/Cubic_equation\n            var [d, _c, _b, _a] = coeffs;\n            var _denom = unaryMinus(multiply(3, _a));\n            var D0_1 = multiply(_b, _b);\n            var D0_2 = multiply(3, _a, _c);\n            var D1_1 = add(multiply(2, _b, _b, _b), multiply(27, _a, _a, d));\n            var D1_2 = multiply(9, _a, _b, _c);\n            if (equalScalar(D0_1, D0_2) && equalScalar(D1_1, D1_2)) {\n              return [divide(_b, _denom)];\n            }\n            var Delta0 = subtract(D0_1, D0_2);\n            var Delta1 = subtract(D1_1, D1_2);\n            var discriminant1 = add(multiply(18, _a, _b, _c, d), multiply(_b, _b, _c, _c));\n            var discriminant2 = add(multiply(4, _b, _b, _b, d), multiply(4, _a, _c, _c, _c), multiply(27, _a, _a, d, d));\n            if (equalScalar(discriminant1, discriminant2)) {\n              return [divide(subtract(multiply(4, _a, _b, _c), add(multiply(9, _a, _a, d), multiply(_b, _b, _b))), multiply(_a, Delta0)),\n              // simple root\n              divide(subtract(multiply(9, _a, d), multiply(_b, _c)), multiply(2, Delta0)) // double root\n              ];\n            }\n            // OK, we have three distinct roots\n            var Ccubed;\n            if (equalScalar(D0_1, D0_2)) {\n              Ccubed = Delta1;\n            } else {\n              Ccubed = divide(add(Delta1, sqrt(subtract(multiply(Delta1, Delta1), multiply(4, Delta0, Delta0, Delta0)))), 2);\n            }\n            var allRoots = true;\n            var rawRoots = cbrt(Ccubed, allRoots).toArray().map(C => divide(add(_b, C, divide(Delta0, C)), _denom));\n            return rawRoots.map(r => {\n              if (typeOf(r) === 'Complex' && equalScalar(re(r), re(r) + im(r))) {\n                return re(r);\n              }\n              return r;\n            });\n          }\n        default:\n          throw new RangeError(\"only implemented for cubic or lower-order polynomials, not \".concat(coeffs));\n      }\n    }\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}