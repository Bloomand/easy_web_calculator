{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isNumber } from '../../utils/is.js';\nvar name = 'stirlingS2';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'number', '?bignumber', 'larger'];\nexport var createStirlingS2 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    factorial,\n    combinations,\n    isNegative,\n    isInteger,\n    number,\n    bignumber,\n    larger\n  } = _ref;\n  var smallCache = [];\n  var bigCache = [];\n  /**\n   * The Stirling numbers of the second kind, counts the number of ways to partition\n   * a set of n labelled objects into k nonempty unlabelled subsets.\n   * stirlingS2 only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   *  If n = k or k = 1 <= n, then s(n,k) = 1\n   *  If k = 0 < n, then s(n,k) = 0\n   *\n   * Note that if either n or k is supplied as a BigNumber, the result will be\n   * as well.\n   *\n   * Syntax:\n   *\n   *   math.stirlingS2(n, k)\n   *\n   * Examples:\n   *\n   *    math.stirlingS2(5, 3) //returns 25\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     S(n,k)\n   */\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {\n        throw new TypeError('Non-negative integer value expected in function stirlingS2');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function stirlingS2');\n      }\n      var big = !(isNumber(n) && isNumber(k));\n      var cache = big ? bigCache : smallCache;\n      var make = big ? bignumber : number;\n      var nn = number(n);\n      var nk = number(k);\n      /* See if we already have the value: */\n      if (cache[nn] && cache[nn].length > nk) {\n        return cache[nn][nk];\n      }\n      /* Fill the cache */\n      for (var m = 0; m <= nn; ++m) {\n        if (!cache[m]) {\n          cache[m] = [m === 0 ? make(1) : make(0)];\n        }\n        if (m === 0) continue;\n        var row = cache[m];\n        var prev = cache[m - 1];\n        for (var i = row.length; i <= m && i <= nk; ++i) {\n          if (i === m) {\n            row[i] = 1;\n          } else {\n            row[i] = addScalar(multiplyScalar(make(i), prev[i]), prev[i - 1]);\n          }\n        }\n      }\n      return cache[nn][nk];\n    }\n  });\n});","map":{"version":3,"names":["factory","isNumber","name","dependencies","createStirlingS2","_ref","typed","addScalar","subtract","multiplyScalar","divideScalar","pow","factorial","combinations","isNegative","isInteger","number","bignumber","larger","smallCache","bigCache","numberBigNumberNumberBigNumber","n","k","TypeError","big","cache","make","nn","nk","length","m","row","prev","i"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/combinatorics/stirlingS2.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isNumber } from '../../utils/is.js';\nvar name = 'stirlingS2';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'number', '?bignumber', 'larger'];\nexport var createStirlingS2 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    factorial,\n    combinations,\n    isNegative,\n    isInteger,\n    number,\n    bignumber,\n    larger\n  } = _ref;\n  var smallCache = [];\n  var bigCache = [];\n  /**\n   * The Stirling numbers of the second kind, counts the number of ways to partition\n   * a set of n labelled objects into k nonempty unlabelled subsets.\n   * stirlingS2 only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   *  If n = k or k = 1 <= n, then s(n,k) = 1\n   *  If k = 0 < n, then s(n,k) = 0\n   *\n   * Note that if either n or k is supplied as a BigNumber, the result will be\n   * as well.\n   *\n   * Syntax:\n   *\n   *   math.stirlingS2(n, k)\n   *\n   * Examples:\n   *\n   *    math.stirlingS2(5, 3) //returns 25\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     S(n,k)\n   */\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {\n        throw new TypeError('Non-negative integer value expected in function stirlingS2');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function stirlingS2');\n      }\n      var big = !(isNumber(n) && isNumber(k));\n      var cache = big ? bigCache : smallCache;\n      var make = big ? bignumber : number;\n      var nn = number(n);\n      var nk = number(k);\n      /* See if we already have the value: */\n      if (cache[nn] && cache[nn].length > nk) {\n        return cache[nn][nk];\n      }\n      /* Fill the cache */\n      for (var m = 0; m <= nn; ++m) {\n        if (!cache[m]) {\n          cache[m] = [m === 0 ? make(1) : make(0)];\n        }\n        if (m === 0) continue;\n        var row = cache[m];\n        var prev = cache[m - 1];\n        for (var i = row.length; i <= m && i <= nk; ++i) {\n          if (i === m) {\n            row[i] = 1;\n          } else {\n            row[i] = addScalar(multiplyScalar(make(i), prev[i]), prev[i - 1]);\n          }\n        }\n      }\n      return cache[nn][nk];\n    }\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}