{"ast":null,"code":"import { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nimport { forEach } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { compileInlineExpression } from './utils/compileInlineExpression.js';\nvar name = 'forEach';\nvar dependencies = ['typed'];\nexport var createForEachTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Attach a transform function to math.forEach\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  function forEachTransform(args, math, scope) {\n    var x, callback;\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n    if (args[1]) {\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\n        // a function pointer, like forEach([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )\n        callback = compileInlineExpression(args[1], math, scope);\n      }\n    }\n    return _forEach(x, callback);\n  }\n  forEachTransform.rawArgs = true;\n\n  // one-based version of forEach\n  var _forEach = typed('forEach', {\n    'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {\n      // figure out what number of arguments the callback function expects\n      var args = maxArgumentCount(callback);\n      var recurse = function recurse(value, index) {\n        if (Array.isArray(value)) {\n          forEach(value, function (child, i) {\n            // we create a copy of the index array and append the new index value\n            recurse(child, index.concat(i + 1)); // one based index, hence i+1\n          });\n        } else {\n          // invoke the callback function with the right number of arguments\n          if (args === 1) {\n            callback(value);\n          } else if (args === 2) {\n            callback(value, index);\n          } else {\n            // 3 or -1\n            callback(value, index, array);\n          }\n        }\n      };\n      recurse(array.valueOf(), []); // pass Array\n    }\n  });\n\n  return forEachTransform;\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"names":["isFunctionAssignmentNode","isSymbolNode","maxArgumentCount","forEach","factory","compileInlineExpression","name","dependencies","createForEachTransform","_ref","typed","forEachTransform","args","math","scope","x","callback","compile","evaluate","_forEach","rawArgs","ArrayMatrixFunction","array","recurse","value","index","Array","isArray","child","i","concat","valueOf","isTransformFunction"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/expression/transform/forEach.transform.js"],"sourcesContent":["import { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nimport { forEach } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { compileInlineExpression } from './utils/compileInlineExpression.js';\nvar name = 'forEach';\nvar dependencies = ['typed'];\nexport var createForEachTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Attach a transform function to math.forEach\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  function forEachTransform(args, math, scope) {\n    var x, callback;\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n    if (args[1]) {\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\n        // a function pointer, like forEach([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )\n        callback = compileInlineExpression(args[1], math, scope);\n      }\n    }\n    return _forEach(x, callback);\n  }\n  forEachTransform.rawArgs = true;\n\n  // one-based version of forEach\n  var _forEach = typed('forEach', {\n    'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {\n      // figure out what number of arguments the callback function expects\n      var args = maxArgumentCount(callback);\n      var recurse = function recurse(value, index) {\n        if (Array.isArray(value)) {\n          forEach(value, function (child, i) {\n            // we create a copy of the index array and append the new index value\n            recurse(child, index.concat(i + 1)); // one based index, hence i+1\n          });\n        } else {\n          // invoke the callback function with the right number of arguments\n          if (args === 1) {\n            callback(value);\n          } else if (args === 2) {\n            callback(value, index);\n          } else {\n            // 3 or -1\n            callback(value, index, array);\n          }\n        }\n      };\n      recurse(array.valueOf(), []); // pass Array\n    }\n  });\n\n  return forEachTransform;\n}, {\n  isTransformFunction: true\n});"],"mappings":"AAAA,SAASA,wBAAwB,EAAEC,YAAY,QAAQ,mBAAmB;AAC1E,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,SAASC,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,uBAAuB,QAAQ,oCAAoC;AAC5E,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,sBAAsB,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACrF,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;EACE,SAASE,gBAAgBA,CAACC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAE;IAC3C,IAAIC,CAAC,EAAEC,QAAQ;IACf,IAAIJ,IAAI,CAAC,CAAC,CAAC,EAAE;MACXG,CAAC,GAAGH,IAAI,CAAC,CAAC,CAAC,CAACK,OAAO,EAAE,CAACC,QAAQ,CAACJ,KAAK,CAAC;IACvC;IACA,IAAIF,IAAI,CAAC,CAAC,CAAC,EAAE;MACX,IAAIX,YAAY,CAACW,IAAI,CAAC,CAAC,CAAC,CAAC,IAAIZ,wBAAwB,CAACY,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;QAC9D;QACAI,QAAQ,GAAGJ,IAAI,CAAC,CAAC,CAAC,CAACK,OAAO,EAAE,CAACC,QAAQ,CAACJ,KAAK,CAAC;MAC9C,CAAC,MAAM;QACL;QACAE,QAAQ,GAAGX,uBAAuB,CAACO,IAAI,CAAC,CAAC,CAAC,EAAEC,IAAI,EAAEC,KAAK,CAAC;MAC1D;IACF;IACA,OAAOK,QAAQ,CAACJ,CAAC,EAAEC,QAAQ,CAAC;EAC9B;EACAL,gBAAgB,CAACS,OAAO,GAAG,IAAI;;EAE/B;EACA,IAAID,QAAQ,GAAGT,KAAK,CAAC,SAAS,EAAE;IAC9B,0BAA0B,EAAE,SAASW,mBAAmBA,CAACC,KAAK,EAAEN,QAAQ,EAAE;MACxE;MACA,IAAIJ,IAAI,GAAGV,gBAAgB,CAACc,QAAQ,CAAC;MACrC,IAAIO,OAAO,GAAG,SAASA,OAAOA,CAACC,KAAK,EAAEC,KAAK,EAAE;QAC3C,IAAIC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE;UACxBrB,OAAO,CAACqB,KAAK,EAAE,UAAUI,KAAK,EAAEC,CAAC,EAAE;YACjC;YACAN,OAAO,CAACK,KAAK,EAAEH,KAAK,CAACK,MAAM,CAACD,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;UACvC,CAAC,CAAC;QACJ,CAAC,MAAM;UACL;UACA,IAAIjB,IAAI,KAAK,CAAC,EAAE;YACdI,QAAQ,CAACQ,KAAK,CAAC;UACjB,CAAC,MAAM,IAAIZ,IAAI,KAAK,CAAC,EAAE;YACrBI,QAAQ,CAACQ,KAAK,EAAEC,KAAK,CAAC;UACxB,CAAC,MAAM;YACL;YACAT,QAAQ,CAACQ,KAAK,EAAEC,KAAK,EAAEH,KAAK,CAAC;UAC/B;QACF;MACF,CAAC;MACDC,OAAO,CAACD,KAAK,CAACS,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;IAChC;EACF,CAAC,CAAC;;EAEF,OAAOpB,gBAAgB;AACzB,CAAC,EAAE;EACDqB,mBAAmB,EAAE;AACvB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}