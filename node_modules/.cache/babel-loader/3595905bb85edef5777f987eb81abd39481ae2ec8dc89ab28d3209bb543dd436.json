{"ast":null,"code":"import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'mad';\nvar dependencies = ['typed', 'abs', 'map', 'median', 'subtract'];\nexport var createMad = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    map,\n    median,\n    subtract\n  } = _ref;\n  /**\n   * Compute the median absolute deviation of a matrix or a list with values.\n   * The median absolute deviation is defined as the median of the absolute\n   * deviations from the median.\n   *\n   * Syntax:\n   *\n   *     math.mad(a, b, c, ...)\n   *     math.mad(A)\n   *\n   * Examples:\n   *\n   *     math.mad(10, 20, 30)             // returns 10\n   *     math.mad([1, 2, 3])              // returns 1\n   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5\n   *\n   * See also:\n   *\n   *     median, mean, std, abs\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or multiple scalar values.\n   * @return {*} The median absolute deviation.\n   */\n  return typed(name, {\n    // mad([a, b, c, d, ...])\n    'Array | Matrix': _mad,\n    // mad(a, b, c, d, ...)\n    '...': function _(args) {\n      return _mad(args);\n    }\n  });\n  function _mad(array) {\n    array = flatten(array.valueOf());\n    if (array.length === 0) {\n      throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');\n    }\n    try {\n      var med = median(array);\n      return median(map(array, function (value) {\n        return abs(subtract(value, med));\n      }));\n    } catch (err) {\n      if (err instanceof TypeError && err.message.indexOf('median') !== -1) {\n        throw new TypeError(err.message.replace('median', 'mad'));\n      } else {\n        throw improveErrorMessage(err, 'mad');\n      }\n    }\n  }\n});","map":{"version":3,"names":["flatten","factory","improveErrorMessage","name","dependencies","createMad","_ref","typed","abs","map","median","subtract","_mad","_","args","array","valueOf","length","Error","med","value","err","TypeError","message","indexOf","replace"],"sources":["/Users/alexgeldash/Projects/calculator/node_modules/mathjs/lib/esm/function/statistics/mad.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'mad';\nvar dependencies = ['typed', 'abs', 'map', 'median', 'subtract'];\nexport var createMad = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    map,\n    median,\n    subtract\n  } = _ref;\n  /**\n   * Compute the median absolute deviation of a matrix or a list with values.\n   * The median absolute deviation is defined as the median of the absolute\n   * deviations from the median.\n   *\n   * Syntax:\n   *\n   *     math.mad(a, b, c, ...)\n   *     math.mad(A)\n   *\n   * Examples:\n   *\n   *     math.mad(10, 20, 30)             // returns 10\n   *     math.mad([1, 2, 3])              // returns 1\n   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5\n   *\n   * See also:\n   *\n   *     median, mean, std, abs\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or multiple scalar values.\n   * @return {*} The median absolute deviation.\n   */\n  return typed(name, {\n    // mad([a, b, c, d, ...])\n    'Array | Matrix': _mad,\n    // mad(a, b, c, d, ...)\n    '...': function _(args) {\n      return _mad(args);\n    }\n  });\n  function _mad(array) {\n    array = flatten(array.valueOf());\n    if (array.length === 0) {\n      throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');\n    }\n    try {\n      var med = median(array);\n      return median(map(array, function (value) {\n        return abs(subtract(value, med));\n      }));\n    } catch (err) {\n      if (err instanceof TypeError && err.message.indexOf('median') !== -1) {\n        throw new TypeError(err.message.replace('median', 'mad'));\n      } else {\n        throw improveErrorMessage(err, 'mad');\n      }\n    }\n  }\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC;AAChE,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACxE,IAAI;IACFC,KAAK;IACLC,GAAG;IACHC,GAAG;IACHC,MAAM;IACNC;EACF,CAAC,GAAGL,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB;IACA,gBAAgB,EAAES,IAAI;IACtB;IACA,KAAK,EAAE,SAASC,CAACA,CAACC,IAAI,EAAE;MACtB,OAAOF,IAAI,CAACE,IAAI,CAAC;IACnB;EACF,CAAC,CAAC;EACF,SAASF,IAAIA,CAACG,KAAK,EAAE;IACnBA,KAAK,GAAGf,OAAO,CAACe,KAAK,CAACC,OAAO,EAAE,CAAC;IAChC,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;MACtB,MAAM,IAAIC,KAAK,CAAC,oEAAoE,CAAC;IACvF;IACA,IAAI;MACF,IAAIC,GAAG,GAAGT,MAAM,CAACK,KAAK,CAAC;MACvB,OAAOL,MAAM,CAACD,GAAG,CAACM,KAAK,EAAE,UAAUK,KAAK,EAAE;QACxC,OAAOZ,GAAG,CAACG,QAAQ,CAACS,KAAK,EAAED,GAAG,CAAC,CAAC;MAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZ,IAAIA,GAAG,YAAYC,SAAS,IAAID,GAAG,CAACE,OAAO,CAACC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;QACpE,MAAM,IAAIF,SAAS,CAACD,GAAG,CAACE,OAAO,CAACE,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;MAC3D,CAAC,MAAM;QACL,MAAMvB,mBAAmB,CAACmB,GAAG,EAAE,KAAK,CAAC;MACvC;IACF;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}