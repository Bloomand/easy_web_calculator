{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { gcdNumber } from '../../plain/number/index.js';\nimport { ArgumentsError } from '../../error/ArgumentsError.js';\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix', 'concat'];\nvar gcdTypes = 'number | BigNumber | Fraction | Matrix | Array';\nvar gcdManyTypesSignature = \"\".concat(gcdTypes, \", \").concat(gcdTypes, \", ...\").concat(gcdTypes);\nfunction is1d(array) {\n  return !array.some(element => Array.isArray(element));\n}\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n  return typed(name, {\n    'number, number': gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': (x, y) => x.gcd(y)\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }), {\n    [gcdManyTypesSignature]: typed.referToSelf(self => (a, b, args) => {\n      var res = self(a, b);\n      for (var i = 0; i < args.length; i++) {\n        res = self(res, args[i]);\n      }\n      return res;\n    }),\n    Array: typed.referToSelf(self => array => {\n      if (array.length === 1 && Array.isArray(array[0]) && is1d(array[0])) {\n        return self(...array[0]);\n      }\n      if (is1d(array)) {\n        return self(...array);\n      }\n      throw new ArgumentsError('gcd() supports only 1d matrices!');\n    }),\n    Matrix: typed.referToSelf(self => matrix => {\n      return self(matrix.toArray());\n    })\n  });\n\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    var zero = new BigNumber(0);\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n    return a.lt(zero) ? a.neg() : a;\n  }\n});","map":{"version":3,"names":["factory","createMatAlgo01xDSid","createMatAlgo04xSidSid","createMatAlgo10xSids","createMatrixAlgorithmSuite","gcdNumber","ArgumentsError","name","dependencies","gcdTypes","gcdManyTypesSignature","concat","is1d","array","some","element","Array","isArray","createGcd","_ref","typed","matrix","equalScalar","BigNumber","DenseMatrix","matAlgo01xDSid","matAlgo04xSidSid","matAlgo10xSids","matrixAlgorithmSuite","_gcdBigNumber","Fraction, Fraction","x","y","gcd","SS","DS","Ss","referToSelf","self","a","b","args","res","i","length","Matrix","toArray","isInt","Error","zero","isZero","r","mod","lt","neg"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/arithmetic/gcd.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { gcdNumber } from '../../plain/number/index.js';\nimport { ArgumentsError } from '../../error/ArgumentsError.js';\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix', 'concat'];\nvar gcdTypes = 'number | BigNumber | Fraction | Matrix | Array';\nvar gcdManyTypesSignature = \"\".concat(gcdTypes, \", \").concat(gcdTypes, \", ...\").concat(gcdTypes);\nfunction is1d(array) {\n  return !array.some(element => Array.isArray(element));\n}\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n  return typed(name, {\n    'number, number': gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': (x, y) => x.gcd(y)\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }), {\n    [gcdManyTypesSignature]: typed.referToSelf(self => (a, b, args) => {\n      var res = self(a, b);\n      for (var i = 0; i < args.length; i++) {\n        res = self(res, args[i]);\n      }\n      return res;\n    }),\n    Array: typed.referToSelf(self => array => {\n      if (array.length === 1 && Array.isArray(array[0]) && is1d(array[0])) {\n        return self(...array[0]);\n      }\n      if (is1d(array)) {\n        return self(...array);\n      }\n      throw new ArgumentsError('gcd() supports only 1d matrices!');\n    }),\n    Matrix: typed.referToSelf(self => matrix => {\n      return self(matrix.toArray());\n    })\n  });\n\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    var zero = new BigNumber(0);\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n    return a.lt(zero) ? a.neg() : a;\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}