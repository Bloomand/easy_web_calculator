{"ast":null,"code":"import { isMatrix } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'partitionSelect';\nvar dependencies = ['typed', 'isNumeric', 'isNaN', 'compare'];\nexport var createPartitionSelect = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isNumeric,\n    isNaN,\n    compare\n  } = _ref;\n  var asc = compare;\n  var desc = (a, b) => -compare(a, b);\n\n  /**\n   * Partition-based selection of an array or 1D matrix.\n   * Will find the kth smallest value, and mutates the input array.\n   * Uses Quickselect.\n   *\n   * Syntax:\n   *\n   *    math.partitionSelect(x, k)\n   *    math.partitionSelect(x, k, compare)\n   *\n   * Examples:\n   *\n   *    math.partitionSelect([5, 10, 1], 2)                               // returns 10\n   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1, math.compareText)   // returns 'B'\n   *\n   *    function sortByLength (a, b) {\n   *      return a.length - b.length\n   *    }\n   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'\n   *\n   *    // the input array is mutated\n   *    arr = [5, 2, 1]\n   *    math.partitionSelect(arr, 0) // returns 1, arr is now: [1, 2, 5]\n   *    math.partitionSelect(arr, 1, 'desc') // returns 2, arr is now: [5, 2, 1]\n   *\n   * See also:\n   *\n   *    sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n   * @param {Number} k            The kth smallest value to be retrieved zero-based index\n   * @param {Function | 'asc' | 'desc'} [compare='asc']\n   *        An optional comparator function. The function is called as\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n   *        and 0 when a == b.\n   * @return {*} Returns the kth lowest value.\n   */\n  return typed(name, {\n    'Array | Matrix, number': function ArrayMatrixNumber(x, k) {\n      return _partitionSelect(x, k, asc);\n    },\n    'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {\n      if (compare === 'asc') {\n        return _partitionSelect(x, k, asc);\n      } else if (compare === 'desc') {\n        return _partitionSelect(x, k, desc);\n      } else {\n        throw new Error('Compare string must be \"asc\" or \"desc\"');\n      }\n    },\n    'Array | Matrix, number, function': _partitionSelect\n  });\n  function _partitionSelect(x, k, compare) {\n    if (!isInteger(k) || k < 0) {\n      throw new Error('k must be a non-negative integer');\n    }\n    if (isMatrix(x)) {\n      var size = x.size();\n      if (size.length > 1) {\n        throw new Error('Only one dimensional matrices supported');\n      }\n      return quickSelect(x.valueOf(), k, compare);\n    }\n    if (Array.isArray(x)) {\n      return quickSelect(x, k, compare);\n    }\n  }\n\n  /**\n   * Quickselect algorithm.\n   * Code adapted from:\n   * https://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html\n   *\n   * @param {Array} arr\n   * @param {Number} k\n   * @param {Function} compare\n   * @private\n   */\n  function quickSelect(arr, k, compare) {\n    if (k >= arr.length) {\n      throw new Error('k out of bounds');\n    }\n\n    // check for NaN values since these can cause an infinite while loop\n    for (var i = 0; i < arr.length; i++) {\n      if (isNumeric(arr[i]) && isNaN(arr[i])) {\n        return arr[i]; // return NaN\n      }\n    }\n\n    var from = 0;\n    var to = arr.length - 1;\n\n    // if from == to we reached the kth element\n    while (from < to) {\n      var r = from;\n      var w = to;\n      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from];\n\n      // stop if the reader and writer meets\n      while (r < w) {\n        // arr[r] >= pivot\n        if (compare(arr[r], pivot) >= 0) {\n          // put the large values at the end\n          var tmp = arr[w];\n          arr[w] = arr[r];\n          arr[r] = tmp;\n          --w;\n        } else {\n          // the value is smaller than the pivot, skip\n          ++r;\n        }\n      }\n\n      // if we stepped up (r++) we need to step one down (arr[r] > pivot)\n      if (compare(arr[r], pivot) > 0) {\n        --r;\n      }\n\n      // the r pointer is on the end of the first k elements\n      if (k <= r) {\n        to = r;\n      } else {\n        from = r + 1;\n      }\n    }\n    return arr[k];\n  }\n});","map":{"version":3,"names":["isMatrix","isInteger","factory","name","dependencies","createPartitionSelect","_ref","typed","isNumeric","isNaN","compare","asc","desc","a","b","ArrayMatrixNumber","x","k","_partitionSelect","ArrayMatrixNumberString","Error","size","length","quickSelect","valueOf","Array","isArray","arr","i","from","to","r","w","pivot","Math","floor","random","tmp"],"sources":["/Users/alexgeldash/Projects/js-easy-windows-calculator/node_modules/mathjs/lib/esm/function/matrix/partitionSelect.js"],"sourcesContent":["import { isMatrix } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'partitionSelect';\nvar dependencies = ['typed', 'isNumeric', 'isNaN', 'compare'];\nexport var createPartitionSelect = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isNumeric,\n    isNaN,\n    compare\n  } = _ref;\n  var asc = compare;\n  var desc = (a, b) => -compare(a, b);\n\n  /**\n   * Partition-based selection of an array or 1D matrix.\n   * Will find the kth smallest value, and mutates the input array.\n   * Uses Quickselect.\n   *\n   * Syntax:\n   *\n   *    math.partitionSelect(x, k)\n   *    math.partitionSelect(x, k, compare)\n   *\n   * Examples:\n   *\n   *    math.partitionSelect([5, 10, 1], 2)                               // returns 10\n   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1, math.compareText)   // returns 'B'\n   *\n   *    function sortByLength (a, b) {\n   *      return a.length - b.length\n   *    }\n   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'\n   *\n   *    // the input array is mutated\n   *    arr = [5, 2, 1]\n   *    math.partitionSelect(arr, 0) // returns 1, arr is now: [1, 2, 5]\n   *    math.partitionSelect(arr, 1, 'desc') // returns 2, arr is now: [5, 2, 1]\n   *\n   * See also:\n   *\n   *    sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n   * @param {Number} k            The kth smallest value to be retrieved zero-based index\n   * @param {Function | 'asc' | 'desc'} [compare='asc']\n   *        An optional comparator function. The function is called as\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n   *        and 0 when a == b.\n   * @return {*} Returns the kth lowest value.\n   */\n  return typed(name, {\n    'Array | Matrix, number': function ArrayMatrixNumber(x, k) {\n      return _partitionSelect(x, k, asc);\n    },\n    'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {\n      if (compare === 'asc') {\n        return _partitionSelect(x, k, asc);\n      } else if (compare === 'desc') {\n        return _partitionSelect(x, k, desc);\n      } else {\n        throw new Error('Compare string must be \"asc\" or \"desc\"');\n      }\n    },\n    'Array | Matrix, number, function': _partitionSelect\n  });\n  function _partitionSelect(x, k, compare) {\n    if (!isInteger(k) || k < 0) {\n      throw new Error('k must be a non-negative integer');\n    }\n    if (isMatrix(x)) {\n      var size = x.size();\n      if (size.length > 1) {\n        throw new Error('Only one dimensional matrices supported');\n      }\n      return quickSelect(x.valueOf(), k, compare);\n    }\n    if (Array.isArray(x)) {\n      return quickSelect(x, k, compare);\n    }\n  }\n\n  /**\n   * Quickselect algorithm.\n   * Code adapted from:\n   * https://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html\n   *\n   * @param {Array} arr\n   * @param {Number} k\n   * @param {Function} compare\n   * @private\n   */\n  function quickSelect(arr, k, compare) {\n    if (k >= arr.length) {\n      throw new Error('k out of bounds');\n    }\n\n    // check for NaN values since these can cause an infinite while loop\n    for (var i = 0; i < arr.length; i++) {\n      if (isNumeric(arr[i]) && isNaN(arr[i])) {\n        return arr[i]; // return NaN\n      }\n    }\n\n    var from = 0;\n    var to = arr.length - 1;\n\n    // if from == to we reached the kth element\n    while (from < to) {\n      var r = from;\n      var w = to;\n      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from];\n\n      // stop if the reader and writer meets\n      while (r < w) {\n        // arr[r] >= pivot\n        if (compare(arr[r], pivot) >= 0) {\n          // put the large values at the end\n          var tmp = arr[w];\n          arr[w] = arr[r];\n          arr[r] = tmp;\n          --w;\n        } else {\n          // the value is smaller than the pivot, skip\n          ++r;\n        }\n      }\n\n      // if we stepped up (r++) we need to step one down (arr[r] > pivot)\n      if (compare(arr[r], pivot) > 0) {\n        --r;\n      }\n\n      // the r pointer is on the end of the first k elements\n      if (k <= r) {\n        to = r;\n      } else {\n        from = r + 1;\n      }\n    }\n    return arr[k];\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}